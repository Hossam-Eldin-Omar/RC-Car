
new_rc_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00002baa  00002c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000035c  0080011e  0080011e  00002cfc  2**0
                  ALLOC
  3 .stab         000026d0  00000000  00000000  00002cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000892  00000000  00000000  000053cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000320  00000000  00000000  00005c60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038ac  00000000  00000000  00005f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012eb  00000000  00000000  0000982c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ab5  00000000  00000000  0000ab17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001050  00000000  00000000  0000c5cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000121b  00000000  00000000  0000d61c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027aa  00000000  00000000  0000e837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__vector_1>
       8:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__vector_2>
       c:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_3>
      10:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <__vector_4>
      14:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_5>
      18:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__vector_6>
      1c:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__vector_7>
      20:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__vector_8>
      24:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_9>
      28:	0c 94 9f 09 	jmp	0x133e	; 0x133e <__vector_10>
      2c:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 4b 05 	jmp	0xa96	; 0xa96 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <main>
      8a:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DC_MOTOR_init>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	c6 2f       	mov	r28, r22
      98:	d2 2f       	mov	r29, r18
      9a:	e8 2f       	mov	r30, r24
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	e3 59       	subi	r30, 0x93	; 147
      a0:	fb 4f       	sbci	r31, 0xFB	; 251
      a2:	26 2f       	mov	r18, r22
      a4:	23 70       	andi	r18, 0x03	; 3
      a6:	84 2f       	mov	r24, r20
      a8:	87 70       	andi	r24, 0x07	; 7
      aa:	88 0f       	add	r24, r24
      ac:	88 0f       	add	r24, r24
      ae:	9d 2f       	mov	r25, r29
      b0:	92 95       	swap	r25
      b2:	99 0f       	add	r25, r25
      b4:	90 7e       	andi	r25, 0xE0	; 224
      b6:	82 2b       	or	r24, r18
      b8:	89 2b       	or	r24, r25
      ba:	80 83       	st	Z, r24
      bc:	86 2f       	mov	r24, r22
      be:	64 2f       	mov	r22, r20
      c0:	41 e0       	ldi	r20, 0x01	; 1
      c2:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
      c6:	8c 2f       	mov	r24, r28
      c8:	6d 2f       	mov	r22, r29
      ca:	41 e0       	ldi	r20, 0x01	; 1
      cc:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
      d0:	df 91       	pop	r29
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <DC_MOTOR_FORWARD_ONE>:
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	c8 2f       	mov	r28, r24
      dc:	d0 e0       	ldi	r29, 0x00	; 0
      de:	c3 59       	subi	r28, 0x93	; 147
      e0:	db 4f       	sbci	r29, 0xFB	; 251
      e2:	88 81       	ld	r24, Y
      e4:	68 2f       	mov	r22, r24
      e6:	66 95       	lsr	r22
      e8:	66 95       	lsr	r22
      ea:	67 70       	andi	r22, 0x07	; 7
      ec:	83 70       	andi	r24, 0x03	; 3
      ee:	41 e0       	ldi	r20, 0x01	; 1
      f0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
      f4:	88 81       	ld	r24, Y
      f6:	68 2f       	mov	r22, r24
      f8:	62 95       	swap	r22
      fa:	66 95       	lsr	r22
      fc:	67 70       	andi	r22, 0x07	; 7
      fe:	83 70       	andi	r24, 0x03	; 3
     100:	40 e0       	ldi	r20, 0x00	; 0
     102:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <DC_MOTOR_BACKWARD_ONE>:
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	c8 2f       	mov	r28, r24
     112:	d0 e0       	ldi	r29, 0x00	; 0
     114:	c3 59       	subi	r28, 0x93	; 147
     116:	db 4f       	sbci	r29, 0xFB	; 251
     118:	88 81       	ld	r24, Y
     11a:	68 2f       	mov	r22, r24
     11c:	66 95       	lsr	r22
     11e:	66 95       	lsr	r22
     120:	67 70       	andi	r22, 0x07	; 7
     122:	83 70       	andi	r24, 0x03	; 3
     124:	40 e0       	ldi	r20, 0x00	; 0
     126:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     12a:	88 81       	ld	r24, Y
     12c:	68 2f       	mov	r22, r24
     12e:	62 95       	swap	r22
     130:	66 95       	lsr	r22
     132:	67 70       	andi	r22, 0x07	; 7
     134:	83 70       	andi	r24, 0x03	; 3
     136:	41 e0       	ldi	r20, 0x01	; 1
     138:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	08 95       	ret

00000142 <DC_MOTOR_STOP_ONE>:
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	c8 2f       	mov	r28, r24
     148:	d0 e0       	ldi	r29, 0x00	; 0
     14a:	c3 59       	subi	r28, 0x93	; 147
     14c:	db 4f       	sbci	r29, 0xFB	; 251
     14e:	88 81       	ld	r24, Y
     150:	68 2f       	mov	r22, r24
     152:	66 95       	lsr	r22
     154:	66 95       	lsr	r22
     156:	67 70       	andi	r22, 0x07	; 7
     158:	83 70       	andi	r24, 0x03	; 3
     15a:	40 e0       	ldi	r20, 0x00	; 0
     15c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     160:	88 81       	ld	r24, Y
     162:	68 2f       	mov	r22, r24
     164:	62 95       	swap	r22
     166:	66 95       	lsr	r22
     168:	67 70       	andi	r22, 0x07	; 7
     16a:	83 70       	andi	r24, 0x03	; 3
     16c:	40 e0       	ldi	r20, 0x00	; 0
     16e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	08 95       	ret

00000178 <DC_MOTOR_FORWARD>:
     178:	cf 93       	push	r28
     17a:	c8 2f       	mov	r28, r24
     17c:	86 2f       	mov	r24, r22
     17e:	0e 94 6b 00 	call	0xd6	; 0xd6 <DC_MOTOR_FORWARD_ONE>
     182:	8c 2f       	mov	r24, r28
     184:	0e 94 6b 00 	call	0xd6	; 0xd6 <DC_MOTOR_FORWARD_ONE>
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <DC_MOTOR_BACKWARD>:
     18c:	cf 93       	push	r28
     18e:	c8 2f       	mov	r28, r24
     190:	86 2f       	mov	r24, r22
     192:	0e 94 86 00 	call	0x10c	; 0x10c <DC_MOTOR_BACKWARD_ONE>
     196:	8c 2f       	mov	r24, r28
     198:	0e 94 86 00 	call	0x10c	; 0x10c <DC_MOTOR_BACKWARD_ONE>
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <DC_MOTOR_STOP>:
     1a0:	cf 93       	push	r28
     1a2:	c8 2f       	mov	r28, r24
     1a4:	86 2f       	mov	r24, r22
     1a6:	0e 94 a1 00 	call	0x142	; 0x142 <DC_MOTOR_STOP_ONE>
     1aa:	8c 2f       	mov	r24, r28
     1ac:	0e 94 a1 00 	call	0x142	; 0x142 <DC_MOTOR_STOP_ONE>
     1b0:	cf 91       	pop	r28
     1b2:	08 95       	ret

000001b4 <DC_MOTOR_STEER_Right>:
     1b4:	cf 93       	push	r28
     1b6:	c8 2f       	mov	r28, r24
     1b8:	86 2f       	mov	r24, r22
     1ba:	0e 94 6b 00 	call	0xd6	; 0xd6 <DC_MOTOR_FORWARD_ONE>
     1be:	8c 2f       	mov	r24, r28
     1c0:	0e 94 86 00 	call	0x10c	; 0x10c <DC_MOTOR_BACKWARD_ONE>
     1c4:	cf 91       	pop	r28
     1c6:	08 95       	ret

000001c8 <DC_MOTOR_STEER_Left>:
     1c8:	cf 93       	push	r28
     1ca:	c6 2f       	mov	r28, r22
     1cc:	0e 94 6b 00 	call	0xd6	; 0xd6 <DC_MOTOR_FORWARD_ONE>
     1d0:	8c 2f       	mov	r24, r28
     1d2:	0e 94 86 00 	call	0x10c	; 0x10c <DC_MOTOR_BACKWARD_ONE>
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <DC_MOTOR_SET_Direction>:
     1da:	41 30       	cpi	r20, 0x01	; 1
     1dc:	19 f4       	brne	.+6      	; 0x1e4 <DC_MOTOR_SET_Direction+0xa>
     1de:	0e 94 bc 00 	call	0x178	; 0x178 <DC_MOTOR_FORWARD>
     1e2:	08 95       	ret
     1e4:	42 30       	cpi	r20, 0x02	; 2
     1e6:	19 f4       	brne	.+6      	; 0x1ee <DC_MOTOR_SET_Direction+0x14>
     1e8:	0e 94 c6 00 	call	0x18c	; 0x18c <DC_MOTOR_BACKWARD>
     1ec:	08 95       	ret
     1ee:	44 30       	cpi	r20, 0x04	; 4
     1f0:	19 f4       	brne	.+6      	; 0x1f8 <DC_MOTOR_SET_Direction+0x1e>
     1f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DC_MOTOR_STEER_Right>
     1f6:	08 95       	ret
     1f8:	45 30       	cpi	r20, 0x05	; 5
     1fa:	19 f4       	brne	.+6      	; 0x202 <DC_MOTOR_SET_Direction+0x28>
     1fc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DC_MOTOR_STEER_Left>
     200:	08 95       	ret
     202:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DC_MOTOR_STOP>
     206:	08 95       	ret

00000208 <Request>:
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	66 e0       	ldi	r22, 0x06	; 6
     20c:	41 e0       	ldi	r20, 0x01	; 1
     20e:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     212:	83 e0       	ldi	r24, 0x03	; 3
     214:	66 e0       	ldi	r22, 0x06	; 6
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21c:	83 e9       	ldi	r24, 0x93	; 147
     21e:	91 e1       	ldi	r25, 0x11	; 17
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <Request+0x18>
     224:	00 c0       	rjmp	.+0      	; 0x226 <Request+0x1e>
     226:	00 00       	nop
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	66 e0       	ldi	r22, 0x06	; 6
     22c:	41 e0       	ldi	r20, 0x01	; 1
     22e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     232:	96 e0       	ldi	r25, 0x06	; 6
     234:	9a 95       	dec	r25
     236:	f1 f7       	brne	.-4      	; 0x234 <Request+0x2c>
     238:	00 c0       	rjmp	.+0      	; 0x23a <Request+0x32>
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	66 e0       	ldi	r22, 0x06	; 6
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     244:	08 95       	ret

00000246 <Response>:
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	66 e0       	ldi	r22, 0x06	; 6
     24a:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_read_Pin>
     24e:	88 23       	and	r24, r24
     250:	d1 f7       	brne	.-12     	; 0x246 <Response>
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	66 e0       	ldi	r22, 0x06	; 6
     256:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_read_Pin>
     25a:	88 23       	and	r24, r24
     25c:	d1 f3       	breq	.-12     	; 0x252 <Response+0xc>
     25e:	83 e0       	ldi	r24, 0x03	; 3
     260:	66 e0       	ldi	r22, 0x06	; 6
     262:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_read_Pin>
     266:	88 23       	and	r24, r24
     268:	d1 f7       	brne	.-12     	; 0x25e <Response+0x18>
     26a:	08 95       	ret

0000026c <Receive_data>:
     26c:	af 92       	push	r10
     26e:	bf 92       	push	r11
     270:	cf 92       	push	r12
     272:	df 92       	push	r13
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	00 d0       	rcall	.+0      	; 0x282 <Receive_data+0x16>
     282:	00 d0       	rcall	.+0      	; 0x284 <Receive_data+0x18>
     284:	0f 92       	push	r0
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	0e 94 04 01 	call	0x208	; 0x208 <Request>
     28e:	0e 94 23 01 	call	0x246	; 0x246 <Response>
     292:	fe 01       	movw	r30, r28
     294:	31 96       	adiw	r30, 0x01	; 1
     296:	85 e0       	ldi	r24, 0x05	; 5
     298:	df 01       	movw	r26, r30
     29a:	1d 92       	st	X+, r1
     29c:	8a 95       	dec	r24
     29e:	e9 f7       	brne	.-6      	; 0x29a <Receive_data+0x2e>
     2a0:	7f 01       	movw	r14, r30
     2a2:	0f 2e       	mov	r0, r31
     2a4:	f6 e0       	ldi	r31, 0x06	; 6
     2a6:	cf 2e       	mov	r12, r31
     2a8:	dd 24       	eor	r13, r13
     2aa:	f0 2d       	mov	r31, r0
     2ac:	cc 0e       	add	r12, r28
     2ae:	dd 1e       	adc	r13, r29
     2b0:	aa 24       	eor	r10, r10
     2b2:	bb 24       	eor	r11, r11
     2b4:	68 94       	set
     2b6:	a3 f8       	bld	r10, 3
     2b8:	28 c0       	rjmp	.+80     	; 0x30a <Receive_data+0x9e>
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	66 e0       	ldi	r22, 0x06	; 6
     2be:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_read_Pin>
     2c2:	88 23       	and	r24, r24
     2c4:	d1 f3       	breq	.-12     	; 0x2ba <Receive_data+0x4e>
     2c6:	ba e0       	ldi	r27, 0x0A	; 10
     2c8:	ba 95       	dec	r27
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <Receive_data+0x5c>
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	66 e0       	ldi	r22, 0x06	; 6
     2d0:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_read_Pin>
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	31 f4       	brne	.+12     	; 0x2e4 <Receive_data+0x78>
     2d8:	f7 01       	movw	r30, r14
     2da:	80 81       	ld	r24, Z
     2dc:	88 0f       	add	r24, r24
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	80 83       	st	Z, r24
     2e2:	04 c0       	rjmp	.+8      	; 0x2ec <Receive_data+0x80>
     2e4:	d7 01       	movw	r26, r14
     2e6:	8c 91       	ld	r24, X
     2e8:	88 0f       	add	r24, r24
     2ea:	8c 93       	st	X, r24
     2ec:	83 e0       	ldi	r24, 0x03	; 3
     2ee:	66 e0       	ldi	r22, 0x06	; 6
     2f0:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_read_Pin>
     2f4:	88 23       	and	r24, r24
     2f6:	d1 f7       	brne	.-12     	; 0x2ec <Receive_data+0x80>
     2f8:	01 50       	subi	r16, 0x01	; 1
     2fa:	10 40       	sbci	r17, 0x00	; 0
     2fc:	f1 f6       	brne	.-68     	; 0x2ba <Receive_data+0x4e>
     2fe:	08 94       	sec
     300:	e1 1c       	adc	r14, r1
     302:	f1 1c       	adc	r15, r1
     304:	ec 14       	cp	r14, r12
     306:	fd 04       	cpc	r15, r13
     308:	11 f0       	breq	.+4      	; 0x30e <Receive_data+0xa2>
     30a:	85 01       	movw	r16, r10
     30c:	d6 cf       	rjmp	.-84     	; 0x2ba <Receive_data+0x4e>
     30e:	39 81       	ldd	r19, Y+1	; 0x01
     310:	30 93 73 04 	sts	0x0473, r19
     314:	4a 81       	ldd	r20, Y+2	; 0x02
     316:	40 93 70 04 	sts	0x0470, r20
     31a:	2b 81       	ldd	r18, Y+3	; 0x03
     31c:	20 93 72 04 	sts	0x0472, r18
     320:	8c 81       	ldd	r24, Y+4	; 0x04
     322:	80 93 74 04 	sts	0x0474, r24
     326:	9d 81       	ldd	r25, Y+5	; 0x05
     328:	90 93 71 04 	sts	0x0471, r25
     32c:	34 0f       	add	r19, r20
     32e:	23 0f       	add	r18, r19
     330:	28 0f       	add	r18, r24
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	92 13       	cpse	r25, r18
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	ff 90       	pop	r15
     34c:	ef 90       	pop	r14
     34e:	df 90       	pop	r13
     350:	cf 90       	pop	r12
     352:	bf 90       	pop	r11
     354:	af 90       	pop	r10
     356:	08 95       	ret

00000358 <INPUT_Init>:
     358:	40 e0       	ldi	r20, 0x00	; 0
     35a:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     35e:	08 95       	ret

00000360 <INPUT_PULLUP_Init>:
     360:	42 e0       	ldi	r20, 0x02	; 2
     362:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     366:	08 95       	ret

00000368 <INPUT_Read>:
     368:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_read_Pin>
     36c:	08 95       	ret

0000036e <INPUT_PULLUP_Read>:
     36e:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_read_Pin>
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	81 11       	cpse	r24, r1
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	89 2f       	mov	r24, r25
     37a:	08 95       	ret

0000037c <keypad_vInit>:
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	60 e0       	ldi	r22, 0x00	; 0
     380:	41 e0       	ldi	r20, 0x01	; 1
     382:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	41 e0       	ldi	r20, 0x01	; 1
     38c:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	62 e0       	ldi	r22, 0x02	; 2
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	63 e0       	ldi	r22, 0x03	; 3
     39e:	41 e0       	ldi	r20, 0x01	; 1
     3a0:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	64 e0       	ldi	r22, 0x04	; 4
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	65 e0       	ldi	r22, 0x05	; 5
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	66 e0       	ldi	r22, 0x06	; 6
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	67 e0       	ldi	r22, 0x07	; 7
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	64 e0       	ldi	r22, 0x04	; 4
     3d0:	42 e0       	ldi	r20, 0x02	; 2
     3d2:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	65 e0       	ldi	r22, 0x05	; 5
     3da:	42 e0       	ldi	r20, 0x02	; 2
     3dc:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	66 e0       	ldi	r22, 0x06	; 6
     3e4:	42 e0       	ldi	r20, 0x02	; 2
     3e6:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	67 e0       	ldi	r22, 0x07	; 7
     3ee:	42 e0       	ldi	r20, 0x02	; 2
     3f0:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     3f4:	08 95       	ret

000003f6 <keypad_u8check_press>:
     3f6:	0f 93       	push	r16
     3f8:	1f 93       	push	r17
     3fa:	cf 93       	push	r28
     3fc:	df 93       	push	r29
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	60 97       	sbiw	r28, 0x10	; 16
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	de 01       	movw	r26, r28
     410:	11 96       	adiw	r26, 0x01	; 1
     412:	e0 e6       	ldi	r30, 0x60	; 96
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 e1       	ldi	r24, 0x10	; 16
     418:	01 90       	ld	r0, Z+
     41a:	0d 92       	st	X+, r0
     41c:	81 50       	subi	r24, 0x01	; 1
     41e:	e1 f7       	brne	.-8      	; 0x418 <keypad_u8check_press+0x22>
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	60 e0       	ldi	r22, 0x00	; 0
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	62 e0       	ldi	r22, 0x02	; 2
     43a:	41 e0       	ldi	r20, 0x01	; 1
     43c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	63 e0       	ldi	r22, 0x03	; 3
     444:	41 e0       	ldi	r20, 0x01	; 1
     446:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	60 2f       	mov	r22, r16
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	61 2f       	mov	r22, r17
     458:	6c 5f       	subi	r22, 0xFC	; 252
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 ee 06 	call	0xddc	; 0xddc <DIO_read_Pin>
     460:	88 23       	and	r24, r24
     462:	61 f4       	brne	.+24     	; 0x47c <keypad_u8check_press+0x86>
     464:	e0 2f       	mov	r30, r16
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	ee 0f       	add	r30, r30
     46e:	ff 1f       	adc	r31, r31
     470:	e1 0f       	add	r30, r17
     472:	f1 1d       	adc	r31, r1
     474:	ec 0f       	add	r30, r28
     476:	fd 1f       	adc	r31, r29
     478:	81 81       	ldd	r24, Z+1	; 0x01
     47a:	04 c0       	rjmp	.+8      	; 0x484 <keypad_u8check_press+0x8e>
     47c:	1f 5f       	subi	r17, 0xFF	; 255
     47e:	14 30       	cpi	r17, 0x04	; 4
     480:	51 f7       	brne	.-44     	; 0x456 <keypad_u8check_press+0x60>
     482:	0b c0       	rjmp	.+22     	; 0x49a <keypad_u8check_press+0xa4>
     484:	60 96       	adiw	r28, 0x10	; 16
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	f8 94       	cli
     48a:	de bf       	out	0x3e, r29	; 62
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret
     49a:	0f 5f       	subi	r16, 0xFF	; 255
     49c:	04 30       	cpi	r16, 0x04	; 4
     49e:	09 f6       	brne	.-126    	; 0x422 <keypad_u8check_press+0x2c>
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	f0 cf       	rjmp	.-32     	; 0x484 <keypad_u8check_press+0x8e>

000004a4 <LCD_sendCommand>:
     4a4:	cf 93       	push	r28
     4a6:	c8 2f       	mov	r28, r24
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     4b2:	00 00       	nop
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     4be:	00 00       	nop
     4c0:	4c 2f       	mov	r20, r28
     4c2:	42 95       	swap	r20
     4c4:	4f 70       	andi	r20, 0x0F	; 15
     4c6:	41 70       	andi	r20, 0x01	; 1
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	64 e0       	ldi	r22, 0x04	; 4
     4cc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     4d0:	4c 2f       	mov	r20, r28
     4d2:	42 95       	swap	r20
     4d4:	46 95       	lsr	r20
     4d6:	47 70       	andi	r20, 0x07	; 7
     4d8:	41 70       	andi	r20, 0x01	; 1
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	65 e0       	ldi	r22, 0x05	; 5
     4de:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     4e2:	4c 2f       	mov	r20, r28
     4e4:	42 95       	swap	r20
     4e6:	46 95       	lsr	r20
     4e8:	46 95       	lsr	r20
     4ea:	43 70       	andi	r20, 0x03	; 3
     4ec:	41 70       	andi	r20, 0x01	; 1
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	66 e0       	ldi	r22, 0x06	; 6
     4f2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     4f6:	4c 2f       	mov	r20, r28
     4f8:	44 1f       	adc	r20, r20
     4fa:	44 27       	eor	r20, r20
     4fc:	44 1f       	adc	r20, r20
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	67 e0       	ldi	r22, 0x07	; 7
     502:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     506:	89 ef       	ldi	r24, 0xF9	; 249
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <LCD_sendCommand+0x66>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <LCD_sendCommand+0x6c>
     510:	00 00       	nop
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     51c:	00 00       	nop
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	41 e0       	ldi	r20, 0x01	; 1
     524:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     528:	00 00       	nop
     52a:	4c 2f       	mov	r20, r28
     52c:	41 70       	andi	r20, 0x01	; 1
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	64 e0       	ldi	r22, 0x04	; 4
     532:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     536:	4c 2f       	mov	r20, r28
     538:	46 95       	lsr	r20
     53a:	41 70       	andi	r20, 0x01	; 1
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	65 e0       	ldi	r22, 0x05	; 5
     540:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     544:	4c 2f       	mov	r20, r28
     546:	46 95       	lsr	r20
     548:	46 95       	lsr	r20
     54a:	41 70       	andi	r20, 0x01	; 1
     54c:	82 e0       	ldi	r24, 0x02	; 2
     54e:	66 e0       	ldi	r22, 0x06	; 6
     550:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     554:	c6 95       	lsr	r28
     556:	c6 95       	lsr	r28
     558:	c6 95       	lsr	r28
     55a:	4c 2f       	mov	r20, r28
     55c:	41 70       	andi	r20, 0x01	; 1
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	67 e0       	ldi	r22, 0x07	; 7
     562:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     566:	89 ef       	ldi	r24, 0xF9	; 249
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <LCD_sendCommand+0xc6>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_sendCommand+0xcc>
     570:	00 00       	nop
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57c:	00 00       	nop
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <LCD_init>:
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	41 e0       	ldi	r20, 0x01	; 1
     588:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     596:	87 e8       	ldi	r24, 0x87	; 135
     598:	93 e1       	ldi	r25, 0x13	; 19
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <LCD_init+0x18>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <LCD_init+0x1e>
     5a0:	00 00       	nop
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	64 e0       	ldi	r22, 0x04	; 4
     5a6:	41 e0       	ldi	r20, 0x01	; 1
     5a8:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	65 e0       	ldi	r22, 0x05	; 5
     5b0:	41 e0       	ldi	r20, 0x01	; 1
     5b2:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	66 e0       	ldi	r22, 0x06	; 6
     5ba:	41 e0       	ldi	r20, 0x01	; 1
     5bc:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	67 e0       	ldi	r22, 0x07	; 7
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     5ca:	87 e8       	ldi	r24, 0x87	; 135
     5cc:	93 e1       	ldi	r25, 0x13	; 19
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <LCD_init+0x4c>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <LCD_init+0x52>
     5d4:	00 00       	nop
     5d6:	83 e3       	ldi	r24, 0x33	; 51
     5d8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendCommand>
     5dc:	82 e3       	ldi	r24, 0x32	; 50
     5de:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendCommand>
     5e2:	88 e2       	ldi	r24, 0x28	; 40
     5e4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendCommand>
     5e8:	8c e0       	ldi	r24, 0x0C	; 12
     5ea:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendCommand>
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendCommand>
     5f4:	87 e8       	ldi	r24, 0x87	; 135
     5f6:	93 e1       	ldi	r25, 0x13	; 19
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_init+0x76>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_init+0x7c>
     5fe:	00 00       	nop
     600:	08 95       	ret

00000602 <LCD_displayCharacter>:
     602:	cf 93       	push	r28
     604:	c8 2f       	mov	r28, r24
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	41 e0       	ldi	r20, 0x01	; 1
     60c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     610:	89 ef       	ldi	r24, 0xF9	; 249
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <LCD_displayCharacter+0x12>
     618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_displayCharacter+0x18>
     61a:	00 00       	nop
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     626:	89 ef       	ldi	r24, 0xF9	; 249
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <LCD_displayCharacter+0x28>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <LCD_displayCharacter+0x2e>
     630:	00 00       	nop
     632:	4c 2f       	mov	r20, r28
     634:	42 95       	swap	r20
     636:	4f 70       	andi	r20, 0x0F	; 15
     638:	41 70       	andi	r20, 0x01	; 1
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	64 e0       	ldi	r22, 0x04	; 4
     63e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     642:	4c 2f       	mov	r20, r28
     644:	42 95       	swap	r20
     646:	46 95       	lsr	r20
     648:	47 70       	andi	r20, 0x07	; 7
     64a:	41 70       	andi	r20, 0x01	; 1
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	65 e0       	ldi	r22, 0x05	; 5
     650:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     654:	4c 2f       	mov	r20, r28
     656:	42 95       	swap	r20
     658:	46 95       	lsr	r20
     65a:	46 95       	lsr	r20
     65c:	43 70       	andi	r20, 0x03	; 3
     65e:	41 70       	andi	r20, 0x01	; 1
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	66 e0       	ldi	r22, 0x06	; 6
     664:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     668:	4c 2f       	mov	r20, r28
     66a:	44 1f       	adc	r20, r20
     66c:	44 27       	eor	r20, r20
     66e:	44 1f       	adc	r20, r20
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	67 e0       	ldi	r22, 0x07	; 7
     674:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     678:	89 ef       	ldi	r24, 0xF9	; 249
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <LCD_displayCharacter+0x7a>
     680:	00 c0       	rjmp	.+0      	; 0x682 <LCD_displayCharacter+0x80>
     682:	00 00       	nop
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     68e:	00 00       	nop
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     69a:	00 00       	nop
     69c:	4c 2f       	mov	r20, r28
     69e:	41 70       	andi	r20, 0x01	; 1
     6a0:	82 e0       	ldi	r24, 0x02	; 2
     6a2:	64 e0       	ldi	r22, 0x04	; 4
     6a4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     6a8:	4c 2f       	mov	r20, r28
     6aa:	46 95       	lsr	r20
     6ac:	41 70       	andi	r20, 0x01	; 1
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	65 e0       	ldi	r22, 0x05	; 5
     6b2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     6b6:	4c 2f       	mov	r20, r28
     6b8:	46 95       	lsr	r20
     6ba:	46 95       	lsr	r20
     6bc:	41 70       	andi	r20, 0x01	; 1
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	66 e0       	ldi	r22, 0x06	; 6
     6c2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     6c6:	c6 95       	lsr	r28
     6c8:	c6 95       	lsr	r28
     6ca:	c6 95       	lsr	r28
     6cc:	4c 2f       	mov	r20, r28
     6ce:	41 70       	andi	r20, 0x01	; 1
     6d0:	82 e0       	ldi	r24, 0x02	; 2
     6d2:	67 e0       	ldi	r22, 0x07	; 7
     6d4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d8:	89 ef       	ldi	r24, 0xF9	; 249
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <LCD_displayCharacter+0xda>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <LCD_displayCharacter+0xe0>
     6e2:	00 00       	nop
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ee:	00 00       	nop
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <LCD_displayString>:
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	8c 01       	movw	r16, r24
     6fc:	fc 01       	movw	r30, r24
     6fe:	80 81       	ld	r24, Z
     700:	88 23       	and	r24, r24
     702:	51 f0       	breq	.+20     	; 0x718 <LCD_displayString+0x24>
     704:	c0 e0       	ldi	r28, 0x00	; 0
     706:	0e 94 01 03 	call	0x602	; 0x602 <LCD_displayCharacter>
     70a:	cf 5f       	subi	r28, 0xFF	; 255
     70c:	f8 01       	movw	r30, r16
     70e:	ec 0f       	add	r30, r28
     710:	f1 1d       	adc	r31, r1
     712:	80 81       	ld	r24, Z
     714:	88 23       	and	r24, r24
     716:	b9 f7       	brne	.-18     	; 0x706 <LCD_displayString+0x12>
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	08 95       	ret

00000720 <LCD_integerToString>:
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	60 97       	sbiw	r28, 0x10	; 16
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	be 01       	movw	r22, r28
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	4a e0       	ldi	r20, 0x0A	; 10
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <itoa>
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
     74a:	60 96       	adiw	r28, 0x10	; 16
     74c:	0f b6       	in	r0, 0x3f	; 63
     74e:	f8 94       	cli
     750:	de bf       	out	0x3e, r29	; 62
     752:	0f be       	out	0x3f, r0	; 63
     754:	cd bf       	out	0x3d, r28	; 61
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <LCD_setCursor>:
     75c:	81 30       	cpi	r24, 0x01	; 1
     75e:	39 f0       	breq	.+14     	; 0x76e <LCD_setCursor+0x12>
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	70 f0       	brcs	.+28     	; 0x780 <LCD_setCursor+0x24>
     764:	82 30       	cpi	r24, 0x02	; 2
     766:	31 f0       	breq	.+12     	; 0x774 <LCD_setCursor+0x18>
     768:	83 30       	cpi	r24, 0x03	; 3
     76a:	59 f4       	brne	.+22     	; 0x782 <LCD_setCursor+0x26>
     76c:	06 c0       	rjmp	.+12     	; 0x77a <LCD_setCursor+0x1e>
     76e:	96 2f       	mov	r25, r22
     770:	90 5c       	subi	r25, 0xC0	; 192
     772:	07 c0       	rjmp	.+14     	; 0x782 <LCD_setCursor+0x26>
     774:	96 2f       	mov	r25, r22
     776:	90 5f       	subi	r25, 0xF0	; 240
     778:	04 c0       	rjmp	.+8      	; 0x782 <LCD_setCursor+0x26>
     77a:	96 2f       	mov	r25, r22
     77c:	90 5c       	subi	r25, 0xC0	; 192
     77e:	01 c0       	rjmp	.+2      	; 0x782 <LCD_setCursor+0x26>
     780:	96 2f       	mov	r25, r22
     782:	89 2f       	mov	r24, r25
     784:	80 68       	ori	r24, 0x80	; 128
     786:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendCommand>
     78a:	08 95       	ret

0000078c <LCD_displayStringRowColumn>:
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	ea 01       	movw	r28, r20
     792:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_setCursor>
     796:	ce 01       	movw	r24, r28
     798:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <LCD_clearScreen>:
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a8:	83 ec       	ldi	r24, 0xC3	; 195
     7aa:	99 e0       	ldi	r25, 0x09	; 9
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <LCD_clearScreen+0xa>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <LCD_clearScreen+0x10>
     7b2:	00 00       	nop
     7b4:	08 95       	ret

000007b6 <LCD_Save_Custom_char>:
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	08 2f       	mov	r16, r24
     7c0:	19 2f       	mov	r17, r25
     7c2:	86 2f       	mov	r24, r22
     7c4:	87 70       	andi	r24, 0x07	; 7
     7c6:	88 0f       	add	r24, r24
     7c8:	88 0f       	add	r24, r24
     7ca:	88 0f       	add	r24, r24
     7cc:	80 64       	ori	r24, 0x40	; 64
     7ce:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendCommand>
     7d2:	c0 2f       	mov	r28, r16
     7d4:	d1 2f       	mov	r29, r17
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	89 91       	ld	r24, Y+
     7da:	0e 94 01 03 	call	0x602	; 0x602 <LCD_displayCharacter>
     7de:	1f 5f       	subi	r17, 0xFF	; 255
     7e0:	18 30       	cpi	r17, 0x08	; 8
     7e2:	d1 f7       	brne	.-12     	; 0x7d8 <LCD_Save_Custom_char+0x22>
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_setCursor>
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	08 95       	ret

000007f6 <LCD_CursorOFF>:
     7f6:	8c e0       	ldi	r24, 0x0C	; 12
     7f8:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendCommand>
     7fc:	08 95       	ret

000007fe <LCD_CursorON>:
     7fe:	8e e0       	ldi	r24, 0x0E	; 14
     800:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendCommand>
     804:	08 95       	ret

00000806 <OUTPUT_Init_PIN>:
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     80c:	08 95       	ret

0000080e <OUTPUT_Hith_PIN>:
     80e:	41 e0       	ldi	r20, 0x01	; 1
     810:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     814:	08 95       	ret

00000816 <OUTPUT_Low_PIN>:
     816:	40 e0       	ldi	r20, 0x00	; 0
     818:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
     81c:	08 95       	ret

0000081e <OUTPUT_Toggle_PIN>:
     81e:	0e 94 27 07 	call	0xe4e	; 0xe4e <DIO_Toggle_Pin>
     822:	08 95       	ret

00000824 <PORT_Init>:
     824:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_setup_Port_Direction>
     828:	08 95       	ret

0000082a <PORT_Set_Value>:
     82a:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_write_Port>
     82e:	08 95       	ret

00000830 <PORT_Get_Value>:
     830:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DIO_read_Port>
     834:	08 95       	ret

00000836 <PORT_Toggle>:
     836:	0e 94 62 07 	call	0xec4	; 0xec4 <DIO_Toggle_Port>
     83a:	08 95       	ret

0000083c <PORT_Init_All>:
     83c:	1f 93       	push	r17
     83e:	cf 93       	push	r28
     840:	df 93       	push	r29
     842:	98 2f       	mov	r25, r24
     844:	16 2f       	mov	r17, r22
     846:	d4 2f       	mov	r29, r20
     848:	c2 2f       	mov	r28, r18
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	69 2f       	mov	r22, r25
     84e:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_setup_Port_Direction>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	61 2f       	mov	r22, r17
     856:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_setup_Port_Direction>
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	6d 2f       	mov	r22, r29
     85e:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_setup_Port_Direction>
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	6c 2f       	mov	r22, r28
     866:	0e 94 50 06 	call	0xca0	; 0xca0 <DIO_setup_Port_Direction>
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	08 95       	ret

00000872 <PORT_Set_Value_All>:
     872:	1f 93       	push	r17
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	98 2f       	mov	r25, r24
     87a:	16 2f       	mov	r17, r22
     87c:	d4 2f       	mov	r29, r20
     87e:	c2 2f       	mov	r28, r18
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	69 2f       	mov	r22, r25
     884:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_write_Port>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	61 2f       	mov	r22, r17
     88c:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_write_Port>
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	6d 2f       	mov	r22, r29
     894:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_write_Port>
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	6c 2f       	mov	r22, r28
     89c:	0e 94 df 06 	call	0xdbe	; 0xdbe <DIO_write_Port>
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	08 95       	ret

000008a8 <Servo_motor_degree>:
#include "servo_motor.h"


void Servo_motor_degree(double degree) {

	TIMER1_SetPWM_OC1B_DutyCycle(19.125 + (degree*0.07083333333333));
     8a8:	21 e1       	ldi	r18, 0x11	; 17
     8aa:	31 e1       	ldi	r19, 0x11	; 17
     8ac:	41 e9       	ldi	r20, 0x91	; 145
     8ae:	5d e3       	ldi	r21, 0x3D	; 61
     8b0:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	49 e9       	ldi	r20, 0x99	; 153
     8ba:	51 e4       	ldi	r21, 0x41	; 65
     8bc:	0e 94 33 13 	call	0x2666	; 0x2666 <__addsf3>
     8c0:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
     8c4:	86 2f       	mov	r24, r22
     8c6:	0e 94 82 0a 	call	0x1504	; 0x1504 <TIMER1_SetPWM_OC1B_DutyCycle>

}
     8ca:	08 95       	ret

000008cc <Ultrasonic_Init>:
#include "ultrasonic.h"


void Ultrasonic_Init() {

	DIO_setup_Pin_Direction(triggerPort,triggerPin,OUTPUT);
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	67 e0       	ldi	r22, 0x07	; 7
     8d0:	41 e0       	ldi	r20, 0x01	; 1
     8d2:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
	TIMER1_Init();
     8d6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <TIMER1_Init>
	ICU_Init();
     8da:	0e 94 33 0a 	call	0x1466	; 0x1466 <ICU_Init>
}
     8de:	08 95       	ret

000008e0 <Ultrasonic_ReadDistance>:

uint16 Ultrasonic_ReadDistance(void) {
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
	uint16 a, b,high, distance;

	// Debug output to check if variables are correct
	DIO_write_Pin(triggerPort, triggerPin, OUTPUT);
     8e8:	83 e0       	ldi	r24, 0x03	; 3
     8ea:	67 e0       	ldi	r22, 0x07	; 7
     8ec:	41 e0       	ldi	r20, 0x01	; 1
     8ee:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f2:	86 e0       	ldi	r24, 0x06	; 6
     8f4:	8a 95       	dec	r24
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <Ultrasonic_ReadDistance+0x14>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <Ultrasonic_ReadDistance+0x1a>
	_delay_us(20);
	DIO_write_Pin(triggerPort, triggerPin, INPUT);
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	67 e0       	ldi	r22, 0x07	; 7
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>


	ICU_RisingTriggerEdge();
     904:	0e 94 3f 0a 	call	0x147e	; 0x147e <ICU_RisingTriggerEdge>



	// Wait for input  rising edge
	while (!ICU_GetFlag());
     908:	0e 94 8c 0b 	call	0x1718	; 0x1718 <ICU_GetFlag>
     90c:	88 23       	and	r24, r24
     90e:	e1 f3       	breq	.-8      	; 0x908 <Ultrasonic_ReadDistance+0x28>
	a = ICU_GetICUvalue();
     910:	0e 94 86 0b 	call	0x170c	; 0x170c <ICU_GetICUvalue>
     914:	ec 01       	movw	r28, r24
	ICU_ClearFlag();
     916:	0e 94 89 0b 	call	0x1712	; 0x1712 <ICU_ClearFlag>


	ICU_FallingTriggerEdge();
     91a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <ICU_FallingTriggerEdge>
	//  input  falling edge
	while (!ICU_GetFlag());
     91e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <ICU_GetFlag>
     922:	88 23       	and	r24, r24
     924:	e1 f3       	breq	.-8      	; 0x91e <Ultrasonic_ReadDistance+0x3e>
	b = ICU_GetICUvalue();
     926:	0e 94 86 0b 	call	0x170c	; 0x170c <ICU_GetICUvalue>
     92a:	8c 01       	movw	r16, r24
	ICU_ClearFlag();
     92c:	0e 94 89 0b 	call	0x1712	; 0x1712 <ICU_ClearFlag>

	if(b > a)
     930:	c0 17       	cp	r28, r16
     932:	d1 07       	cpc	r29, r17
     934:	18 f4       	brcc	.+6      	; 0x93c <Ultrasonic_ReadDistance+0x5c>
	{
		high = b - a;
     936:	0c 1b       	sub	r16, r28
     938:	1d 0b       	sbc	r17, r29
     93a:	06 c0       	rjmp	.+12     	; 0x948 <Ultrasonic_ReadDistance+0x68>
	}
	else
	{
		high = b + OCR1A - a;
     93c:	6a b5       	in	r22, 0x2a	; 42
     93e:	7b b5       	in	r23, 0x2b	; 43
     940:	6c 1b       	sub	r22, r28
     942:	7d 0b       	sbc	r23, r29
     944:	06 0f       	add	r16, r22
     946:	17 1f       	adc	r17, r23
	}


	// Calculate the distance in cm
	distance = (((uint32)high * 34600) *presc_T1/ (F_CPU * 2));
     948:	b8 01       	movw	r22, r16
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	20 e4       	ldi	r18, 0x40	; 64
     950:	39 e3       	ldi	r19, 0x39	; 57
     952:	44 e0       	ldi	r20, 0x04	; 4
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__mulsi3>
     95a:	20 e8       	ldi	r18, 0x80	; 128
     95c:	34 e8       	ldi	r19, 0x84	; 132
     95e:	4e e1       	ldi	r20, 0x1E	; 30
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__udivmodsi4>

	return distance;
}
     966:	82 2f       	mov	r24, r18
     968:	93 2f       	mov	r25, r19
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	08 95       	ret

00000974 <ADC_Init>:
     974:	3f 98       	cbi	0x07, 7	; 7
     976:	3e 9a       	sbi	0x07, 6	; 7
     978:	3d 98       	cbi	0x07, 5	; 7
     97a:	86 b1       	in	r24, 0x06	; 6
     97c:	88 7f       	andi	r24, 0xF8	; 248
     97e:	86 b9       	out	0x06, r24	; 6
     980:	86 b1       	in	r24, 0x06	; 6
     982:	86 60       	ori	r24, 0x06	; 6
     984:	86 b9       	out	0x06, r24	; 6
     986:	35 98       	cbi	0x06, 5	; 6
     988:	80 b7       	in	r24, 0x30	; 48
     98a:	8f 71       	andi	r24, 0x1F	; 31
     98c:	80 bf       	out	0x30, r24	; 48
     98e:	80 b7       	in	r24, 0x30	; 48
     990:	80 64       	ori	r24, 0x40	; 64
     992:	80 bf       	out	0x30, r24	; 48
     994:	35 9a       	sbi	0x06, 5	; 6
     996:	37 9a       	sbi	0x06, 7	; 6
     998:	34 9a       	sbi	0x06, 4	; 6
     99a:	33 9a       	sbi	0x06, 3	; 6
     99c:	8f b7       	in	r24, 0x3f	; 63
     99e:	80 68       	ori	r24, 0x80	; 128
     9a0:	8f bf       	out	0x3f, r24	; 63
     9a2:	08 95       	ret

000009a4 <ADC_Get_10BIT_Result>:
     9a4:	97 b1       	in	r25, 0x07	; 7
     9a6:	90 7e       	andi	r25, 0xE0	; 224
     9a8:	97 b9       	out	0x07, r25	; 7
     9aa:	97 b1       	in	r25, 0x07	; 7
     9ac:	89 2b       	or	r24, r25
     9ae:	87 b9       	out	0x07, r24	; 7
     9b0:	36 9a       	sbi	0x06, 6	; 6
     9b2:	86 b1       	in	r24, 0x06	; 6
     9b4:	82 95       	swap	r24
     9b6:	86 95       	lsr	r24
     9b8:	86 95       	lsr	r24
     9ba:	83 70       	andi	r24, 0x03	; 3
     9bc:	80 ff       	sbrs	r24, 0
     9be:	0c c0       	rjmp	.+24     	; 0x9d8 <ADC_Get_10BIT_Result+0x34>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	8f 5f       	subi	r24, 0xFF	; 255
     9c4:	96 b1       	in	r25, 0x06	; 6
     9c6:	96 ff       	sbrs	r25, 6
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <ADC_Get_10BIT_Result+0x30>
     9ca:	84 36       	cpi	r24, 0x64	; 100
     9cc:	d1 f7       	brne	.-12     	; 0x9c2 <ADC_Get_10BIT_Result+0x1e>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	08 95       	ret
     9d4:	84 36       	cpi	r24, 0x64	; 100
     9d6:	18 f4       	brcc	.+6      	; 0x9de <ADC_Get_10BIT_Result+0x3a>
     9d8:	84 b1       	in	r24, 0x04	; 4
     9da:	95 b1       	in	r25, 0x05	; 5
     9dc:	08 95       	ret
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	08 95       	ret

000009e4 <ADC_Get_8BIT_Result>:
     9e4:	97 b1       	in	r25, 0x07	; 7
     9e6:	90 7e       	andi	r25, 0xE0	; 224
     9e8:	97 b9       	out	0x07, r25	; 7
     9ea:	97 b1       	in	r25, 0x07	; 7
     9ec:	89 2b       	or	r24, r25
     9ee:	87 b9       	out	0x07, r24	; 7
     9f0:	36 9a       	sbi	0x06, 6	; 6
     9f2:	86 b1       	in	r24, 0x06	; 6
     9f4:	82 95       	swap	r24
     9f6:	86 95       	lsr	r24
     9f8:	86 95       	lsr	r24
     9fa:	83 70       	andi	r24, 0x03	; 3
     9fc:	80 ff       	sbrs	r24, 0
     9fe:	0b c0       	rjmp	.+22     	; 0xa16 <ADC_Get_8BIT_Result+0x32>
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	8f 5f       	subi	r24, 0xFF	; 255
     a04:	96 b1       	in	r25, 0x06	; 6
     a06:	96 ff       	sbrs	r25, 6
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <ADC_Get_8BIT_Result+0x2e>
     a0a:	84 36       	cpi	r24, 0x64	; 100
     a0c:	d1 f7       	brne	.-12     	; 0xa02 <ADC_Get_8BIT_Result+0x1e>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	08 95       	ret
     a12:	84 36       	cpi	r24, 0x64	; 100
     a14:	38 f4       	brcc	.+14     	; 0xa24 <ADC_Get_8BIT_Result+0x40>
     a16:	84 b1       	in	r24, 0x04	; 4
     a18:	95 b1       	in	r25, 0x05	; 5
     a1a:	96 95       	lsr	r25
     a1c:	87 95       	ror	r24
     a1e:	96 95       	lsr	r25
     a20:	87 95       	ror	r24
     a22:	08 95       	ret
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	08 95       	ret

00000a28 <ADC_Only_Start_Conversion>:
     a28:	97 b1       	in	r25, 0x07	; 7
     a2a:	90 7e       	andi	r25, 0xE0	; 224
     a2c:	97 b9       	out	0x07, r25	; 7
     a2e:	97 b1       	in	r25, 0x07	; 7
     a30:	89 2b       	or	r24, r25
     a32:	87 b9       	out	0x07, r24	; 7
     a34:	36 9a       	sbi	0x06, 6	; 6
     a36:	08 95       	ret

00000a38 <ADC_Only_Get_10BIT_Result>:
     a38:	86 b1       	in	r24, 0x06	; 6
     a3a:	82 95       	swap	r24
     a3c:	86 95       	lsr	r24
     a3e:	86 95       	lsr	r24
     a40:	83 70       	andi	r24, 0x03	; 3
     a42:	80 ff       	sbrs	r24, 0
     a44:	0c c0       	rjmp	.+24     	; 0xa5e <ADC_Only_Get_10BIT_Result+0x26>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	8f 5f       	subi	r24, 0xFF	; 255
     a4a:	96 b1       	in	r25, 0x06	; 6
     a4c:	96 ff       	sbrs	r25, 6
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <ADC_Only_Get_10BIT_Result+0x22>
     a50:	84 36       	cpi	r24, 0x64	; 100
     a52:	d1 f7       	brne	.-12     	; 0xa48 <ADC_Only_Get_10BIT_Result+0x10>
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	08 95       	ret
     a5a:	84 36       	cpi	r24, 0x64	; 100
     a5c:	18 f4       	brcc	.+6      	; 0xa64 <ADC_Only_Get_10BIT_Result+0x2c>
     a5e:	84 b1       	in	r24, 0x04	; 4
     a60:	95 b1       	in	r25, 0x05	; 5
     a62:	08 95       	ret
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	08 95       	ret

00000a6a <ADC_Enable>:
     a6a:	37 9a       	sbi	0x06, 7	; 6
     a6c:	08 95       	ret

00000a6e <ADC_Disable>:
     a6e:	37 98       	cbi	0x06, 7	; 6
     a70:	08 95       	ret

00000a72 <ADC_InterruptEnable>:
     a72:	33 9a       	sbi	0x06, 3	; 6
     a74:	08 95       	ret

00000a76 <ADC_InterruptDisable>:
     a76:	33 98       	cbi	0x06, 3	; 6
     a78:	08 95       	ret

00000a7a <ADC_SetCallback>:
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	59 f0       	breq	.+22     	; 0xa94 <ADC_SetCallback+0x1a>
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	41 f0       	breq	.+16     	; 0xa94 <ADC_SetCallback+0x1a>
     a84:	90 93 21 01 	sts	0x0121, r25
     a88:	80 93 20 01 	sts	0x0120, r24
     a8c:	70 93 1f 01 	sts	0x011F, r23
     a90:	60 93 1e 01 	sts	0x011E, r22
     a94:	08 95       	ret

00000a96 <__vector_16>:
     a96:	1f 92       	push	r1
     a98:	0f 92       	push	r0
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	0f 92       	push	r0
     a9e:	11 24       	eor	r1, r1
     aa0:	2f 93       	push	r18
     aa2:	3f 93       	push	r19
     aa4:	4f 93       	push	r20
     aa6:	5f 93       	push	r21
     aa8:	6f 93       	push	r22
     aaa:	7f 93       	push	r23
     aac:	8f 93       	push	r24
     aae:	9f 93       	push	r25
     ab0:	af 93       	push	r26
     ab2:	bf 93       	push	r27
     ab4:	ef 93       	push	r30
     ab6:	ff 93       	push	r31
     ab8:	e0 91 1e 01 	lds	r30, 0x011E
     abc:	f0 91 1f 01 	lds	r31, 0x011F
     ac0:	30 97       	sbiw	r30, 0x00	; 0
     ac2:	21 f0       	breq	.+8      	; 0xacc <__vector_16+0x36>
     ac4:	84 b1       	in	r24, 0x04	; 4
     ac6:	95 b1       	in	r25, 0x05	; 5
     ac8:	91 83       	std	Z+1, r25	; 0x01
     aca:	80 83       	st	Z, r24
     acc:	e0 91 20 01 	lds	r30, 0x0120
     ad0:	f0 91 21 01 	lds	r31, 0x0121
     ad4:	30 97       	sbiw	r30, 0x00	; 0
     ad6:	09 f0       	breq	.+2      	; 0xada <__vector_16+0x44>
     ad8:	09 95       	icall
     ada:	ff 91       	pop	r31
     adc:	ef 91       	pop	r30
     ade:	bf 91       	pop	r27
     ae0:	af 91       	pop	r26
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	7f 91       	pop	r23
     ae8:	6f 91       	pop	r22
     aea:	5f 91       	pop	r21
     aec:	4f 91       	pop	r20
     aee:	3f 91       	pop	r19
     af0:	2f 91       	pop	r18
     af2:	0f 90       	pop	r0
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	0f 90       	pop	r0
     af8:	1f 90       	pop	r1
     afa:	18 95       	reti

00000afc <DIO_setup_Pin_Direction>:
     afc:	41 30       	cpi	r20, 0x01	; 1
     afe:	09 f0       	breq	.+2      	; 0xb02 <DIO_setup_Pin_Direction+0x6>
     b00:	3b c0       	rjmp	.+118    	; 0xb78 <DIO_setup_Pin_Direction+0x7c>
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	91 f0       	breq	.+36     	; 0xb2a <DIO_setup_Pin_Direction+0x2e>
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	18 f0       	brcs	.+6      	; 0xb10 <DIO_setup_Pin_Direction+0x14>
     b0a:	82 30       	cpi	r24, 0x02	; 2
     b0c:	41 f5       	brne	.+80     	; 0xb5e <DIO_setup_Pin_Direction+0x62>
     b0e:	1a c0       	rjmp	.+52     	; 0xb44 <DIO_setup_Pin_Direction+0x48>
     b10:	2a b3       	in	r18, 0x1a	; 26
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	ac 01       	movw	r20, r24
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <DIO_setup_Pin_Direction+0x22>
     b1a:	44 0f       	add	r20, r20
     b1c:	55 1f       	adc	r21, r21
     b1e:	6a 95       	dec	r22
     b20:	e2 f7       	brpl	.-8      	; 0xb1a <DIO_setup_Pin_Direction+0x1e>
     b22:	ba 01       	movw	r22, r20
     b24:	62 2b       	or	r22, r18
     b26:	6a bb       	out	0x1a, r22	; 26
     b28:	08 95       	ret
     b2a:	27 b3       	in	r18, 0x17	; 23
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	ac 01       	movw	r20, r24
     b32:	02 c0       	rjmp	.+4      	; 0xb38 <DIO_setup_Pin_Direction+0x3c>
     b34:	44 0f       	add	r20, r20
     b36:	55 1f       	adc	r21, r21
     b38:	6a 95       	dec	r22
     b3a:	e2 f7       	brpl	.-8      	; 0xb34 <DIO_setup_Pin_Direction+0x38>
     b3c:	ba 01       	movw	r22, r20
     b3e:	62 2b       	or	r22, r18
     b40:	67 bb       	out	0x17, r22	; 23
     b42:	08 95       	ret
     b44:	24 b3       	in	r18, 0x14	; 20
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	ac 01       	movw	r20, r24
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <DIO_setup_Pin_Direction+0x56>
     b4e:	44 0f       	add	r20, r20
     b50:	55 1f       	adc	r21, r21
     b52:	6a 95       	dec	r22
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <DIO_setup_Pin_Direction+0x52>
     b56:	ba 01       	movw	r22, r20
     b58:	62 2b       	or	r22, r18
     b5a:	64 bb       	out	0x14, r22	; 20
     b5c:	08 95       	ret
     b5e:	21 b3       	in	r18, 0x11	; 17
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	ac 01       	movw	r20, r24
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <DIO_setup_Pin_Direction+0x70>
     b68:	44 0f       	add	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	6a 95       	dec	r22
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <DIO_setup_Pin_Direction+0x6c>
     b70:	ba 01       	movw	r22, r20
     b72:	62 2b       	or	r22, r18
     b74:	61 bb       	out	0x11, r22	; 17
     b76:	08 95       	ret
     b78:	42 30       	cpi	r20, 0x02	; 2
     b7a:	09 f0       	breq	.+2      	; 0xb7e <DIO_setup_Pin_Direction+0x82>
     b7c:	4f c0       	rjmp	.+158    	; 0xc1c <DIO_setup_Pin_Direction+0x120>
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	b9 f0       	breq	.+46     	; 0xbb0 <DIO_setup_Pin_Direction+0xb4>
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	18 f0       	brcs	.+6      	; 0xb8c <DIO_setup_Pin_Direction+0x90>
     b86:	82 30       	cpi	r24, 0x02	; 2
     b88:	b9 f5       	brne	.+110    	; 0xbf8 <DIO_setup_Pin_Direction+0xfc>
     b8a:	24 c0       	rjmp	.+72     	; 0xbd4 <DIO_setup_Pin_Direction+0xd8>
     b8c:	2a b3       	in	r18, 0x1a	; 26
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	ac 01       	movw	r20, r24
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <DIO_setup_Pin_Direction+0x9e>
     b96:	44 0f       	add	r20, r20
     b98:	55 1f       	adc	r21, r21
     b9a:	6a 95       	dec	r22
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <DIO_setup_Pin_Direction+0x9a>
     b9e:	ba 01       	movw	r22, r20
     ba0:	84 2f       	mov	r24, r20
     ba2:	80 95       	com	r24
     ba4:	82 23       	and	r24, r18
     ba6:	8a bb       	out	0x1a, r24	; 26
     ba8:	8b b3       	in	r24, 0x1b	; 27
     baa:	68 2b       	or	r22, r24
     bac:	6b bb       	out	0x1b, r22	; 27
     bae:	08 95       	ret
     bb0:	27 b3       	in	r18, 0x17	; 23
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	ac 01       	movw	r20, r24
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <DIO_setup_Pin_Direction+0xc2>
     bba:	44 0f       	add	r20, r20
     bbc:	55 1f       	adc	r21, r21
     bbe:	6a 95       	dec	r22
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <DIO_setup_Pin_Direction+0xbe>
     bc2:	ba 01       	movw	r22, r20
     bc4:	84 2f       	mov	r24, r20
     bc6:	80 95       	com	r24
     bc8:	82 23       	and	r24, r18
     bca:	87 bb       	out	0x17, r24	; 23
     bcc:	88 b3       	in	r24, 0x18	; 24
     bce:	68 2b       	or	r22, r24
     bd0:	68 bb       	out	0x18, r22	; 24
     bd2:	08 95       	ret
     bd4:	24 b3       	in	r18, 0x14	; 20
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	ac 01       	movw	r20, r24
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <DIO_setup_Pin_Direction+0xe6>
     bde:	44 0f       	add	r20, r20
     be0:	55 1f       	adc	r21, r21
     be2:	6a 95       	dec	r22
     be4:	e2 f7       	brpl	.-8      	; 0xbde <DIO_setup_Pin_Direction+0xe2>
     be6:	ba 01       	movw	r22, r20
     be8:	84 2f       	mov	r24, r20
     bea:	80 95       	com	r24
     bec:	82 23       	and	r24, r18
     bee:	84 bb       	out	0x14, r24	; 20
     bf0:	85 b3       	in	r24, 0x15	; 21
     bf2:	68 2b       	or	r22, r24
     bf4:	65 bb       	out	0x15, r22	; 21
     bf6:	08 95       	ret
     bf8:	21 b3       	in	r18, 0x11	; 17
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	ac 01       	movw	r20, r24
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <DIO_setup_Pin_Direction+0x10a>
     c02:	44 0f       	add	r20, r20
     c04:	55 1f       	adc	r21, r21
     c06:	6a 95       	dec	r22
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <DIO_setup_Pin_Direction+0x106>
     c0a:	ba 01       	movw	r22, r20
     c0c:	84 2f       	mov	r24, r20
     c0e:	80 95       	com	r24
     c10:	82 23       	and	r24, r18
     c12:	81 bb       	out	0x11, r24	; 17
     c14:	82 b3       	in	r24, 0x12	; 18
     c16:	68 2b       	or	r22, r24
     c18:	62 bb       	out	0x12, r22	; 18
     c1a:	08 95       	ret
     c1c:	44 23       	and	r20, r20
     c1e:	09 f0       	breq	.+2      	; 0xc22 <DIO_setup_Pin_Direction+0x126>
     c20:	3e c0       	rjmp	.+124    	; 0xc9e <DIO_setup_Pin_Direction+0x1a2>
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	99 f0       	breq	.+38     	; 0xc4c <DIO_setup_Pin_Direction+0x150>
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	18 f0       	brcs	.+6      	; 0xc30 <DIO_setup_Pin_Direction+0x134>
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	59 f5       	brne	.+86     	; 0xc84 <DIO_setup_Pin_Direction+0x188>
     c2e:	1c c0       	rjmp	.+56     	; 0xc68 <DIO_setup_Pin_Direction+0x16c>
     c30:	2a b3       	in	r18, 0x1a	; 26
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	ac 01       	movw	r20, r24
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <DIO_setup_Pin_Direction+0x142>
     c3a:	44 0f       	add	r20, r20
     c3c:	55 1f       	adc	r21, r21
     c3e:	6a 95       	dec	r22
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <DIO_setup_Pin_Direction+0x13e>
     c42:	ba 01       	movw	r22, r20
     c44:	60 95       	com	r22
     c46:	62 23       	and	r22, r18
     c48:	6a bb       	out	0x1a, r22	; 26
     c4a:	08 95       	ret
     c4c:	27 b3       	in	r18, 0x17	; 23
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	ac 01       	movw	r20, r24
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <DIO_setup_Pin_Direction+0x15e>
     c56:	44 0f       	add	r20, r20
     c58:	55 1f       	adc	r21, r21
     c5a:	6a 95       	dec	r22
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <DIO_setup_Pin_Direction+0x15a>
     c5e:	ba 01       	movw	r22, r20
     c60:	60 95       	com	r22
     c62:	62 23       	and	r22, r18
     c64:	67 bb       	out	0x17, r22	; 23
     c66:	08 95       	ret
     c68:	24 b3       	in	r18, 0x14	; 20
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	ac 01       	movw	r20, r24
     c70:	02 c0       	rjmp	.+4      	; 0xc76 <DIO_setup_Pin_Direction+0x17a>
     c72:	44 0f       	add	r20, r20
     c74:	55 1f       	adc	r21, r21
     c76:	6a 95       	dec	r22
     c78:	e2 f7       	brpl	.-8      	; 0xc72 <DIO_setup_Pin_Direction+0x176>
     c7a:	ba 01       	movw	r22, r20
     c7c:	60 95       	com	r22
     c7e:	62 23       	and	r22, r18
     c80:	64 bb       	out	0x14, r22	; 20
     c82:	08 95       	ret
     c84:	21 b3       	in	r18, 0x11	; 17
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	ac 01       	movw	r20, r24
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <DIO_setup_Pin_Direction+0x196>
     c8e:	44 0f       	add	r20, r20
     c90:	55 1f       	adc	r21, r21
     c92:	6a 95       	dec	r22
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <DIO_setup_Pin_Direction+0x192>
     c96:	ba 01       	movw	r22, r20
     c98:	60 95       	com	r22
     c9a:	62 23       	and	r22, r18
     c9c:	61 bb       	out	0x11, r22	; 17
     c9e:	08 95       	ret

00000ca0 <DIO_setup_Port_Direction>:
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	39 f0       	breq	.+14     	; 0xcb2 <DIO_setup_Port_Direction+0x12>
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	18 f0       	brcs	.+6      	; 0xcae <DIO_setup_Port_Direction+0xe>
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	39 f4       	brne	.+14     	; 0xcba <DIO_setup_Port_Direction+0x1a>
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <DIO_setup_Port_Direction+0x16>
     cae:	6a bb       	out	0x1a, r22	; 26
     cb0:	08 95       	ret
     cb2:	67 bb       	out	0x17, r22	; 23
     cb4:	08 95       	ret
     cb6:	64 bb       	out	0x14, r22	; 20
     cb8:	08 95       	ret
     cba:	61 bb       	out	0x11, r22	; 17
     cbc:	08 95       	ret

00000cbe <DIO_write_Pin>:
     cbe:	41 30       	cpi	r20, 0x01	; 1
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <DIO_write_Pin+0x6>
     cc2:	3b c0       	rjmp	.+118    	; 0xd3a <DIO_write_Pin+0x7c>
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	91 f0       	breq	.+36     	; 0xcec <DIO_write_Pin+0x2e>
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	18 f0       	brcs	.+6      	; 0xcd2 <DIO_write_Pin+0x14>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	41 f5       	brne	.+80     	; 0xd20 <DIO_write_Pin+0x62>
     cd0:	1a c0       	rjmp	.+52     	; 0xd06 <DIO_write_Pin+0x48>
     cd2:	2b b3       	in	r18, 0x1b	; 27
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	ac 01       	movw	r20, r24
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_write_Pin+0x22>
     cdc:	44 0f       	add	r20, r20
     cde:	55 1f       	adc	r21, r21
     ce0:	6a 95       	dec	r22
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_write_Pin+0x1e>
     ce4:	ba 01       	movw	r22, r20
     ce6:	62 2b       	or	r22, r18
     ce8:	6b bb       	out	0x1b, r22	; 27
     cea:	08 95       	ret
     cec:	28 b3       	in	r18, 0x18	; 24
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	ac 01       	movw	r20, r24
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <DIO_write_Pin+0x3c>
     cf6:	44 0f       	add	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	6a 95       	dec	r22
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <DIO_write_Pin+0x38>
     cfe:	ba 01       	movw	r22, r20
     d00:	62 2b       	or	r22, r18
     d02:	68 bb       	out	0x18, r22	; 24
     d04:	08 95       	ret
     d06:	25 b3       	in	r18, 0x15	; 21
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	ac 01       	movw	r20, r24
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_write_Pin+0x56>
     d10:	44 0f       	add	r20, r20
     d12:	55 1f       	adc	r21, r21
     d14:	6a 95       	dec	r22
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_write_Pin+0x52>
     d18:	ba 01       	movw	r22, r20
     d1a:	62 2b       	or	r22, r18
     d1c:	65 bb       	out	0x15, r22	; 21
     d1e:	08 95       	ret
     d20:	22 b3       	in	r18, 0x12	; 18
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	ac 01       	movw	r20, r24
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_write_Pin+0x70>
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	6a 95       	dec	r22
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <DIO_write_Pin+0x6c>
     d32:	ba 01       	movw	r22, r20
     d34:	62 2b       	or	r22, r18
     d36:	62 bb       	out	0x12, r22	; 18
     d38:	08 95       	ret
     d3a:	44 23       	and	r20, r20
     d3c:	09 f0       	breq	.+2      	; 0xd40 <DIO_write_Pin+0x82>
     d3e:	3e c0       	rjmp	.+124    	; 0xdbc <DIO_write_Pin+0xfe>
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	99 f0       	breq	.+38     	; 0xd6a <DIO_write_Pin+0xac>
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	18 f0       	brcs	.+6      	; 0xd4e <DIO_write_Pin+0x90>
     d48:	82 30       	cpi	r24, 0x02	; 2
     d4a:	59 f5       	brne	.+86     	; 0xda2 <DIO_write_Pin+0xe4>
     d4c:	1c c0       	rjmp	.+56     	; 0xd86 <DIO_write_Pin+0xc8>
     d4e:	2b b3       	in	r18, 0x1b	; 27
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	ac 01       	movw	r20, r24
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_write_Pin+0x9e>
     d58:	44 0f       	add	r20, r20
     d5a:	55 1f       	adc	r21, r21
     d5c:	6a 95       	dec	r22
     d5e:	e2 f7       	brpl	.-8      	; 0xd58 <DIO_write_Pin+0x9a>
     d60:	ba 01       	movw	r22, r20
     d62:	60 95       	com	r22
     d64:	62 23       	and	r22, r18
     d66:	6b bb       	out	0x1b, r22	; 27
     d68:	08 95       	ret
     d6a:	28 b3       	in	r18, 0x18	; 24
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	ac 01       	movw	r20, r24
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_write_Pin+0xba>
     d74:	44 0f       	add	r20, r20
     d76:	55 1f       	adc	r21, r21
     d78:	6a 95       	dec	r22
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_write_Pin+0xb6>
     d7c:	ba 01       	movw	r22, r20
     d7e:	60 95       	com	r22
     d80:	62 23       	and	r22, r18
     d82:	68 bb       	out	0x18, r22	; 24
     d84:	08 95       	ret
     d86:	25 b3       	in	r18, 0x15	; 21
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	ac 01       	movw	r20, r24
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_write_Pin+0xd6>
     d90:	44 0f       	add	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	6a 95       	dec	r22
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_write_Pin+0xd2>
     d98:	ba 01       	movw	r22, r20
     d9a:	60 95       	com	r22
     d9c:	62 23       	and	r22, r18
     d9e:	65 bb       	out	0x15, r22	; 21
     da0:	08 95       	ret
     da2:	22 b3       	in	r18, 0x12	; 18
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	ac 01       	movw	r20, r24
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_write_Pin+0xf2>
     dac:	44 0f       	add	r20, r20
     dae:	55 1f       	adc	r21, r21
     db0:	6a 95       	dec	r22
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_write_Pin+0xee>
     db4:	ba 01       	movw	r22, r20
     db6:	60 95       	com	r22
     db8:	62 23       	and	r22, r18
     dba:	62 bb       	out	0x12, r22	; 18
     dbc:	08 95       	ret

00000dbe <DIO_write_Port>:
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	39 f0       	breq	.+14     	; 0xdd0 <DIO_write_Port+0x12>
     dc2:	81 30       	cpi	r24, 0x01	; 1
     dc4:	18 f0       	brcs	.+6      	; 0xdcc <DIO_write_Port+0xe>
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	39 f4       	brne	.+14     	; 0xdd8 <DIO_write_Port+0x1a>
     dca:	04 c0       	rjmp	.+8      	; 0xdd4 <DIO_write_Port+0x16>
     dcc:	6b bb       	out	0x1b, r22	; 27
     dce:	08 95       	ret
     dd0:	68 bb       	out	0x18, r22	; 24
     dd2:	08 95       	ret
     dd4:	65 bb       	out	0x15, r22	; 21
     dd6:	08 95       	ret
     dd8:	62 bb       	out	0x12, r22	; 18
     dda:	08 95       	ret

00000ddc <DIO_read_Pin>:
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	79 f0       	breq	.+30     	; 0xdfe <DIO_read_Pin+0x22>
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	18 f0       	brcs	.+6      	; 0xdea <DIO_read_Pin+0xe>
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	f9 f4       	brne	.+62     	; 0xe26 <DIO_read_Pin+0x4a>
     de8:	14 c0       	rjmp	.+40     	; 0xe12 <DIO_read_Pin+0x36>
     dea:	29 b3       	in	r18, 0x19	; 25
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	c9 01       	movw	r24, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_read_Pin+0x1a>
     df2:	95 95       	asr	r25
     df4:	87 95       	ror	r24
     df6:	6a 95       	dec	r22
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_read_Pin+0x16>
     dfa:	81 70       	andi	r24, 0x01	; 1
     dfc:	08 95       	ret
     dfe:	26 b3       	in	r18, 0x16	; 22
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	c9 01       	movw	r24, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_read_Pin+0x2e>
     e06:	95 95       	asr	r25
     e08:	87 95       	ror	r24
     e0a:	6a 95       	dec	r22
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_read_Pin+0x2a>
     e0e:	81 70       	andi	r24, 0x01	; 1
     e10:	08 95       	ret
     e12:	23 b3       	in	r18, 0x13	; 19
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	c9 01       	movw	r24, r18
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <DIO_read_Pin+0x42>
     e1a:	95 95       	asr	r25
     e1c:	87 95       	ror	r24
     e1e:	6a 95       	dec	r22
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <DIO_read_Pin+0x3e>
     e22:	81 70       	andi	r24, 0x01	; 1
     e24:	08 95       	ret
     e26:	20 b3       	in	r18, 0x10	; 16
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	c9 01       	movw	r24, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_read_Pin+0x56>
     e2e:	95 95       	asr	r25
     e30:	87 95       	ror	r24
     e32:	6a 95       	dec	r22
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_read_Pin+0x52>
     e36:	81 70       	andi	r24, 0x01	; 1
     e38:	08 95       	ret

00000e3a <DIO_read_Port>:
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	31 f0       	breq	.+12     	; 0xe4a <DIO_read_Port+0x10>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	10 f0       	brcs	.+4      	; 0xe46 <DIO_read_Port+0xc>
     e42:	83 b3       	in	r24, 0x13	; 19
     e44:	08 95       	ret
     e46:	89 b3       	in	r24, 0x19	; 25
     e48:	08 95       	ret
     e4a:	86 b3       	in	r24, 0x16	; 22
     e4c:	08 95       	ret

00000e4e <DIO_Toggle_Pin>:
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	91 f0       	breq	.+36     	; 0xe76 <DIO_Toggle_Pin+0x28>
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	18 f0       	brcs	.+6      	; 0xe5c <DIO_Toggle_Pin+0xe>
     e56:	82 30       	cpi	r24, 0x02	; 2
     e58:	41 f5       	brne	.+80     	; 0xeaa <DIO_Toggle_Pin+0x5c>
     e5a:	1a c0       	rjmp	.+52     	; 0xe90 <DIO_Toggle_Pin+0x42>
     e5c:	2b b3       	in	r18, 0x1b	; 27
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	ac 01       	movw	r20, r24
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_Toggle_Pin+0x1c>
     e66:	44 0f       	add	r20, r20
     e68:	55 1f       	adc	r21, r21
     e6a:	6a 95       	dec	r22
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_Toggle_Pin+0x18>
     e6e:	ba 01       	movw	r22, r20
     e70:	62 27       	eor	r22, r18
     e72:	6b bb       	out	0x1b, r22	; 27
     e74:	08 95       	ret
     e76:	28 b3       	in	r18, 0x18	; 24
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	ac 01       	movw	r20, r24
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_Toggle_Pin+0x36>
     e80:	44 0f       	add	r20, r20
     e82:	55 1f       	adc	r21, r21
     e84:	6a 95       	dec	r22
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_Toggle_Pin+0x32>
     e88:	ba 01       	movw	r22, r20
     e8a:	62 27       	eor	r22, r18
     e8c:	68 bb       	out	0x18, r22	; 24
     e8e:	08 95       	ret
     e90:	25 b3       	in	r18, 0x15	; 21
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	ac 01       	movw	r20, r24
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_Toggle_Pin+0x50>
     e9a:	44 0f       	add	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	6a 95       	dec	r22
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_Toggle_Pin+0x4c>
     ea2:	ba 01       	movw	r22, r20
     ea4:	62 27       	eor	r22, r18
     ea6:	65 bb       	out	0x15, r22	; 21
     ea8:	08 95       	ret
     eaa:	22 b3       	in	r18, 0x12	; 18
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	ac 01       	movw	r20, r24
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_Toggle_Pin+0x6a>
     eb4:	44 0f       	add	r20, r20
     eb6:	55 1f       	adc	r21, r21
     eb8:	6a 95       	dec	r22
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_Toggle_Pin+0x66>
     ebc:	ba 01       	movw	r22, r20
     ebe:	62 27       	eor	r22, r18
     ec0:	62 bb       	out	0x12, r22	; 18
     ec2:	08 95       	ret

00000ec4 <DIO_Toggle_Port>:
     ec4:	81 30       	cpi	r24, 0x01	; 1
     ec6:	49 f0       	breq	.+18     	; 0xeda <DIO_Toggle_Port+0x16>
     ec8:	81 30       	cpi	r24, 0x01	; 1
     eca:	18 f0       	brcs	.+6      	; 0xed2 <DIO_Toggle_Port+0xe>
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	69 f4       	brne	.+26     	; 0xeea <DIO_Toggle_Port+0x26>
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <DIO_Toggle_Port+0x1e>
     ed2:	8b b3       	in	r24, 0x1b	; 27
     ed4:	80 95       	com	r24
     ed6:	8b bb       	out	0x1b, r24	; 27
     ed8:	08 95       	ret
     eda:	88 b3       	in	r24, 0x18	; 24
     edc:	80 95       	com	r24
     ede:	88 bb       	out	0x18, r24	; 24
     ee0:	08 95       	ret
     ee2:	85 b3       	in	r24, 0x15	; 21
     ee4:	80 95       	com	r24
     ee6:	85 bb       	out	0x15, r24	; 21
     ee8:	08 95       	ret
     eea:	82 b3       	in	r24, 0x12	; 18
     eec:	80 95       	com	r24
     eee:	82 bb       	out	0x12, r24	; 18
     ef0:	08 95       	ret

00000ef2 <EEPROM_write>:
     ef2:	8e bb       	out	0x1e, r24	; 30
     ef4:	9f bb       	out	0x1f, r25	; 31
     ef6:	6d bb       	out	0x1d, r22	; 29
     ef8:	e2 9a       	sbi	0x1c, 2	; 28
     efa:	e1 9a       	sbi	0x1c, 1	; 28
     efc:	8c b3       	in	r24, 0x1c	; 28
     efe:	81 fd       	sbrc	r24, 1
     f00:	fd cf       	rjmp	.-6      	; 0xefc <EEPROM_write+0xa>
     f02:	08 95       	ret

00000f04 <EEPROM_read>:
     f04:	8e bb       	out	0x1e, r24	; 30
     f06:	9f bb       	out	0x1f, r25	; 31
     f08:	e0 9a       	sbi	0x1c, 0	; 28
     f0a:	8d b3       	in	r24, 0x1d	; 29
     f0c:	08 95       	ret

00000f0e <EXTI_Init>:
     f0e:	8f b7       	in	r24, 0x3f	; 63
     f10:	8f 77       	andi	r24, 0x7F	; 127
     f12:	8f bf       	out	0x3f, r24	; 63
     f14:	8b b7       	in	r24, 0x3b	; 59
     f16:	8f 7b       	andi	r24, 0xBF	; 191
     f18:	8b bf       	out	0x3b, r24	; 59
     f1a:	8b b7       	in	r24, 0x3b	; 59
     f1c:	8f 77       	andi	r24, 0x7F	; 127
     f1e:	8b bf       	out	0x3b, r24	; 59
     f20:	8b b7       	in	r24, 0x3b	; 59
     f22:	8f 7d       	andi	r24, 0xDF	; 223
     f24:	8b bf       	out	0x3b, r24	; 59
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	62 e0       	ldi	r22, 0x02	; 2
     f2a:	42 e0       	ldi	r20, 0x02	; 2
     f2c:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>
     f30:	85 b7       	in	r24, 0x35	; 53
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	85 bf       	out	0x35, r24	; 53
     f36:	85 b7       	in	r24, 0x35	; 53
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	85 bf       	out	0x35, r24	; 53
     f3c:	8a b7       	in	r24, 0x3a	; 58
     f3e:	80 64       	ori	r24, 0x40	; 64
     f40:	8a bf       	out	0x3a, r24	; 58
     f42:	8b b7       	in	r24, 0x3b	; 59
     f44:	80 64       	ori	r24, 0x40	; 64
     f46:	8b bf       	out	0x3b, r24	; 59
     f48:	8f b7       	in	r24, 0x3f	; 63
     f4a:	80 68       	ori	r24, 0x80	; 128
     f4c:	8f bf       	out	0x3f, r24	; 63
     f4e:	08 95       	ret

00000f50 <EXTI_DisableInterrupt>:
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	49 f0       	breq	.+18     	; 0xf66 <EXTI_DisableInterrupt+0x16>
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	18 f0       	brcs	.+6      	; 0xf5e <EXTI_DisableInterrupt+0xe>
     f58:	82 30       	cpi	r24, 0x02	; 2
     f5a:	61 f4       	brne	.+24     	; 0xf74 <EXTI_DisableInterrupt+0x24>
     f5c:	08 c0       	rjmp	.+16     	; 0xf6e <EXTI_DisableInterrupt+0x1e>
     f5e:	8b b7       	in	r24, 0x3b	; 59
     f60:	8f 7b       	andi	r24, 0xBF	; 191
     f62:	8b bf       	out	0x3b, r24	; 59
     f64:	08 95       	ret
     f66:	8b b7       	in	r24, 0x3b	; 59
     f68:	8f 77       	andi	r24, 0x7F	; 127
     f6a:	8b bf       	out	0x3b, r24	; 59
     f6c:	08 95       	ret
     f6e:	8b b7       	in	r24, 0x3b	; 59
     f70:	8f 7d       	andi	r24, 0xDF	; 223
     f72:	8b bf       	out	0x3b, r24	; 59
     f74:	08 95       	ret

00000f76 <EXTI_EnableInterrupt>:
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	49 f0       	breq	.+18     	; 0xf8c <EXTI_EnableInterrupt+0x16>
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	18 f0       	brcs	.+6      	; 0xf84 <EXTI_EnableInterrupt+0xe>
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	61 f4       	brne	.+24     	; 0xf9a <EXTI_EnableInterrupt+0x24>
     f82:	08 c0       	rjmp	.+16     	; 0xf94 <EXTI_EnableInterrupt+0x1e>
     f84:	8b b7       	in	r24, 0x3b	; 59
     f86:	80 64       	ori	r24, 0x40	; 64
     f88:	8b bf       	out	0x3b, r24	; 59
     f8a:	08 95       	ret
     f8c:	8b b7       	in	r24, 0x3b	; 59
     f8e:	80 68       	ori	r24, 0x80	; 128
     f90:	8b bf       	out	0x3b, r24	; 59
     f92:	08 95       	ret
     f94:	8b b7       	in	r24, 0x3b	; 59
     f96:	80 62       	ori	r24, 0x20	; 32
     f98:	8b bf       	out	0x3b, r24	; 59
     f9a:	08 95       	ret

00000f9c <EXTI_ChangeSenseControl>:
     f9c:	61 30       	cpi	r22, 0x01	; 1
     f9e:	61 f1       	breq	.+88     	; 0xff8 <EXTI_ChangeSenseControl+0x5c>
     fa0:	61 30       	cpi	r22, 0x01	; 1
     fa2:	20 f0       	brcs	.+8      	; 0xfac <EXTI_ChangeSenseControl+0x10>
     fa4:	62 30       	cpi	r22, 0x02	; 2
     fa6:	09 f0       	breq	.+2      	; 0xfaa <EXTI_ChangeSenseControl+0xe>
     fa8:	58 c0       	rjmp	.+176    	; 0x105a <EXTI_ChangeSenseControl+0xbe>
     faa:	4b c0       	rjmp	.+150    	; 0x1042 <EXTI_ChangeSenseControl+0xa6>
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	79 f0       	breq	.+30     	; 0xfce <EXTI_ChangeSenseControl+0x32>
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	30 f0       	brcs	.+12     	; 0xfc0 <EXTI_ChangeSenseControl+0x24>
     fb4:	82 30       	cpi	r24, 0x02	; 2
     fb6:	91 f0       	breq	.+36     	; 0xfdc <EXTI_ChangeSenseControl+0x40>
     fb8:	83 30       	cpi	r24, 0x03	; 3
     fba:	09 f0       	breq	.+2      	; 0xfbe <EXTI_ChangeSenseControl+0x22>
     fbc:	4e c0       	rjmp	.+156    	; 0x105a <EXTI_ChangeSenseControl+0xbe>
     fbe:	15 c0       	rjmp	.+42     	; 0xfea <EXTI_ChangeSenseControl+0x4e>
     fc0:	85 b7       	in	r24, 0x35	; 53
     fc2:	8d 7f       	andi	r24, 0xFD	; 253
     fc4:	85 bf       	out	0x35, r24	; 53
     fc6:	85 b7       	in	r24, 0x35	; 53
     fc8:	8e 7f       	andi	r24, 0xFE	; 254
     fca:	85 bf       	out	0x35, r24	; 53
     fcc:	08 95       	ret
     fce:	85 b7       	in	r24, 0x35	; 53
     fd0:	8d 7f       	andi	r24, 0xFD	; 253
     fd2:	85 bf       	out	0x35, r24	; 53
     fd4:	85 b7       	in	r24, 0x35	; 53
     fd6:	81 60       	ori	r24, 0x01	; 1
     fd8:	85 bf       	out	0x35, r24	; 53
     fda:	08 95       	ret
     fdc:	85 b7       	in	r24, 0x35	; 53
     fde:	82 60       	ori	r24, 0x02	; 2
     fe0:	85 bf       	out	0x35, r24	; 53
     fe2:	85 b7       	in	r24, 0x35	; 53
     fe4:	8e 7f       	andi	r24, 0xFE	; 254
     fe6:	85 bf       	out	0x35, r24	; 53
     fe8:	08 95       	ret
     fea:	85 b7       	in	r24, 0x35	; 53
     fec:	82 60       	ori	r24, 0x02	; 2
     fee:	85 bf       	out	0x35, r24	; 53
     ff0:	85 b7       	in	r24, 0x35	; 53
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	85 bf       	out	0x35, r24	; 53
     ff6:	08 95       	ret
     ff8:	81 30       	cpi	r24, 0x01	; 1
     ffa:	71 f0       	breq	.+28     	; 0x1018 <EXTI_ChangeSenseControl+0x7c>
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	28 f0       	brcs	.+10     	; 0x100a <EXTI_ChangeSenseControl+0x6e>
    1000:	82 30       	cpi	r24, 0x02	; 2
    1002:	89 f0       	breq	.+34     	; 0x1026 <EXTI_ChangeSenseControl+0x8a>
    1004:	83 30       	cpi	r24, 0x03	; 3
    1006:	49 f5       	brne	.+82     	; 0x105a <EXTI_ChangeSenseControl+0xbe>
    1008:	15 c0       	rjmp	.+42     	; 0x1034 <EXTI_ChangeSenseControl+0x98>
    100a:	85 b7       	in	r24, 0x35	; 53
    100c:	87 7f       	andi	r24, 0xF7	; 247
    100e:	85 bf       	out	0x35, r24	; 53
    1010:	85 b7       	in	r24, 0x35	; 53
    1012:	8b 7f       	andi	r24, 0xFB	; 251
    1014:	85 bf       	out	0x35, r24	; 53
    1016:	08 95       	ret
    1018:	85 b7       	in	r24, 0x35	; 53
    101a:	87 7f       	andi	r24, 0xF7	; 247
    101c:	85 bf       	out	0x35, r24	; 53
    101e:	85 b7       	in	r24, 0x35	; 53
    1020:	84 60       	ori	r24, 0x04	; 4
    1022:	85 bf       	out	0x35, r24	; 53
    1024:	08 95       	ret
    1026:	85 b7       	in	r24, 0x35	; 53
    1028:	88 60       	ori	r24, 0x08	; 8
    102a:	85 bf       	out	0x35, r24	; 53
    102c:	85 b7       	in	r24, 0x35	; 53
    102e:	8b 7f       	andi	r24, 0xFB	; 251
    1030:	85 bf       	out	0x35, r24	; 53
    1032:	08 95       	ret
    1034:	85 b7       	in	r24, 0x35	; 53
    1036:	88 60       	ori	r24, 0x08	; 8
    1038:	85 bf       	out	0x35, r24	; 53
    103a:	85 b7       	in	r24, 0x35	; 53
    103c:	84 60       	ori	r24, 0x04	; 4
    103e:	85 bf       	out	0x35, r24	; 53
    1040:	08 95       	ret
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	19 f0       	breq	.+6      	; 0x104c <EXTI_ChangeSenseControl+0xb0>
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	41 f4       	brne	.+16     	; 0x105a <EXTI_ChangeSenseControl+0xbe>
    104a:	04 c0       	rjmp	.+8      	; 0x1054 <EXTI_ChangeSenseControl+0xb8>
    104c:	84 b7       	in	r24, 0x34	; 52
    104e:	8f 7b       	andi	r24, 0xBF	; 191
    1050:	84 bf       	out	0x34, r24	; 52
    1052:	08 95       	ret
    1054:	84 b7       	in	r24, 0x34	; 52
    1056:	80 64       	ori	r24, 0x40	; 64
    1058:	84 bf       	out	0x34, r24	; 52
    105a:	08 95       	ret

0000105c <EXTI_SetCallback>:
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	51 f0       	breq	.+20     	; 0x1074 <EXTI_SetCallback+0x18>
    1060:	63 30       	cpi	r22, 0x03	; 3
    1062:	40 f4       	brcc	.+16     	; 0x1074 <EXTI_SetCallback+0x18>
    1064:	e6 2f       	mov	r30, r22
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	ee 5d       	subi	r30, 0xDE	; 222
    106e:	fe 4f       	sbci	r31, 0xFE	; 254
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
    1074:	08 95       	ret

00001076 <__vector_1>:
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
    1080:	2f 93       	push	r18
    1082:	3f 93       	push	r19
    1084:	4f 93       	push	r20
    1086:	5f 93       	push	r21
    1088:	6f 93       	push	r22
    108a:	7f 93       	push	r23
    108c:	8f 93       	push	r24
    108e:	9f 93       	push	r25
    1090:	af 93       	push	r26
    1092:	bf 93       	push	r27
    1094:	ef 93       	push	r30
    1096:	ff 93       	push	r31
    1098:	e0 91 22 01 	lds	r30, 0x0122
    109c:	f0 91 23 01 	lds	r31, 0x0123
    10a0:	30 97       	sbiw	r30, 0x00	; 0
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <__vector_1+0x30>
    10a4:	09 95       	icall
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	bf 91       	pop	r27
    10ac:	af 91       	pop	r26
    10ae:	9f 91       	pop	r25
    10b0:	8f 91       	pop	r24
    10b2:	7f 91       	pop	r23
    10b4:	6f 91       	pop	r22
    10b6:	5f 91       	pop	r21
    10b8:	4f 91       	pop	r20
    10ba:	3f 91       	pop	r19
    10bc:	2f 91       	pop	r18
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	0f 90       	pop	r0
    10c4:	1f 90       	pop	r1
    10c6:	18 95       	reti

000010c8 <__vector_2>:
    10c8:	1f 92       	push	r1
    10ca:	0f 92       	push	r0
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	0f 92       	push	r0
    10d0:	11 24       	eor	r1, r1
    10d2:	2f 93       	push	r18
    10d4:	3f 93       	push	r19
    10d6:	4f 93       	push	r20
    10d8:	5f 93       	push	r21
    10da:	6f 93       	push	r22
    10dc:	7f 93       	push	r23
    10de:	8f 93       	push	r24
    10e0:	9f 93       	push	r25
    10e2:	af 93       	push	r26
    10e4:	bf 93       	push	r27
    10e6:	ef 93       	push	r30
    10e8:	ff 93       	push	r31
    10ea:	e0 91 24 01 	lds	r30, 0x0124
    10ee:	f0 91 25 01 	lds	r31, 0x0125
    10f2:	30 97       	sbiw	r30, 0x00	; 0
    10f4:	09 f0       	breq	.+2      	; 0x10f8 <__vector_2+0x30>
    10f6:	09 95       	icall
    10f8:	ff 91       	pop	r31
    10fa:	ef 91       	pop	r30
    10fc:	bf 91       	pop	r27
    10fe:	af 91       	pop	r26
    1100:	9f 91       	pop	r25
    1102:	8f 91       	pop	r24
    1104:	7f 91       	pop	r23
    1106:	6f 91       	pop	r22
    1108:	5f 91       	pop	r21
    110a:	4f 91       	pop	r20
    110c:	3f 91       	pop	r19
    110e:	2f 91       	pop	r18
    1110:	0f 90       	pop	r0
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	0f 90       	pop	r0
    1116:	1f 90       	pop	r1
    1118:	18 95       	reti

0000111a <__vector_3>:
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	2f 93       	push	r18
    1126:	3f 93       	push	r19
    1128:	4f 93       	push	r20
    112a:	5f 93       	push	r21
    112c:	6f 93       	push	r22
    112e:	7f 93       	push	r23
    1130:	8f 93       	push	r24
    1132:	9f 93       	push	r25
    1134:	af 93       	push	r26
    1136:	bf 93       	push	r27
    1138:	ef 93       	push	r30
    113a:	ff 93       	push	r31
    113c:	e0 91 26 01 	lds	r30, 0x0126
    1140:	f0 91 27 01 	lds	r31, 0x0127
    1144:	30 97       	sbiw	r30, 0x00	; 0
    1146:	09 f0       	breq	.+2      	; 0x114a <__vector_3+0x30>
    1148:	09 95       	icall
    114a:	ff 91       	pop	r31
    114c:	ef 91       	pop	r30
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <GIE_Enable>:
    116c:	8f b7       	in	r24, 0x3f	; 63
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	8f bf       	out	0x3f, r24	; 63
    1172:	08 95       	ret

00001174 <GIE_Disable>:
    1174:	8f b7       	in	r24, 0x3f	; 63
    1176:	8f 77       	andi	r24, 0x7F	; 127
    1178:	8f bf       	out	0x3f, r24	; 63
    117a:	08 95       	ret

0000117c <TIMER0_Init>:
    117c:	83 b7       	in	r24, 0x33	; 51
    117e:	87 7f       	andi	r24, 0xF7	; 247
    1180:	83 bf       	out	0x33, r24	; 51
    1182:	83 b7       	in	r24, 0x33	; 51
    1184:	8f 7b       	andi	r24, 0xBF	; 191
    1186:	83 bf       	out	0x33, r24	; 51
    1188:	83 b7       	in	r24, 0x33	; 51
    118a:	8f 7d       	andi	r24, 0xDF	; 223
    118c:	83 bf       	out	0x33, r24	; 51
    118e:	83 b7       	in	r24, 0x33	; 51
    1190:	8f 7e       	andi	r24, 0xEF	; 239
    1192:	83 bf       	out	0x33, r24	; 51
    1194:	12 be       	out	0x32, r1	; 50
    1196:	88 b7       	in	r24, 0x38	; 56
    1198:	81 60       	ori	r24, 0x01	; 1
    119a:	88 bf       	out	0x38, r24	; 56
    119c:	89 b7       	in	r24, 0x39	; 57
    119e:	81 60       	ori	r24, 0x01	; 1
    11a0:	89 bf       	out	0x39, r24	; 57
    11a2:	8f b7       	in	r24, 0x3f	; 63
    11a4:	80 68       	ori	r24, 0x80	; 128
    11a6:	8f bf       	out	0x3f, r24	; 63
    11a8:	83 b7       	in	r24, 0x33	; 51
    11aa:	88 7f       	andi	r24, 0xF8	; 248
    11ac:	83 bf       	out	0x33, r24	; 51
    11ae:	83 b7       	in	r24, 0x33	; 51
    11b0:	84 60       	ori	r24, 0x04	; 4
    11b2:	83 bf       	out	0x33, r24	; 51
    11b4:	08 95       	ret

000011b6 <TIMER0_SetCompareValue>:
    11b6:	8c bf       	out	0x3c, r24	; 60
    11b8:	08 95       	ret

000011ba <TIMER0_SetTimerValue>:
    11ba:	82 bf       	out	0x32, r24	; 50
    11bc:	08 95       	ret

000011be <TIMER0_GetTimerValue>:
    11be:	82 b7       	in	r24, 0x32	; 50
    11c0:	08 95       	ret

000011c2 <TIMER0_OVF_InterruptDisable>:
    11c2:	89 b7       	in	r24, 0x39	; 57
    11c4:	8e 7f       	andi	r24, 0xFE	; 254
    11c6:	89 bf       	out	0x39, r24	; 57
    11c8:	08 95       	ret

000011ca <TIMER0_OVF_InterruptEnable>:
    11ca:	89 b7       	in	r24, 0x39	; 57
    11cc:	81 60       	ori	r24, 0x01	; 1
    11ce:	89 bf       	out	0x39, r24	; 57
    11d0:	08 95       	ret

000011d2 <TIMER0_COMP_InterruptDisable>:
    11d2:	89 b7       	in	r24, 0x39	; 57
    11d4:	8d 7f       	andi	r24, 0xFD	; 253
    11d6:	89 bf       	out	0x39, r24	; 57
    11d8:	08 95       	ret

000011da <TIMER0_COMP_InterruptEnable>:
    11da:	89 b7       	in	r24, 0x39	; 57
    11dc:	82 60       	ori	r24, 0x02	; 2
    11de:	89 bf       	out	0x39, r24	; 57
    11e0:	08 95       	ret

000011e2 <TIMER0_GetTime_ms>:
    11e2:	22 b7       	in	r18, 0x32	; 50
    11e4:	80 91 28 01 	lds	r24, 0x0128
    11e8:	90 91 29 01 	lds	r25, 0x0129
    11ec:	a0 e0       	ldi	r26, 0x00	; 0
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	66 27       	eor	r22, r22
    11f2:	78 2f       	mov	r23, r24
    11f4:	89 2f       	mov	r24, r25
    11f6:	9a 2f       	mov	r25, r26
    11f8:	62 0f       	add	r22, r18
    11fa:	71 1d       	adc	r23, r1
    11fc:	81 1d       	adc	r24, r1
    11fe:	91 1d       	adc	r25, r1
    1200:	0e 94 34 14 	call	0x2868	; 0x2868 <__floatunsisf>
    1204:	2f e6       	ldi	r18, 0x6F	; 111
    1206:	32 e1       	ldi	r19, 0x12	; 18
    1208:	43 e0       	ldi	r20, 0x03	; 3
    120a:	5d e3       	ldi	r21, 0x3D	; 61
    120c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    1210:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
    1214:	08 95       	ret

00001216 <TIMER0_RESET>:
    1216:	12 be       	out	0x32, r1	; 50
    1218:	10 92 29 01 	sts	0x0129, r1
    121c:	10 92 28 01 	sts	0x0128, r1
    1220:	08 95       	ret

00001222 <TIMER0_Set_INT_Time_ms>:
    1222:	4f 92       	push	r4
    1224:	5f 92       	push	r5
    1226:	6f 92       	push	r6
    1228:	7f 92       	push	r7
    122a:	8f 92       	push	r8
    122c:	9f 92       	push	r9
    122e:	af 92       	push	r10
    1230:	bf 92       	push	r11
    1232:	cf 92       	push	r12
    1234:	df 92       	push	r13
    1236:	ef 92       	push	r14
    1238:	ff 92       	push	r15
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
    1242:	0e 94 34 14 	call	0x2868	; 0x2868 <__floatunsisf>
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	34 e2       	ldi	r19, 0x24	; 36
    124a:	44 ef       	ldi	r20, 0xF4	; 244
    124c:	5a e4       	ldi	r21, 0x4A	; 74
    124e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	4a e7       	ldi	r20, 0x7A	; 122
    1258:	5c e4       	ldi	r21, 0x4C	; 76
    125a:	0e 94 9b 13 	call	0x2736	; 0x2736 <__divsf3>
    125e:	d6 2f       	mov	r29, r22
    1260:	c7 2f       	mov	r28, r23
    1262:	18 2f       	mov	r17, r24
    1264:	09 2f       	mov	r16, r25
    1266:	76 2e       	mov	r7, r22
    1268:	67 2e       	mov	r6, r23
    126a:	58 2e       	mov	r5, r24
    126c:	49 2e       	mov	r4, r25
    126e:	86 2f       	mov	r24, r22
    1270:	9c 2f       	mov	r25, r28
    1272:	a1 2f       	mov	r26, r17
    1274:	b0 2f       	mov	r27, r16
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
    127e:	4b 01       	movw	r8, r22
    1280:	5c 01       	movw	r10, r24
    1282:	0e 94 34 14 	call	0x2868	; 0x2868 <__floatunsisf>
    1286:	6b 01       	movw	r12, r22
    1288:	7c 01       	movw	r14, r24
    128a:	8d 2f       	mov	r24, r29
    128c:	9c 2f       	mov	r25, r28
    128e:	a1 2f       	mov	r26, r17
    1290:	b0 2f       	mov	r27, r16
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	a7 01       	movw	r20, r14
    1298:	96 01       	movw	r18, r12
    129a:	0e 94 32 13 	call	0x2664	; 0x2664 <__subsf3>
    129e:	9b 01       	movw	r18, r22
    12a0:	ac 01       	movw	r20, r24
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	80 e8       	ldi	r24, 0x80	; 128
    12a8:	9f e3       	ldi	r25, 0x3F	; 63
    12aa:	0e 94 32 13 	call	0x2664	; 0x2664 <__subsf3>
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e8       	ldi	r20, 0x80	; 128
    12b4:	53 e4       	ldi	r21, 0x43	; 67
    12b6:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    12ba:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
    12be:	62 bf       	out	0x32, r22	; 50
    12c0:	8d 2f       	mov	r24, r29
    12c2:	9c 2f       	mov	r25, r28
    12c4:	a1 2f       	mov	r26, r17
    12c6:	b0 2f       	mov	r27, r16
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	a7 01       	movw	r20, r14
    12ce:	96 01       	movw	r18, r12
    12d0:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    12d4:	18 16       	cp	r1, r24
    12d6:	64 f4       	brge	.+24     	; 0x12f0 <TIMER0_Set_INT_Time_ms+0xce>
    12d8:	c5 01       	movw	r24, r10
    12da:	b4 01       	movw	r22, r8
    12dc:	6f 5f       	subi	r22, 0xFF	; 255
    12de:	7f 4f       	sbci	r23, 0xFF	; 255
    12e0:	8f 4f       	sbci	r24, 0xFF	; 255
    12e2:	9f 4f       	sbci	r25, 0xFF	; 255
    12e4:	0e 94 34 14 	call	0x2868	; 0x2868 <__floatunsisf>
    12e8:	76 2e       	mov	r7, r22
    12ea:	67 2e       	mov	r6, r23
    12ec:	58 2e       	mov	r5, r24
    12ee:	49 2e       	mov	r4, r25
    12f0:	87 2d       	mov	r24, r7
    12f2:	96 2d       	mov	r25, r6
    12f4:	a5 2d       	mov	r26, r5
    12f6:	b4 2d       	mov	r27, r4
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
    1300:	86 2f       	mov	r24, r22
    1302:	97 2f       	mov	r25, r23
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	bf 90       	pop	r11
    1316:	af 90       	pop	r10
    1318:	9f 90       	pop	r9
    131a:	8f 90       	pop	r8
    131c:	7f 90       	pop	r7
    131e:	6f 90       	pop	r6
    1320:	5f 90       	pop	r5
    1322:	4f 90       	pop	r4
    1324:	08 95       	ret

00001326 <TIMER0_Set_OVF_Callback>:
    1326:	90 93 2d 01 	sts	0x012D, r25
    132a:	80 93 2c 01 	sts	0x012C, r24
    132e:	08 95       	ret

00001330 <TIMER0_Set_COMP_Callback>:
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	21 f0       	breq	.+8      	; 0x133c <TIMER0_Set_COMP_Callback+0xc>
    1334:	90 93 2b 01 	sts	0x012B, r25
    1338:	80 93 2a 01 	sts	0x012A, r24
    133c:	08 95       	ret

0000133e <__vector_10>:
    133e:	1f 92       	push	r1
    1340:	0f 92       	push	r0
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	0f 92       	push	r0
    1346:	11 24       	eor	r1, r1
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
    1360:	e0 91 2a 01 	lds	r30, 0x012A
    1364:	f0 91 2b 01 	lds	r31, 0x012B
    1368:	30 97       	sbiw	r30, 0x00	; 0
    136a:	09 f0       	breq	.+2      	; 0x136e <__vector_10+0x30>
    136c:	09 95       	icall
    136e:	ff 91       	pop	r31
    1370:	ef 91       	pop	r30
    1372:	bf 91       	pop	r27
    1374:	af 91       	pop	r26
    1376:	9f 91       	pop	r25
    1378:	8f 91       	pop	r24
    137a:	7f 91       	pop	r23
    137c:	6f 91       	pop	r22
    137e:	5f 91       	pop	r21
    1380:	4f 91       	pop	r20
    1382:	3f 91       	pop	r19
    1384:	2f 91       	pop	r18
    1386:	0f 90       	pop	r0
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	0f 90       	pop	r0
    138c:	1f 90       	pop	r1
    138e:	18 95       	reti

00001390 <__vector_11>:
    1390:	1f 92       	push	r1
    1392:	0f 92       	push	r0
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	0f 92       	push	r0
    1398:	11 24       	eor	r1, r1
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
    13b2:	e0 91 2c 01 	lds	r30, 0x012C
    13b6:	f0 91 2d 01 	lds	r31, 0x012D
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <__vector_11+0x30>
    13be:	09 95       	icall
    13c0:	80 91 28 01 	lds	r24, 0x0128
    13c4:	90 91 29 01 	lds	r25, 0x0129
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	90 93 29 01 	sts	0x0129, r25
    13ce:	80 93 28 01 	sts	0x0128, r24
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	0f 90       	pop	r0
    13f0:	1f 90       	pop	r1
    13f2:	18 95       	reti

000013f4 <TIMER1_Init>:
void TIMER1_Init( void )
{
	/* Initialization the TIMER1 Based on TIMER0_config.h File Choices */

	/* Clear the Waveform Generation Mode Bits */
	TCCR1A &= TIMER1_WGM1_10_clr_msk;
    13f4:	8f b5       	in	r24, 0x2f	; 47
    13f6:	8c 7f       	andi	r24, 0xFC	; 252
    13f8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= TIMER1_WGM1_32_clr_msk;
    13fa:	8e b5       	in	r24, 0x2e	; 46
    13fc:	87 7e       	andi	r24, 0xE7	; 231
    13fe:	8e bd       	out	0x2e, r24	; 46

	/* Set the Waveform Generation Mode Bits */
	TCCR1A |= ( TIMER1_WAVEFORM_GENERATION_MODE & 0x03 );
    1400:	8f b5       	in	r24, 0x2f	; 47
    1402:	83 60       	ori	r24, 0x03	; 3
    1404:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= ( TIMER1_WAVEFORM_GENERATION_MODE & 0x0C ) << 1;
    1406:	8e b5       	in	r24, 0x2e	; 46
    1408:	88 61       	ori	r24, 0x18	; 24
    140a:	8e bd       	out	0x2e, r24	; 46

			/* Check on Compare Output Mode (0C1A Pin Mode) */
			#if   TIMER1_0C1A_MODE == TIMER1_COM_DISCONNECT_0C1A

				/* Normal Port Operation, 0C1A Disconnected */
				CLR_BIT( TCCR1A , COM1A1 ); CLR_BIT( TCCR1A , COM1A0 );
    140c:	8f b5       	in	r24, 0x2f	; 47
    140e:	8f 77       	andi	r24, 0x7F	; 127
    1410:	8f bd       	out	0x2f, r24	; 47
    1412:	8f b5       	in	r24, 0x2f	; 47
    1414:	8f 7b       	andi	r24, 0xBF	; 191
    1416:	8f bd       	out	0x2f, r24	; 47
				CLR_BIT( TCCR1A , COM1B1 ); CLR_BIT( TCCR1A , COM1B0 );

			#elif TIMER1_0C1B_MODE == TIMER1_COM_NON_INVERTING_0C1B

				/* 0C1B in Non Inverting Mode */
				SET_BIT( TCCR1A , COM1B1 ); CLR_BIT( TCCR1A , COM1B0 );
    1418:	8f b5       	in	r24, 0x2f	; 47
    141a:	80 62       	ori	r24, 0x20	; 32
    141c:	8f bd       	out	0x2f, r24	; 47
    141e:	8f b5       	in	r24, 0x2f	; 47
    1420:	8f 7e       	andi	r24, 0xEF	; 239
    1422:	8f bd       	out	0x2f, r24	; 47

				/* Direction OC1B PIN as Output */
				SET_BIT( DDRD , OC1B_PIN );
    1424:	8c 9a       	sbi	0x11, 4	; 17
			#error "Wrong \"TIMER1_WAVEFORM_GENERATION_MODE\" configuration option"
	#endif


	/* Set TCNT1 PREload Value From Configuration File */
	TCNT1 = TIMER1_TCNT1_PRELOAD;
    1426:	1d bc       	out	0x2d, r1	; 45
    1428:	1c bc       	out	0x2c, r1	; 44

	/* Set OCR1A PREload Value From Configuration File */
	OCR1A = TIMER1_OCR1A_PRELOAD;
    142a:	80 e2       	ldi	r24, 0x20	; 32
    142c:	9e e4       	ldi	r25, 0x4E	; 78
    142e:	9b bd       	out	0x2b, r25	; 43
    1430:	8a bd       	out	0x2a, r24	; 42

	/* Set OCR1B PREload Value From Configuration File */
	OCR1B = TIMER1_OCR1B_PRELOAD;
    1432:	8c ed       	ldi	r24, 0xDC	; 220
    1434:	95 e0       	ldi	r25, 0x05	; 5
    1436:	99 bd       	out	0x29, r25	; 41
    1438:	88 bd       	out	0x28, r24	; 40


	#if   TIMER1_OVF_INT_STATUS == TIMER1_OVF_INT_ENABLE

			/* Clear the Overflow Interrupt Flag */
			SET_BIT( TIFR , TOV1 );
    143a:	88 b7       	in	r24, 0x38	; 56
    143c:	84 60       	ori	r24, 0x04	; 4
    143e:	88 bf       	out	0x38, r24	; 56

			/* Enable the Overflow Interrupt */
			SET_BIT( TIMSK , TOIE1 );
    1440:	89 b7       	in	r24, 0x39	; 57
    1442:	84 60       	ori	r24, 0x04	; 4
    1444:	89 bf       	out	0x39, r24	; 57

			/* Enable Global Interrupt */
			SET_BIT( SREG , I );
    1446:	8f b7       	in	r24, 0x3f	; 63
    1448:	80 68       	ori	r24, 0x80	; 128
    144a:	8f bf       	out	0x3f, r24	; 63
			SET_BIT( SREG , I );

	#elif TIMER1_COMPA_INT_STATUS == TIMER1_COMPA_INT_DISABLE

			/* Disable the Compare Match A Interrupt */
			CLR_BIT( TIMSK , OCIE1A );
    144c:	89 b7       	in	r24, 0x39	; 57
    144e:	8f 7e       	andi	r24, 0xEF	; 239
    1450:	89 bf       	out	0x39, r24	; 57
			SET_BIT( SREG , I );

	#elif TIMER1_COMPB_INT_STATUS == TIMER1_COMPB_INT_DISABLE

			/* Disable the Compare Match B Interrupt */
			CLR_BIT( TIMSK , OCIE1B );
    1452:	89 b7       	in	r24, 0x39	; 57
    1454:	87 7f       	andi	r24, 0xF7	; 247
    1456:	89 bf       	out	0x39, r24	; 57
			#error "Wrong \"TIMER1_COMPB_INT_STATUS\" configuration option"
	#endif


	/* Clear the Clock Source Select Bits */
	TCCR1B &= TIMER1_PRESCALER_clr_msk;
    1458:	8e b5       	in	r24, 0x2e	; 46
    145a:	88 7f       	andi	r24, 0xF8	; 248
    145c:	8e bd       	out	0x2e, r24	; 46

	/* Set the Clock Source Select Bits */
	TCCR1B |= TIMER1_CLOCK_SOURCE_msk;
    145e:	8e b5       	in	r24, 0x2e	; 46
    1460:	82 60       	ori	r24, 0x02	; 2
    1462:	8e bd       	out	0x2e, r24	; 46

}
    1464:	08 95       	ret

00001466 <ICU_Init>:

	/* Check on Input Capture Noise Canceler Status */
	#if   ICU_NOISE_CANCELER_STATUS == ICU_NOISE_CANCELER_DISABLE

		/* Disable Input Capture Noise Canceler */
		CLR_BIT( TCCR1B , ICNC1 );
    1466:	8e b5       	in	r24, 0x2e	; 46
    1468:	8f 77       	andi	r24, 0x7F	; 127
    146a:	8e bd       	out	0x2e, r24	; 46
		CLR_BIT( TCCR1B , ICES1 );

	#elif ICU_START_EDGE_STATUS == ICU_RISING_EDGE

		/* the Input Capture Signal Start Edge is Rising Edge */
		SET_BIT( TCCR1B , ICES1 );
    146c:	8e b5       	in	r24, 0x2e	; 46
    146e:	80 64       	ori	r24, 0x40	; 64
    1470:	8e bd       	out	0x2e, r24	; 46
		/* Make an Error */
		#error "Wrong \"ICU_START_EDGE_STATUS\" configuration option"
	#endif

	/* Direction ICP1 PIN as Input */
	CLR_BIT( DDRD  , ICP1_PIN );
    1472:	8e 98       	cbi	0x11, 6	; 17

		/* Enable Global Interrupt */
		SET_BIT( SREG , I );

	#endif
}
    1474:	08 95       	ret

00001476 <ICU_FallingTriggerEdge>:

/*___________________________________________________________________________________________________*/
void ICU_FallingTriggerEdge( void )
{
	/* Set the Trigger Edge as Falling Edge */
	CLR_BIT( TCCR1B , ICES1 );
    1476:	8e b5       	in	r24, 0x2e	; 46
    1478:	8f 7b       	andi	r24, 0xBF	; 191
    147a:	8e bd       	out	0x2e, r24	; 46
}
    147c:	08 95       	ret

0000147e <ICU_RisingTriggerEdge>:

/*___________________________________________________________________________________________________*/
void ICU_RisingTriggerEdge( void )
{
	/* Set the Trigger Edge as Rising Edge */
	SET_BIT( TCCR1B , ICES1 );
    147e:	8e b5       	in	r24, 0x2e	; 46
    1480:	80 64       	ori	r24, 0x40	; 64
    1482:	8e bd       	out	0x2e, r24	; 46
}
    1484:	08 95       	ret

00001486 <TIMER1_SetCompare_A_Value>:

/*___________________________________________________________________________________________________*/
void TIMER1_SetCompare_A_Value( uint16 CompareAValue )
{
	/* Take the Compare A Value to Set it in OCR1A Register */
	OCR1A = CompareAValue;
    1486:	9b bd       	out	0x2b, r25	; 43
    1488:	8a bd       	out	0x2a, r24	; 42
}
    148a:	08 95       	ret

0000148c <TIMER1_SetCompare_B_Value>:

/*___________________________________________________________________________________________________*/
void TIMER1_SetCompare_B_Value( uint16 CompareBValue )
{
	/* Take the Compare B Value to Set it in OCR1B Register */
	OCR1B = CompareBValue;
    148c:	99 bd       	out	0x29, r25	; 41
    148e:	88 bd       	out	0x28, r24	; 40
}
    1490:	08 95       	ret

00001492 <TIMER1_SetTimerValue>:

/*___________________________________________________________________________________________________*/
void TIMER1_SetTimerValue( uint16 TimerValue )
{
	/* Take the Timer Value to Set it in TCNT1 Register (do not use it when you use ICU) */
	TCNT1 = TimerValue;
    1492:	9d bd       	out	0x2d, r25	; 45
    1494:	8c bd       	out	0x2c, r24	; 44
}
    1496:	08 95       	ret

00001498 <TIMER1_GetTimerValue>:

/*___________________________________________________________________________________________________*/
uint16 TIMER1_GetTimerValue( void )
{
	/* Return the Value of the TCNT1 Register */
	return TCNT1;
    1498:	8c b5       	in	r24, 0x2c	; 44
    149a:	9d b5       	in	r25, 0x2d	; 45
}
    149c:	08 95       	ret

0000149e <TIMER1_InterruptDisable>:

/*___________________________________________________________________________________________________*/
void TIMER1_InterruptDisable( uint8 TIMER1_interrupt_label )
{
	/* Disable the Specified TIMER1 Interrupt */
	switch (TIMER1_interrupt_label)
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	59 f0       	breq	.+22     	; 0x14b8 <TIMER1_InterruptDisable+0x1a>
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	28 f0       	brcs	.+10     	; 0x14b0 <TIMER1_InterruptDisable+0x12>
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	59 f0       	breq	.+22     	; 0x14c0 <TIMER1_InterruptDisable+0x22>
    14aa:	83 30       	cpi	r24, 0x03	; 3
    14ac:	81 f4       	brne	.+32     	; 0x14ce <TIMER1_InterruptDisable+0x30>
    14ae:	0c c0       	rjmp	.+24     	; 0x14c8 <TIMER1_InterruptDisable+0x2a>
	{
		/* Disable Overflow Interrupt */
		case TIMER1_OVF_LABEL:   CLR_BIT( TIMSK , TOIE1 );  break;
    14b0:	89 b7       	in	r24, 0x39	; 57
    14b2:	8b 7f       	andi	r24, 0xFB	; 251
    14b4:	89 bf       	out	0x39, r24	; 57
    14b6:	08 95       	ret

		/* Disable Compare Match A Interrupt */
		case TIMER1_COMPA_LABEL: CLR_BIT( TIMSK , OCIE1A ); break;
    14b8:	89 b7       	in	r24, 0x39	; 57
    14ba:	8f 7e       	andi	r24, 0xEF	; 239
    14bc:	89 bf       	out	0x39, r24	; 57
    14be:	08 95       	ret

		/* Disable Compare Match B Interrupt */
		case TIMER1_COMPB_LABEL: CLR_BIT( TIMSK , OCIE1B ); break;
    14c0:	89 b7       	in	r24, 0x39	; 57
    14c2:	87 7f       	andi	r24, 0xF7	; 247
    14c4:	89 bf       	out	0x39, r24	; 57
    14c6:	08 95       	ret

		/* Disable Capture Event Interrupt */
		case TIMER1_CAPT_LABEL:  CLR_BIT( TIMSK , TICIE1 ); break;
    14c8:	89 b7       	in	r24, 0x39	; 57
    14ca:	8f 7d       	andi	r24, 0xDF	; 223
    14cc:	89 bf       	out	0x39, r24	; 57
    14ce:	08 95       	ret

000014d0 <TIMER1_InterruptEnable>:

/*___________________________________________________________________________________________________*/
void TIMER1_InterruptEnable( uint8 TIMER1_interrupt_label )
{
	/* Enable the Specified TIMER1 Interrupt */
	switch (TIMER1_interrupt_label)
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	59 f0       	breq	.+22     	; 0x14ea <TIMER1_InterruptEnable+0x1a>
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	28 f0       	brcs	.+10     	; 0x14e2 <TIMER1_InterruptEnable+0x12>
    14d8:	82 30       	cpi	r24, 0x02	; 2
    14da:	59 f0       	breq	.+22     	; 0x14f2 <TIMER1_InterruptEnable+0x22>
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	81 f4       	brne	.+32     	; 0x1500 <TIMER1_InterruptEnable+0x30>
    14e0:	0c c0       	rjmp	.+24     	; 0x14fa <TIMER1_InterruptEnable+0x2a>
	{
		/* Enable Overflow Interrupt */
		case TIMER1_OVF_LABEL:   SET_BIT( TIMSK , TOIE1 );  break;
    14e2:	89 b7       	in	r24, 0x39	; 57
    14e4:	84 60       	ori	r24, 0x04	; 4
    14e6:	89 bf       	out	0x39, r24	; 57
    14e8:	08 95       	ret

		/* Enable Compare Match A Interrupt */
		case TIMER1_COMPA_LABEL: SET_BIT( TIMSK , OCIE1A ); break;
    14ea:	89 b7       	in	r24, 0x39	; 57
    14ec:	80 61       	ori	r24, 0x10	; 16
    14ee:	89 bf       	out	0x39, r24	; 57
    14f0:	08 95       	ret

		/* Enable Compare Match B Interrupt */
		case TIMER1_COMPB_LABEL: SET_BIT( TIMSK , OCIE1B ); break;
    14f2:	89 b7       	in	r24, 0x39	; 57
    14f4:	88 60       	ori	r24, 0x08	; 8
    14f6:	89 bf       	out	0x39, r24	; 57
    14f8:	08 95       	ret

		/* Enable Capture Event Interrupt */
		case TIMER1_CAPT_LABEL:  SET_BIT( TIMSK , TICIE1 ); break;
    14fa:	89 b7       	in	r24, 0x39	; 57
    14fc:	80 62       	ori	r24, 0x20	; 32
    14fe:	89 bf       	out	0x39, r24	; 57
    1500:	08 95       	ret

00001502 <TIMER1_SetPWM_OC1A_DutyCycle>:

		OCR1A = (((uint32)DutyCycle)*ICR1) / 255;

	#endif

}
    1502:	08 95       	ret

00001504 <TIMER1_SetPWM_OC1B_DutyCycle>:

	#elif 	TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_PFC_PWM_OCR1A_MODE ||	\
			TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_PWM_OCR1A_MODE		||	\
			TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_OCR1A_MODE

		OCR1B = (((uint32)DutyCycle)*OCR1A) / 255;
    1504:	2a b5       	in	r18, 0x2a	; 42
    1506:	3b b5       	in	r19, 0x2b	; 43
    1508:	68 2f       	mov	r22, r24
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	50 e0       	ldi	r21, 0x00	; 0
    1514:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__mulsi3>
    1518:	2f ef       	ldi	r18, 0xFF	; 255
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__udivmodsi4>
    1524:	39 bd       	out	0x29, r19	; 41
    1526:	28 bd       	out	0x28, r18	; 40


	#endif

}
    1528:	08 95       	ret

0000152a <TIMER1_GetTime_ms>:


#if TIMER1_COUNT_MODE == TIMER1_COUNT_ENABLE
/*___________________________________________________________________________________________________*/
uint32 TIMER1_GetTime_ms( void )
{
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
	/* Return Total Time for When Timer Start Count */
	/* should no thing change the timer TCNT1 and TIMER1_TCNT1_PRELOAD = 0 */
	/* if else you can use TIMER1_RESET function if you can */

	#if	  TIMER0_WAVEFORM_GENERATION_MODE == TIMER0_NORMAL_MODE
		return (uint32)((TCNT1 + (((uint32)TIMER1_Counter) << 16))*(presc_T1*1000.0/F_CPU));
    152e:	8c b5       	in	r24, 0x2c	; 44
    1530:	9d b5       	in	r25, 0x2d	; 45
    1532:	40 91 2e 01 	lds	r20, 0x012E
    1536:	50 91 2f 01 	lds	r21, 0x012F
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	ba 01       	movw	r22, r20
    1540:	55 27       	eor	r21, r21
    1542:	44 27       	eor	r20, r20
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	8a 01       	movw	r16, r20
    154a:	9b 01       	movw	r18, r22
    154c:	08 0f       	add	r16, r24
    154e:	19 1f       	adc	r17, r25
    1550:	2a 1f       	adc	r18, r26
    1552:	3b 1f       	adc	r19, r27
    1554:	c9 01       	movw	r24, r18
    1556:	b8 01       	movw	r22, r16
    1558:	0e 94 34 14 	call	0x2868	; 0x2868 <__floatunsisf>
    155c:	2f e6       	ldi	r18, 0x6F	; 111
    155e:	32 e1       	ldi	r19, 0x12	; 18
    1560:	43 e8       	ldi	r20, 0x83	; 131
    1562:	5a e3       	ldi	r21, 0x3A	; 58
    1564:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    1568:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
	#else
		return (uint32)((TCNT1 + ((uint32)TIMER1_Counter)*OCR1A)*(presc_T1*1000.0/F_CPU));
	#endif

}
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	08 95       	ret

00001572 <TIMER1_RESET>:
/*___________________________________________________________________________________________________*/
void TIMER1_RESET( void )
{
	/* Set TCNT1 and TIMER1_Counter to 0 */

	TCNT1 = 0;
    1572:	1d bc       	out	0x2d, r1	; 45
    1574:	1c bc       	out	0x2c, r1	; 44
	TIMER1_Counter = 0;
    1576:	10 92 2f 01 	sts	0x012F, r1
    157a:	10 92 2e 01 	sts	0x012E, r1
}
    157e:	08 95       	ret

00001580 <TIMER1_Set_INT_Time_ms>:
/*___________________________________________________________________________________________________*/
#endif


uint16 TIMER1_Set_INT_Time_ms( uint16 milliseconds )
{
    1580:	6f 92       	push	r6
    1582:	7f 92       	push	r7
    1584:	8f 92       	push	r8
    1586:	9f 92       	push	r9
    1588:	af 92       	push	r10
    158a:	bf 92       	push	r11
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
			return CountsNumber;

	#elif	TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_CTC_OCR1A_MODE		||	\
			TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_OCR1A_MODE

			float32 CountsNumber = ((float32)milliseconds*F_CPU)/(OCR1A*presc_T1*1000.0) ;
    159c:	ca b5       	in	r28, 0x2a	; 42
    159e:	db b5       	in	r29, 0x2b	; 43
    15a0:	bc 01       	movw	r22, r24
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 34 14 	call	0x2868	; 0x2868 <__floatunsisf>
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	34 e2       	ldi	r19, 0x24	; 36
    15ae:	44 ef       	ldi	r20, 0xF4	; 244
    15b0:	5a e4       	ldi	r21, 0x4A	; 74
    15b2:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    15b6:	6b 01       	movw	r12, r22
    15b8:	7c 01       	movw	r14, r24
    15ba:	cc 0f       	add	r28, r28
    15bc:	dd 1f       	adc	r29, r29
    15be:	cc 0f       	add	r28, r28
    15c0:	dd 1f       	adc	r29, r29
    15c2:	cc 0f       	add	r28, r28
    15c4:	dd 1f       	adc	r29, r29
    15c6:	be 01       	movw	r22, r28
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 34 14 	call	0x2868	; 0x2868 <__floatunsisf>
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	4a e7       	ldi	r20, 0x7A	; 122
    15d6:	54 e4       	ldi	r21, 0x44	; 68
    15d8:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    15dc:	9b 01       	movw	r18, r22
    15de:	ac 01       	movw	r20, r24
    15e0:	c7 01       	movw	r24, r14
    15e2:	b6 01       	movw	r22, r12
    15e4:	0e 94 9b 13 	call	0x2736	; 0x2736 <__divsf3>
    15e8:	c6 2f       	mov	r28, r22
    15ea:	d7 2f       	mov	r29, r23
    15ec:	18 2f       	mov	r17, r24
    15ee:	09 2f       	mov	r16, r25
    15f0:	b6 2e       	mov	r11, r22
    15f2:	a7 2e       	mov	r10, r23
    15f4:	98 2e       	mov	r9, r24
    15f6:	89 2e       	mov	r8, r25

			uint16 TCNT1_value = (1 - (CountsNumber - (uint16)CountsNumber))*OCR1A;
    15f8:	6a b4       	in	r6, 0x2a	; 42
    15fa:	7b b4       	in	r7, 0x2b	; 43
    15fc:	86 2f       	mov	r24, r22
    15fe:	9d 2f       	mov	r25, r29
    1600:	a1 2f       	mov	r26, r17
    1602:	b0 2f       	mov	r27, r16
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 34 14 	call	0x2868	; 0x2868 <__floatunsisf>
    1614:	9b 01       	movw	r18, r22
    1616:	ac 01       	movw	r20, r24
    1618:	8c 2f       	mov	r24, r28
    161a:	9d 2f       	mov	r25, r29
    161c:	a1 2f       	mov	r26, r17
    161e:	b0 2f       	mov	r27, r16
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	0e 94 32 13 	call	0x2664	; 0x2664 <__subsf3>
    1628:	9b 01       	movw	r18, r22
    162a:	ac 01       	movw	r20, r24
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	80 e8       	ldi	r24, 0x80	; 128
    1632:	9f e3       	ldi	r25, 0x3F	; 63
    1634:	0e 94 32 13 	call	0x2664	; 0x2664 <__subsf3>
    1638:	6b 01       	movw	r12, r22
    163a:	7c 01       	movw	r14, r24
    163c:	b3 01       	movw	r22, r6
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 34 14 	call	0x2868	; 0x2868 <__floatunsisf>
    1646:	9b 01       	movw	r18, r22
    1648:	ac 01       	movw	r20, r24
    164a:	c7 01       	movw	r24, r14
    164c:	b6 01       	movw	r22, r12
    164e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    1652:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>

			if (TCNT1_value == OCR1A)
    1656:	8a b5       	in	r24, 0x2a	; 42
    1658:	9b b5       	in	r25, 0x2b	; 43
    165a:	86 17       	cp	r24, r22
    165c:	97 07       	cpc	r25, r23
    165e:	11 f4       	brne	.+4      	; 0x1664 <TIMER1_Set_INT_Time_ms+0xe4>
			{
				TCNT1_value = 0;
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	70 e0       	ldi	r23, 0x00	; 0
			}

			TCNT1 = TCNT1_value;
    1664:	7d bd       	out	0x2d, r23	; 45
    1666:	6c bd       	out	0x2c, r22	; 44

			if (CountsNumber > (int)CountsNumber)
    1668:	8c 2f       	mov	r24, r28
    166a:	9d 2f       	mov	r25, r29
    166c:	a1 2f       	mov	r26, r17
    166e:	b0 2f       	mov	r27, r16
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 03 14 	call	0x2806	; 0x2806 <__fixsfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	7c 01       	movw	r14, r24
    167e:	b7 01       	movw	r22, r14
    1680:	88 27       	eor	r24, r24
    1682:	77 fd       	sbrc	r23, 7
    1684:	80 95       	com	r24
    1686:	98 2f       	mov	r25, r24
    1688:	0e 94 36 14 	call	0x286c	; 0x286c <__floatsisf>
    168c:	51 2f       	mov	r21, r17
    168e:	40 2f       	mov	r20, r16
    1690:	0c 2f       	mov	r16, r28
    1692:	1d 2f       	mov	r17, r29
    1694:	25 2f       	mov	r18, r21
    1696:	34 2f       	mov	r19, r20
    1698:	a9 01       	movw	r20, r18
    169a:	98 01       	movw	r18, r16
    169c:	0e 94 97 13 	call	0x272e	; 0x272e <__cmpsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	74 f4       	brge	.+28     	; 0x16c0 <TIMER1_Set_INT_Time_ms+0x140>
			{
				CountsNumber = (int)CountsNumber + 1;
    16a4:	08 94       	sec
    16a6:	e1 1c       	adc	r14, r1
    16a8:	f1 1c       	adc	r15, r1
    16aa:	b7 01       	movw	r22, r14
    16ac:	88 27       	eor	r24, r24
    16ae:	77 fd       	sbrc	r23, 7
    16b0:	80 95       	com	r24
    16b2:	98 2f       	mov	r25, r24
    16b4:	0e 94 36 14 	call	0x286c	; 0x286c <__floatsisf>
    16b8:	b6 2e       	mov	r11, r22
    16ba:	a7 2e       	mov	r10, r23
    16bc:	98 2e       	mov	r9, r24
    16be:	89 2e       	mov	r8, r25
			}
			return CountsNumber;
    16c0:	8b 2d       	mov	r24, r11
    16c2:	9a 2d       	mov	r25, r10
    16c4:	a9 2d       	mov	r26, r9
    16c6:	b8 2d       	mov	r27, r8
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
			}
			return CountsNumber;

	#endif

}
    16d0:	86 2f       	mov	r24, r22
    16d2:	97 2f       	mov	r25, r23
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	1f 91       	pop	r17
    16da:	0f 91       	pop	r16
    16dc:	ff 90       	pop	r15
    16de:	ef 90       	pop	r14
    16e0:	df 90       	pop	r13
    16e2:	cf 90       	pop	r12
    16e4:	bf 90       	pop	r11
    16e6:	af 90       	pop	r10
    16e8:	9f 90       	pop	r9
    16ea:	8f 90       	pop	r8
    16ec:	7f 90       	pop	r7
    16ee:	6f 90       	pop	r6
    16f0:	08 95       	ret

000016f2 <TIMER1_SetCallback>:
void TIMER1_SetCallback( void (*CopyFuncPtr)(void) , uint8 TIMER1_interrupt_label )
{
	/* Set Call Back Function for the Specified TIMER1 Interrupt */

	/* Check that the Pointer is Valid */
	if( CopyFuncPtr != NULL && TIMER1_interrupt_label < 4)
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	51 f0       	breq	.+20     	; 0x170a <TIMER1_SetCallback+0x18>
    16f6:	64 30       	cpi	r22, 0x04	; 4
    16f8:	40 f4       	brcc	.+16     	; 0x170a <TIMER1_SetCallback+0x18>
	{
		/* Copy the Function Pointer */
		TIMER1_CallBack[TIMER1_interrupt_label] = CopyFuncPtr;
    16fa:	e6 2f       	mov	r30, r22
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	ee 0f       	add	r30, r30
    1700:	ff 1f       	adc	r31, r31
    1702:	e0 5d       	subi	r30, 0xD0	; 208
    1704:	fe 4f       	sbci	r31, 0xFE	; 254
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	80 83       	st	Z, r24
    170a:	08 95       	ret

0000170c <ICU_GetICUvalue>:

/*___________________________________________________________________________________________________*/
uint16 ICU_GetICUvalue( void )
{
	/* Return the Value of the ICR1 Register */
	return ICR1;
    170c:	86 b5       	in	r24, 0x26	; 38
    170e:	97 b5       	in	r25, 0x27	; 39
}
    1710:	08 95       	ret

00001712 <ICU_ClearFlag>:

/*___________________________________________________________________________________________________*/
void ICU_ClearFlag( void )
{
	/* Clear Input Capture Unit Flag */
	TIFR = (1 << ICF1);
    1712:	80 e2       	ldi	r24, 0x20	; 32
    1714:	88 bf       	out	0x38, r24	; 56
}
    1716:	08 95       	ret

00001718 <ICU_GetFlag>:

/*___________________________________________________________________________________________________*/
uint8 ICU_GetFlag( void )
{
	/* Return Input Capture Unit Flag Value */
	return (TIFR & (1 << ICF1));
    1718:	88 b7       	in	r24, 0x38	; 56
}
    171a:	80 72       	andi	r24, 0x20	; 32
    171c:	08 95       	ret

0000171e <__vector_9>:


/*___________________________________________________________________________________________________*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	2f 93       	push	r18
    172a:	3f 93       	push	r19
    172c:	4f 93       	push	r20
    172e:	5f 93       	push	r21
    1730:	6f 93       	push	r22
    1732:	7f 93       	push	r23
    1734:	8f 93       	push	r24
    1736:	9f 93       	push	r25
    1738:	af 93       	push	r26
    173a:	bf 93       	push	r27
    173c:	ef 93       	push	r30
    173e:	ff 93       	push	r31
	/* ISR for Timer1 Overflow (OVF) Interrupt */

	/* Check that the Pointer is Valid */
	if(TIMER1_CallBack[0] != NULL )
    1740:	e0 91 30 01 	lds	r30, 0x0130
    1744:	f0 91 31 01 	lds	r31, 0x0131
    1748:	30 97       	sbiw	r30, 0x00	; 0
    174a:	09 f0       	breq	.+2      	; 0x174e <__vector_9+0x30>
	{
		/* Call The Global Pointer to Function */
		TIMER1_CallBack[0]();
    174c:	09 95       	icall
	#if		TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_NORMAL_MODE	&&	\
			TIMER1_COUNT_MODE == TIMER1_COUNT_ENABLE

		TIMER1_Counter++;
	#endif
}
    174e:	ff 91       	pop	r31
    1750:	ef 91       	pop	r30
    1752:	bf 91       	pop	r27
    1754:	af 91       	pop	r26
    1756:	9f 91       	pop	r25
    1758:	8f 91       	pop	r24
    175a:	7f 91       	pop	r23
    175c:	6f 91       	pop	r22
    175e:	5f 91       	pop	r21
    1760:	4f 91       	pop	r20
    1762:	3f 91       	pop	r19
    1764:	2f 91       	pop	r18
    1766:	0f 90       	pop	r0
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	0f 90       	pop	r0
    176c:	1f 90       	pop	r1
    176e:	18 95       	reti

00001770 <__vector_7>:


/*___________________________________________________________________________________________________*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    1770:	1f 92       	push	r1
    1772:	0f 92       	push	r0
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	0f 92       	push	r0
    1778:	11 24       	eor	r1, r1
    177a:	2f 93       	push	r18
    177c:	3f 93       	push	r19
    177e:	4f 93       	push	r20
    1780:	5f 93       	push	r21
    1782:	6f 93       	push	r22
    1784:	7f 93       	push	r23
    1786:	8f 93       	push	r24
    1788:	9f 93       	push	r25
    178a:	af 93       	push	r26
    178c:	bf 93       	push	r27
    178e:	ef 93       	push	r30
    1790:	ff 93       	push	r31
	/* ISR for Timer1 Compare Match A (COMPA) Interrupt */

	/* Check that the Pointer is Valid */
	if(TIMER1_CallBack[1] != NULL )
    1792:	e0 91 32 01 	lds	r30, 0x0132
    1796:	f0 91 33 01 	lds	r31, 0x0133
    179a:	30 97       	sbiw	r30, 0x00	; 0
    179c:	09 f0       	breq	.+2      	; 0x17a0 <__vector_7+0x30>
	{
		/* Call The Global Pointer to Function */
		TIMER1_CallBack[1]();
    179e:	09 95       	icall
	#if		TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_CTC_OCR1A_MODE	&&	\
			TIMER1_COUNT_MODE == TIMER1_COUNT_ENABLE

		TIMER1_Counter++;
	#endif
}
    17a0:	ff 91       	pop	r31
    17a2:	ef 91       	pop	r30
    17a4:	bf 91       	pop	r27
    17a6:	af 91       	pop	r26
    17a8:	9f 91       	pop	r25
    17aa:	8f 91       	pop	r24
    17ac:	7f 91       	pop	r23
    17ae:	6f 91       	pop	r22
    17b0:	5f 91       	pop	r21
    17b2:	4f 91       	pop	r20
    17b4:	3f 91       	pop	r19
    17b6:	2f 91       	pop	r18
    17b8:	0f 90       	pop	r0
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	0f 90       	pop	r0
    17be:	1f 90       	pop	r1
    17c0:	18 95       	reti

000017c2 <__vector_8>:


/*___________________________________________________________________________________________________*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    17c2:	1f 92       	push	r1
    17c4:	0f 92       	push	r0
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	0f 92       	push	r0
    17ca:	11 24       	eor	r1, r1
    17cc:	2f 93       	push	r18
    17ce:	3f 93       	push	r19
    17d0:	4f 93       	push	r20
    17d2:	5f 93       	push	r21
    17d4:	6f 93       	push	r22
    17d6:	7f 93       	push	r23
    17d8:	8f 93       	push	r24
    17da:	9f 93       	push	r25
    17dc:	af 93       	push	r26
    17de:	bf 93       	push	r27
    17e0:	ef 93       	push	r30
    17e2:	ff 93       	push	r31
	/* ISR for Timer1 Compare Match B (COMPB) Interrupt */

	/* Check that the Pointer is Valid */
	if(TIMER1_CallBack[2] != NULL )
    17e4:	e0 91 34 01 	lds	r30, 0x0134
    17e8:	f0 91 35 01 	lds	r31, 0x0135
    17ec:	30 97       	sbiw	r30, 0x00	; 0
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <__vector_8+0x30>
	{
		/* Call The Global Pointer to Function */
		TIMER1_CallBack[2]();
    17f0:	09 95       	icall
	}
}
    17f2:	ff 91       	pop	r31
    17f4:	ef 91       	pop	r30
    17f6:	bf 91       	pop	r27
    17f8:	af 91       	pop	r26
    17fa:	9f 91       	pop	r25
    17fc:	8f 91       	pop	r24
    17fe:	7f 91       	pop	r23
    1800:	6f 91       	pop	r22
    1802:	5f 91       	pop	r21
    1804:	4f 91       	pop	r20
    1806:	3f 91       	pop	r19
    1808:	2f 91       	pop	r18
    180a:	0f 90       	pop	r0
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	0f 90       	pop	r0
    1810:	1f 90       	pop	r1
    1812:	18 95       	reti

00001814 <__vector_6>:


/*___________________________________________________________________________________________________*/
void __vector_6 (void)		__attribute__ ((signal)) ;
void __vector_6 (void)
{
    1814:	1f 92       	push	r1
    1816:	0f 92       	push	r0
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	0f 92       	push	r0
    181c:	11 24       	eor	r1, r1
    181e:	2f 93       	push	r18
    1820:	3f 93       	push	r19
    1822:	4f 93       	push	r20
    1824:	5f 93       	push	r21
    1826:	6f 93       	push	r22
    1828:	7f 93       	push	r23
    182a:	8f 93       	push	r24
    182c:	9f 93       	push	r25
    182e:	af 93       	push	r26
    1830:	bf 93       	push	r27
    1832:	ef 93       	push	r30
    1834:	ff 93       	push	r31

	/* ISR for Timer1 Capture Event (CAPT) Interrupt */

	/* Check that the Pointer is Valid */
	if(TIMER1_CallBack[3] != NULL )
    1836:	e0 91 36 01 	lds	r30, 0x0136
    183a:	f0 91 37 01 	lds	r31, 0x0137
    183e:	30 97       	sbiw	r30, 0x00	; 0
    1840:	09 f0       	breq	.+2      	; 0x1844 <__vector_6+0x30>
	{
		/* Call The Global Pointer to Function */
		TIMER1_CallBack[3]();
    1842:	09 95       	icall
	#if		TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_CTC_ICR1_MODE	&&	\
			TIMER1_COUNT_MODE == TIMER1_COUNT_ENABLE

		TIMER1_Counter++;
	#endif
}
    1844:	ff 91       	pop	r31
    1846:	ef 91       	pop	r30
    1848:	bf 91       	pop	r27
    184a:	af 91       	pop	r26
    184c:	9f 91       	pop	r25
    184e:	8f 91       	pop	r24
    1850:	7f 91       	pop	r23
    1852:	6f 91       	pop	r22
    1854:	5f 91       	pop	r21
    1856:	4f 91       	pop	r20
    1858:	3f 91       	pop	r19
    185a:	2f 91       	pop	r18
    185c:	0f 90       	pop	r0
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	0f 90       	pop	r0
    1862:	1f 90       	pop	r1
    1864:	18 95       	reti

00001866 <TIMER2_Init>:
    1866:	85 b5       	in	r24, 0x25	; 37
    1868:	88 60       	ori	r24, 0x08	; 8
    186a:	85 bd       	out	0x25, r24	; 37
    186c:	85 b5       	in	r24, 0x25	; 37
    186e:	80 64       	ori	r24, 0x40	; 64
    1870:	85 bd       	out	0x25, r24	; 37
    1872:	85 b5       	in	r24, 0x25	; 37
    1874:	80 62       	ori	r24, 0x20	; 32
    1876:	85 bd       	out	0x25, r24	; 37
    1878:	85 b5       	in	r24, 0x25	; 37
    187a:	8f 7e       	andi	r24, 0xEF	; 239
    187c:	85 bd       	out	0x25, r24	; 37
    187e:	8f 9a       	sbi	0x11, 7	; 17
    1880:	13 bc       	out	0x23, r1	; 35
    1882:	85 b5       	in	r24, 0x25	; 37
    1884:	88 7f       	andi	r24, 0xF8	; 248
    1886:	85 bd       	out	0x25, r24	; 37
    1888:	85 b5       	in	r24, 0x25	; 37
    188a:	86 60       	ori	r24, 0x06	; 6
    188c:	85 bd       	out	0x25, r24	; 37
    188e:	08 95       	ret

00001890 <TIMER2_SetCompareValue>:
    1890:	83 bd       	out	0x23, r24	; 35
    1892:	08 95       	ret

00001894 <TIMER2_SetTimerValue>:
    1894:	84 bd       	out	0x24, r24	; 36
    1896:	08 95       	ret

00001898 <TIMER2_GetTimerValue>:
    1898:	84 b5       	in	r24, 0x24	; 36
    189a:	08 95       	ret

0000189c <TIMER2_OVF_InterruptDisable>:
    189c:	89 b7       	in	r24, 0x39	; 57
    189e:	8f 7b       	andi	r24, 0xBF	; 191
    18a0:	89 bf       	out	0x39, r24	; 57
    18a2:	08 95       	ret

000018a4 <TIMER2_OVF_InterruptEnable>:
    18a4:	89 b7       	in	r24, 0x39	; 57
    18a6:	80 64       	ori	r24, 0x40	; 64
    18a8:	89 bf       	out	0x39, r24	; 57
    18aa:	08 95       	ret

000018ac <TIMER2_COMP_InterruptDisable>:
    18ac:	89 b7       	in	r24, 0x39	; 57
    18ae:	8f 77       	andi	r24, 0x7F	; 127
    18b0:	89 bf       	out	0x39, r24	; 57
    18b2:	08 95       	ret

000018b4 <TIMER2_COMP_InterruptEnable>:
    18b4:	89 b7       	in	r24, 0x39	; 57
    18b6:	80 68       	ori	r24, 0x80	; 128
    18b8:	89 bf       	out	0x39, r24	; 57
    18ba:	08 95       	ret

000018bc <TIMER2_SetPWMDutyCycle>:
    18bc:	83 bd       	out	0x23, r24	; 35
    18be:	08 95       	ret

000018c0 <TIMER2_Set_OVF_Callback>:
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	21 f0       	breq	.+8      	; 0x18cc <TIMER2_Set_OVF_Callback+0xc>
    18c4:	90 93 3d 01 	sts	0x013D, r25
    18c8:	80 93 3c 01 	sts	0x013C, r24
    18cc:	08 95       	ret

000018ce <TIMER2_Set_COMP_Callback>:
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	21 f0       	breq	.+8      	; 0x18da <TIMER2_Set_COMP_Callback+0xc>
    18d2:	90 93 3b 01 	sts	0x013B, r25
    18d6:	80 93 3a 01 	sts	0x013A, r24
    18da:	08 95       	ret

000018dc <__vector_4>:
    18dc:	1f 92       	push	r1
    18de:	0f 92       	push	r0
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	0f 92       	push	r0
    18e4:	11 24       	eor	r1, r1
    18e6:	2f 93       	push	r18
    18e8:	3f 93       	push	r19
    18ea:	4f 93       	push	r20
    18ec:	5f 93       	push	r21
    18ee:	6f 93       	push	r22
    18f0:	7f 93       	push	r23
    18f2:	8f 93       	push	r24
    18f4:	9f 93       	push	r25
    18f6:	af 93       	push	r26
    18f8:	bf 93       	push	r27
    18fa:	ef 93       	push	r30
    18fc:	ff 93       	push	r31
    18fe:	e0 91 3a 01 	lds	r30, 0x013A
    1902:	f0 91 3b 01 	lds	r31, 0x013B
    1906:	30 97       	sbiw	r30, 0x00	; 0
    1908:	09 f0       	breq	.+2      	; 0x190c <__vector_4+0x30>
    190a:	09 95       	icall
    190c:	ff 91       	pop	r31
    190e:	ef 91       	pop	r30
    1910:	bf 91       	pop	r27
    1912:	af 91       	pop	r26
    1914:	9f 91       	pop	r25
    1916:	8f 91       	pop	r24
    1918:	7f 91       	pop	r23
    191a:	6f 91       	pop	r22
    191c:	5f 91       	pop	r21
    191e:	4f 91       	pop	r20
    1920:	3f 91       	pop	r19
    1922:	2f 91       	pop	r18
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <__vector_5>:
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	11 24       	eor	r1, r1
    1938:	2f 93       	push	r18
    193a:	3f 93       	push	r19
    193c:	4f 93       	push	r20
    193e:	5f 93       	push	r21
    1940:	6f 93       	push	r22
    1942:	7f 93       	push	r23
    1944:	8f 93       	push	r24
    1946:	9f 93       	push	r25
    1948:	af 93       	push	r26
    194a:	bf 93       	push	r27
    194c:	ef 93       	push	r30
    194e:	ff 93       	push	r31
    1950:	e0 91 3c 01 	lds	r30, 0x013C
    1954:	f0 91 3d 01 	lds	r31, 0x013D
    1958:	30 97       	sbiw	r30, 0x00	; 0
    195a:	09 f0       	breq	.+2      	; 0x195e <__vector_5+0x30>
    195c:	09 95       	icall
    195e:	ff 91       	pop	r31
    1960:	ef 91       	pop	r30
    1962:	bf 91       	pop	r27
    1964:	af 91       	pop	r26
    1966:	9f 91       	pop	r25
    1968:	8f 91       	pop	r24
    196a:	7f 91       	pop	r23
    196c:	6f 91       	pop	r22
    196e:	5f 91       	pop	r21
    1970:	4f 91       	pop	r20
    1972:	3f 91       	pop	r19
    1974:	2f 91       	pop	r18
    1976:	0f 90       	pop	r0
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	0f 90       	pop	r0
    197c:	1f 90       	pop	r1
    197e:	18 95       	reti

00001980 <UART_Init>:
    1980:	10 bc       	out	0x20, r1	; 32
    1982:	83 e3       	ldi	r24, 0x33	; 51
    1984:	89 b9       	out	0x09, r24	; 9
    1986:	8b b1       	in	r24, 0x0b	; 11
    1988:	83 7e       	andi	r24, 0xE3	; 227
    198a:	8b b9       	out	0x0b, r24	; 11
    198c:	58 98       	cbi	0x0b, 0	; 11
    198e:	59 98       	cbi	0x0b, 1	; 11
    1990:	52 98       	cbi	0x0a, 2	; 10
    1992:	86 e8       	ldi	r24, 0x86	; 134
    1994:	80 bd       	out	0x20, r24	; 32
    1996:	54 9a       	sbi	0x0a, 4	; 10
    1998:	53 98       	cbi	0x0a, 3	; 10
    199a:	57 9a       	sbi	0x0a, 7	; 10
    199c:	8f b7       	in	r24, 0x3f	; 63
    199e:	80 68       	ori	r24, 0x80	; 128
    19a0:	8f bf       	out	0x3f, r24	; 63
    19a2:	56 98       	cbi	0x0a, 6	; 10
    19a4:	55 98       	cbi	0x0a, 5	; 10
    19a6:	08 95       	ret

000019a8 <UART_InterruptDisable>:
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	39 f0       	breq	.+14     	; 0x19ba <UART_InterruptDisable+0x12>
    19ac:	81 30       	cpi	r24, 0x01	; 1
    19ae:	18 f0       	brcs	.+6      	; 0x19b6 <UART_InterruptDisable+0xe>
    19b0:	82 30       	cpi	r24, 0x02	; 2
    19b2:	31 f4       	brne	.+12     	; 0x19c0 <UART_InterruptDisable+0x18>
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <UART_InterruptDisable+0x16>
    19b6:	56 98       	cbi	0x0a, 6	; 10
    19b8:	08 95       	ret
    19ba:	57 98       	cbi	0x0a, 7	; 10
    19bc:	08 95       	ret
    19be:	55 98       	cbi	0x0a, 5	; 10
    19c0:	08 95       	ret

000019c2 <UART_InterruptEnable>:
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	39 f0       	breq	.+14     	; 0x19d4 <UART_InterruptEnable+0x12>
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	18 f0       	brcs	.+6      	; 0x19d0 <UART_InterruptEnable+0xe>
    19ca:	82 30       	cpi	r24, 0x02	; 2
    19cc:	31 f4       	brne	.+12     	; 0x19da <UART_InterruptEnable+0x18>
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <UART_InterruptEnable+0x16>
    19d0:	56 9a       	sbi	0x0a, 6	; 10
    19d2:	08 95       	ret
    19d4:	57 9a       	sbi	0x0a, 7	; 10
    19d6:	08 95       	ret
    19d8:	55 9a       	sbi	0x0a, 5	; 10
    19da:	08 95       	ret

000019dc <UART_readCharacter>:
    19dc:	5f 99       	sbic	0x0b, 7	; 11
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <UART_readCharacter+0x22>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	5f 99       	sbic	0x0b, 7	; 11
    19e8:	06 c0       	rjmp	.+12     	; 0x19f6 <UART_readCharacter+0x1a>
    19ea:	27 e2       	ldi	r18, 0x27	; 39
    19ec:	80 31       	cpi	r24, 0x10	; 16
    19ee:	92 07       	cpc	r25, r18
    19f0:	c9 f7       	brne	.-14     	; 0x19e4 <UART_readCharacter+0x8>
    19f2:	8f e3       	ldi	r24, 0x3F	; 63
    19f4:	08 95       	ret
    19f6:	27 e2       	ldi	r18, 0x27	; 39
    19f8:	80 31       	cpi	r24, 0x10	; 16
    19fa:	92 07       	cpc	r25, r18
    19fc:	11 f0       	breq	.+4      	; 0x1a02 <UART_readCharacter+0x26>
    19fe:	8c b1       	in	r24, 0x0c	; 12
    1a00:	08 95       	ret
    1a02:	8f e3       	ldi	r24, 0x3F	; 63
    1a04:	08 95       	ret

00001a06 <UART_readStringUntilSize>:
    1a06:	ef 92       	push	r14
    1a08:	ff 92       	push	r15
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	eb 01       	movw	r28, r22
    1a14:	20 97       	sbiw	r28, 0x00	; 0
    1a16:	81 f0       	breq	.+32     	; 0x1a38 <UART_readStringUntilSize+0x32>
    1a18:	e8 2e       	mov	r14, r24
    1a1a:	f9 2e       	mov	r15, r25
    1a1c:	00 e0       	ldi	r16, 0x00	; 0
    1a1e:	10 e0       	ldi	r17, 0x00	; 0
    1a20:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <UART_readCharacter>
    1a24:	f7 01       	movw	r30, r14
    1a26:	81 93       	st	Z+, r24
    1a28:	7f 01       	movw	r14, r30
    1a2a:	88 23       	and	r24, r24
    1a2c:	29 f0       	breq	.+10     	; 0x1a38 <UART_readStringUntilSize+0x32>
    1a2e:	0f 5f       	subi	r16, 0xFF	; 255
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	0c 17       	cp	r16, r28
    1a34:	1d 07       	cpc	r17, r29
    1a36:	a1 f7       	brne	.-24     	; 0x1a20 <UART_readStringUntilSize+0x1a>
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	1f 91       	pop	r17
    1a3e:	0f 91       	pop	r16
    1a40:	ff 90       	pop	r15
    1a42:	ef 90       	pop	r14
    1a44:	08 95       	ret

00001a46 <UART_readString>:
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	ec 01       	movw	r28, r24
    1a50:	88 81       	ld	r24, Y
    1a52:	88 23       	and	r24, r24
    1a54:	61 f0       	breq	.+24     	; 0x1a6e <UART_readString+0x28>
    1a56:	8e 01       	movw	r16, r28
    1a58:	0f 5f       	subi	r16, 0xFF	; 255
    1a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5c:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <UART_readCharacter>
    1a60:	88 83       	st	Y, r24
    1a62:	e8 01       	movw	r28, r16
    1a64:	0f 5f       	subi	r16, 0xFF	; 255
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	88 81       	ld	r24, Y
    1a6a:	88 23       	and	r24, r24
    1a6c:	b9 f7       	brne	.-18     	; 0x1a5c <UART_readString+0x16>
    1a6e:	18 82       	st	Y, r1
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	08 95       	ret

00001a7a <UART_available_To_Read>:
    1a7a:	8b b1       	in	r24, 0x0b	; 11
    1a7c:	88 1f       	adc	r24, r24
    1a7e:	88 27       	eor	r24, r24
    1a80:	88 1f       	adc	r24, r24
    1a82:	08 95       	ret

00001a84 <UART_readStringUntil>:
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	8c 01       	movw	r16, r24
    1a8e:	d6 2f       	mov	r29, r22
    1a90:	c0 e0       	ldi	r28, 0x00	; 0
    1a92:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <UART_available_To_Read>
    1a96:	88 23       	and	r24, r24
    1a98:	e1 f3       	breq	.-8      	; 0x1a92 <UART_readStringUntil+0xe>
    1a9a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <UART_readCharacter>
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	ec 0f       	add	r30, r28
    1aa2:	f1 1d       	adc	r31, r1
    1aa4:	80 83       	st	Z, r24
    1aa6:	88 23       	and	r24, r24
    1aa8:	19 f0       	breq	.+6      	; 0x1ab0 <UART_readStringUntil+0x2c>
    1aaa:	8d 17       	cp	r24, r29
    1aac:	29 f4       	brne	.+10     	; 0x1ab8 <UART_readStringUntil+0x34>
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <UART_readStringUntil+0x30>
    1ab0:	8d 17       	cp	r24, r29
    1ab2:	21 f4       	brne	.+8      	; 0x1abc <UART_readStringUntil+0x38>
    1ab4:	10 82       	st	Z, r1
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <UART_readStringUntil+0x38>
    1ab8:	cf 5f       	subi	r28, 0xFF	; 255
    1aba:	eb cf       	rjmp	.-42     	; 0x1a92 <UART_readStringUntil+0xe>
    1abc:	df 91       	pop	r29
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	08 95       	ret

00001ac6 <UART_CheckErrors>:
    1ac6:	8b b1       	in	r24, 0x0b	; 11
    1ac8:	8c 71       	andi	r24, 0x1C	; 28
    1aca:	08 95       	ret

00001acc <UART_Set_RX_Callback>:
    1acc:	61 15       	cp	r22, r1
    1ace:	71 05       	cpc	r23, r1
    1ad0:	89 f0       	breq	.+34     	; 0x1af4 <UART_Set_RX_Callback+0x28>
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	79 f0       	breq	.+30     	; 0x1af4 <UART_Set_RX_Callback+0x28>
    1ad6:	90 93 3f 01 	sts	0x013F, r25
    1ada:	80 93 3e 01 	sts	0x013E, r24
    1ade:	70 93 41 01 	sts	0x0141, r23
    1ae2:	60 93 40 01 	sts	0x0140, r22
    1ae6:	40 93 77 04 	sts	0x0477, r20
    1aea:	20 93 76 04 	sts	0x0476, r18
    1aee:	10 92 78 04 	sts	0x0478, r1
    1af2:	08 95       	ret
    1af4:	57 98       	cbi	0x0a, 7	; 10
    1af6:	08 95       	ret

00001af8 <__vector_13>:
    1af8:	1f 92       	push	r1
    1afa:	0f 92       	push	r0
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	0f 92       	push	r0
    1b00:	11 24       	eor	r1, r1
    1b02:	2f 93       	push	r18
    1b04:	3f 93       	push	r19
    1b06:	4f 93       	push	r20
    1b08:	5f 93       	push	r21
    1b0a:	6f 93       	push	r22
    1b0c:	7f 93       	push	r23
    1b0e:	8f 93       	push	r24
    1b10:	9f 93       	push	r25
    1b12:	af 93       	push	r26
    1b14:	bf 93       	push	r27
    1b16:	ef 93       	push	r30
    1b18:	ff 93       	push	r31
    1b1a:	9c b1       	in	r25, 0x0c	; 12
    1b1c:	80 91 78 04 	lds	r24, 0x0478
    1b20:	e0 91 40 01 	lds	r30, 0x0140
    1b24:	f0 91 41 01 	lds	r31, 0x0141
    1b28:	e8 0f       	add	r30, r24
    1b2a:	f1 1d       	adc	r31, r1
    1b2c:	90 83       	st	Z, r25
    1b2e:	80 91 78 04 	lds	r24, 0x0478
    1b32:	8f 5f       	subi	r24, 0xFF	; 255
    1b34:	80 93 78 04 	sts	0x0478, r24
    1b38:	20 91 77 04 	lds	r18, 0x0477
    1b3c:	82 17       	cp	r24, r18
    1b3e:	30 f4       	brcc	.+12     	; 0x1b4c <__vector_13+0x54>
    1b40:	99 23       	and	r25, r25
    1b42:	81 f0       	breq	.+32     	; 0x1b64 <__vector_13+0x6c>
    1b44:	30 91 76 04 	lds	r19, 0x0476
    1b48:	93 17       	cp	r25, r19
    1b4a:	a9 f4       	brne	.+42     	; 0x1b76 <__vector_13+0x7e>
    1b4c:	99 23       	and	r25, r25
    1b4e:	51 f0       	breq	.+20     	; 0x1b64 <__vector_13+0x6c>
    1b50:	82 17       	cp	r24, r18
    1b52:	40 f4       	brcc	.+16     	; 0x1b64 <__vector_13+0x6c>
    1b54:	e0 91 40 01 	lds	r30, 0x0140
    1b58:	f0 91 41 01 	lds	r31, 0x0141
    1b5c:	e8 0f       	add	r30, r24
    1b5e:	f1 1d       	adc	r31, r1
    1b60:	31 97       	sbiw	r30, 0x01	; 1
    1b62:	10 82       	st	Z, r1
    1b64:	10 92 78 04 	sts	0x0478, r1
    1b68:	e0 91 3e 01 	lds	r30, 0x013E
    1b6c:	f0 91 3f 01 	lds	r31, 0x013F
    1b70:	30 97       	sbiw	r30, 0x00	; 0
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <__vector_13+0x7e>
    1b74:	09 95       	icall
    1b76:	ff 91       	pop	r31
    1b78:	ef 91       	pop	r30
    1b7a:	bf 91       	pop	r27
    1b7c:	af 91       	pop	r26
    1b7e:	9f 91       	pop	r25
    1b80:	8f 91       	pop	r24
    1b82:	7f 91       	pop	r23
    1b84:	6f 91       	pop	r22
    1b86:	5f 91       	pop	r21
    1b88:	4f 91       	pop	r20
    1b8a:	3f 91       	pop	r19
    1b8c:	2f 91       	pop	r18
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <UARt_func>:

uint8 flag = 0;

void UARt_func()
{
	command = str[0];
    1b98:	80 91 f8 00 	lds	r24, 0x00F8
    1b9c:	80 93 1a 01 	sts	0x011A, r24
	CAR_STATUS = 1;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	80 93 43 01 	sts	0x0143, r24

}
    1ba6:	08 95       	ret

00001ba8 <TIMER0_fun>:
}


void TIMER0_fun()
{
	counter++;
    1ba8:	80 91 44 01 	lds	r24, 0x0144
    1bac:	90 91 45 01 	lds	r25, 0x0145
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	90 93 45 01 	sts	0x0145, r25
    1bb6:	80 93 44 01 	sts	0x0144, r24
	if(counter >= countsNumber)
    1bba:	20 91 44 01 	lds	r18, 0x0144
    1bbe:	30 91 45 01 	lds	r19, 0x0145
    1bc2:	80 91 46 01 	lds	r24, 0x0146
    1bc6:	90 91 47 01 	lds	r25, 0x0147
    1bca:	28 17       	cp	r18, r24
    1bcc:	39 07       	cpc	r19, r25
    1bce:	30 f0       	brcs	.+12     	; 0x1bdc <TIMER0_fun+0x34>
	{
		counter = 0;
    1bd0:	10 92 45 01 	sts	0x0145, r1
    1bd4:	10 92 44 01 	sts	0x0144, r1
		receive_data();
    1bd8:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <receive_data>
    1bdc:	08 95       	ret

00001bde <UART_LCD_func>:
	CAR_STATUS = 1;

}

void UART_LCD_func()
{
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
	LCD_displayString(str);
    1be2:	c8 ef       	ldi	r28, 0xF8	; 248
    1be4:	d0 e0       	ldi	r29, 0x00	; 0
    1be6:	ce 01       	movw	r24, r28
    1be8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
	UART_Set_RX_Callback(&UARt_func,str,1,UART_STOPCHAR);
    1bec:	8c ec       	ldi	r24, 0xCC	; 204
    1bee:	9d e0       	ldi	r25, 0x0D	; 13
    1bf0:	be 01       	movw	r22, r28
    1bf2:	41 e0       	ldi	r20, 0x01	; 1
    1bf4:	2a e3       	ldi	r18, 0x3A	; 58
    1bf6:	0e 94 66 0d 	call	0x1acc	; 0x1acc <UART_Set_RX_Callback>
	CAR_STATUS = 1;
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	80 93 43 01 	sts	0x0143, r24
}
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <TIMER0_OVF_fun>:
	}
}


void TIMER0_OVF_fun()
{
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
	counter++;
    1c0a:	80 91 44 01 	lds	r24, 0x0144
    1c0e:	90 91 45 01 	lds	r25, 0x0145
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	90 93 45 01 	sts	0x0145, r25
    1c18:	80 93 44 01 	sts	0x0144, r24
	if(counter >= countsNumber)
    1c1c:	20 91 44 01 	lds	r18, 0x0144
    1c20:	30 91 45 01 	lds	r19, 0x0145
    1c24:	80 91 46 01 	lds	r24, 0x0146
    1c28:	90 91 47 01 	lds	r25, 0x0147
    1c2c:	28 17       	cp	r18, r24
    1c2e:	39 07       	cpc	r19, r25
    1c30:	08 f4       	brcc	.+2      	; 0x1c34 <TIMER0_OVF_fun+0x2e>
    1c32:	78 c0       	rjmp	.+240    	; 0x1d24 <TIMER0_OVF_fun+0x11e>
	{
		counter = 0;
    1c34:	10 92 45 01 	sts	0x0145, r1
    1c38:	10 92 44 01 	sts	0x0144, r1

		if(CAR_STATUS == 0 && MODE != SKIP)
    1c3c:	80 91 43 01 	lds	r24, 0x0143
    1c40:	88 23       	and	r24, r24
    1c42:	09 f0       	breq	.+2      	; 0x1c46 <TIMER0_OVF_fun+0x40>
    1c44:	65 c0       	rjmp	.+202    	; 0x1d10 <TIMER0_OVF_fun+0x10a>
    1c46:	80 91 1c 01 	lds	r24, 0x011C
    1c4a:	8c 33       	cpi	r24, 0x3C	; 60
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <TIMER0_OVF_fun+0x4a>
    1c4e:	64 c0       	rjmp	.+200    	; 0x1d18 <TIMER0_OVF_fun+0x112>
		{
			flag = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	80 93 42 01 	sts	0x0142, r24
			arr[INDEX].time = TIMER0_GetTime_ms()/10;
    1c56:	c0 91 48 01 	lds	r28, 0x0148
    1c5a:	d0 e0       	ldi	r29, 0x00	; 0
    1c5c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TIMER0_GetTime_ms>
    1c60:	cc 0f       	add	r28, r28
    1c62:	dd 1f       	adc	r29, r29
    1c64:	cc 0f       	add	r28, r28
    1c66:	dd 1f       	adc	r29, r29
    1c68:	c7 5b       	subi	r28, 0xB7	; 183
    1c6a:	de 4f       	sbci	r29, 0xFE	; 254
    1c6c:	2a e0       	ldi	r18, 0x0A	; 10
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e0       	ldi	r20, 0x00	; 0
    1c72:	50 e0       	ldi	r21, 0x00	; 0
    1c74:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__udivmodsi4>
    1c78:	92 2f       	mov	r25, r18
    1c7a:	92 95       	swap	r25
    1c7c:	99 0f       	add	r25, r25
    1c7e:	99 0f       	add	r25, r25
    1c80:	90 7c       	andi	r25, 0xC0	; 192
    1c82:	88 81       	ld	r24, Y
    1c84:	8f 73       	andi	r24, 0x3F	; 63
    1c86:	89 2b       	or	r24, r25
    1c88:	88 83       	st	Y, r24
    1c8a:	83 2f       	mov	r24, r19
    1c8c:	82 95       	swap	r24
    1c8e:	88 0f       	add	r24, r24
    1c90:	88 0f       	add	r24, r24
    1c92:	80 7c       	andi	r24, 0xC0	; 192
    1c94:	26 95       	lsr	r18
    1c96:	26 95       	lsr	r18
    1c98:	28 2b       	or	r18, r24
    1c9a:	29 83       	std	Y+1, r18	; 0x01
    1c9c:	84 2f       	mov	r24, r20
    1c9e:	82 95       	swap	r24
    1ca0:	88 0f       	add	r24, r24
    1ca2:	88 0f       	add	r24, r24
    1ca4:	80 7c       	andi	r24, 0xC0	; 192
    1ca6:	36 95       	lsr	r19
    1ca8:	36 95       	lsr	r19
    1caa:	38 2b       	or	r19, r24
    1cac:	3a 83       	std	Y+2, r19	; 0x02
    1cae:	52 95       	swap	r21
    1cb0:	55 0f       	add	r21, r21
    1cb2:	55 0f       	add	r21, r21
    1cb4:	50 7c       	andi	r21, 0xC0	; 192
    1cb6:	46 95       	lsr	r20
    1cb8:	46 95       	lsr	r20
    1cba:	45 2b       	or	r20, r21
    1cbc:	4b 83       	std	Y+3, r20	; 0x03
			TIMER0_RESET();
    1cbe:	0e 94 0b 09 	call	0x1216	; 0x1216 <TIMER0_RESET>
			DC_MOTOR_STOP(MOTOR_1,MOTOR_2);
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DC_MOTOR_STOP>
			arr[INDEX].mode = MODE;
    1cca:	80 91 48 01 	lds	r24, 0x0148
    1cce:	e8 2f       	mov	r30, r24
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	ee 0f       	add	r30, r30
    1cd4:	ff 1f       	adc	r31, r31
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	e7 5b       	subi	r30, 0xB7	; 183
    1cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cde:	30 91 1c 01 	lds	r19, 0x011C
    1ce2:	37 70       	andi	r19, 0x07	; 7
    1ce4:	90 81       	ld	r25, Z
    1ce6:	90 7c       	andi	r25, 0xC0	; 192
			arr[INDEX].gear = gear;
    1ce8:	20 91 1b 01 	lds	r18, 0x011B
    1cec:	27 70       	andi	r18, 0x07	; 7
    1cee:	22 0f       	add	r18, r18
    1cf0:	22 0f       	add	r18, r18
    1cf2:	22 0f       	add	r18, r18
    1cf4:	93 2b       	or	r25, r19
    1cf6:	92 2b       	or	r25, r18
    1cf8:	90 83       	st	Z, r25

			INDEX++;
    1cfa:	8f 5f       	subi	r24, 0xFF	; 255
    1cfc:	80 93 48 01 	sts	0x0148, r24

			TIMER0_Set_OVF_Callback(&TIMER0_fun);
    1d00:	84 ed       	ldi	r24, 0xD4	; 212
    1d02:	9d e0       	ldi	r25, 0x0D	; 13
    1d04:	0e 94 93 09 	call	0x1326	; 0x1326 <TIMER0_Set_OVF_Callback>
			TIMER0_SetTimerValue(255);
    1d08:	8f ef       	ldi	r24, 0xFF	; 255
    1d0a:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TIMER0_SetTimerValue>
    1d0e:	0a c0       	rjmp	.+20     	; 0x1d24 <TIMER0_OVF_fun+0x11e>
		}
		else if(MODE == SKIP)
    1d10:	80 91 1c 01 	lds	r24, 0x011C
    1d14:	8c 33       	cpi	r24, 0x3C	; 60
    1d16:	21 f4       	brne	.+8      	; 0x1d20 <TIMER0_OVF_fun+0x11a>
		{
			CAR_STATUS = 1;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	80 93 43 01 	sts	0x0143, r24
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <TIMER0_OVF_fun+0x11e>
		}
		else
		{
			CAR_STATUS = 0;
    1d20:	10 92 43 01 	sts	0x0143, r1
		}


	}
}
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	08 95       	ret

00001d2a <receive_data>:

void receive_data()
{
	if(INDEX != 0)
    1d2a:	e0 91 48 01 	lds	r30, 0x0148
    1d2e:	ee 23       	and	r30, r30
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <receive_data+0xa>
    1d32:	6a c0       	rjmp	.+212    	; 0x1e08 <receive_data+0xde>
	{
		INDEX--;
    1d34:	e1 50       	subi	r30, 0x01	; 1
    1d36:	e0 93 48 01 	sts	0x0148, r30
		if(MODE != SKIP)
    1d3a:	80 91 1c 01 	lds	r24, 0x011C
    1d3e:	8c 33       	cpi	r24, 0x3C	; 60
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <receive_data+0x1a>
    1d42:	81 c0       	rjmp	.+258    	; 0x1e46 <receive_data+0x11c>
		{
			TIMER2_SetPWMDutyCycle(42.5*arr[INDEX].gear);
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	ee 0f       	add	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	e7 5b       	subi	r30, 0xB7	; 183
    1d50:	fe 4f       	sbci	r31, 0xFE	; 254
    1d52:	60 81       	ld	r22, Z
    1d54:	66 95       	lsr	r22
    1d56:	66 95       	lsr	r22
    1d58:	66 95       	lsr	r22
    1d5a:	67 70       	andi	r22, 0x07	; 7
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 36 14 	call	0x286c	; 0x286c <__floatsisf>
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	4a e2       	ldi	r20, 0x2A	; 42
    1d6c:	52 e4       	ldi	r21, 0x42	; 66
    1d6e:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    1d72:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
    1d76:	86 2f       	mov	r24, r22
    1d78:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TIMER2_SetPWMDutyCycle>
			DC_MOTOR_SET_Direction(MOTOR_1,MOTOR_2,arr[INDEX].mode);
    1d7c:	e0 91 48 01 	lds	r30, 0x0148
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	ee 0f       	add	r30, r30
    1d84:	ff 1f       	adc	r31, r31
    1d86:	ee 0f       	add	r30, r30
    1d88:	ff 1f       	adc	r31, r31
    1d8a:	e7 5b       	subi	r30, 0xB7	; 183
    1d8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d8e:	40 81       	ld	r20, Z
    1d90:	47 70       	andi	r20, 0x07	; 7
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	61 e0       	ldi	r22, 0x01	; 1
    1d96:	0e 94 ed 00 	call	0x1da	; 0x1da <DC_MOTOR_SET_Direction>
			countsNumber = TIMER0_Set_INT_Time_ms(arr[INDEX].time*10);
    1d9a:	e0 91 48 01 	lds	r30, 0x0148
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	ee 0f       	add	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	ee 0f       	add	r30, r30
    1da6:	ff 1f       	adc	r31, r31
    1da8:	e7 5b       	subi	r30, 0xB7	; 183
    1daa:	fe 4f       	sbci	r31, 0xFE	; 254
    1dac:	60 81       	ld	r22, Z
    1dae:	62 95       	swap	r22
    1db0:	66 95       	lsr	r22
    1db2:	66 95       	lsr	r22
    1db4:	63 70       	andi	r22, 0x03	; 3
    1db6:	71 81       	ldd	r23, Z+1	; 0x01
    1db8:	87 2f       	mov	r24, r23
    1dba:	88 0f       	add	r24, r24
    1dbc:	88 0f       	add	r24, r24
    1dbe:	68 2b       	or	r22, r24
    1dc0:	72 95       	swap	r23
    1dc2:	76 95       	lsr	r23
    1dc4:	76 95       	lsr	r23
    1dc6:	73 70       	andi	r23, 0x03	; 3
    1dc8:	82 81       	ldd	r24, Z+2	; 0x02
    1dca:	98 2f       	mov	r25, r24
    1dcc:	99 0f       	add	r25, r25
    1dce:	99 0f       	add	r25, r25
    1dd0:	79 2b       	or	r23, r25
    1dd2:	82 95       	swap	r24
    1dd4:	86 95       	lsr	r24
    1dd6:	86 95       	lsr	r24
    1dd8:	83 70       	andi	r24, 0x03	; 3
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	29 2f       	mov	r18, r25
    1dde:	22 0f       	add	r18, r18
    1de0:	22 0f       	add	r18, r18
    1de2:	82 2b       	or	r24, r18
    1de4:	92 95       	swap	r25
    1de6:	96 95       	lsr	r25
    1de8:	96 95       	lsr	r25
    1dea:	93 70       	andi	r25, 0x03	; 3
    1dec:	2a e0       	ldi	r18, 0x0A	; 10
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__mulsi3>
    1df8:	93 70       	andi	r25, 0x03	; 3
    1dfa:	0e 94 11 09 	call	0x1222	; 0x1222 <TIMER0_Set_INT_Time_ms>
    1dfe:	90 93 47 01 	sts	0x0147, r25
    1e02:	80 93 46 01 	sts	0x0146, r24
    1e06:	08 95       	ret

	}
	else
	{

		DC_MOTOR_STOP(MOTOR_1,MOTOR_2);
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DC_MOTOR_STOP>
		command = NOTHING;
    1e10:	80 e3       	ldi	r24, 0x30	; 48
    1e12:	80 93 1a 01 	sts	0x011A, r24
		MODE = SKIP;
    1e16:	8c e3       	ldi	r24, 0x3C	; 60
    1e18:	80 93 1c 01 	sts	0x011C, r24
		flag = 0;
    1e1c:	10 92 42 01 	sts	0x0142, r1
		TIMER0_RESET();
    1e20:	0e 94 0b 09 	call	0x1216	; 0x1216 <TIMER0_RESET>
		CAR_STATUS = 1;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	80 93 43 01 	sts	0x0143, r24
		countsNumber = TIMER0_Set_INT_Time_ms(5000);
    1e2a:	68 e8       	ldi	r22, 0x88	; 136
    1e2c:	73 e1       	ldi	r23, 0x13	; 19
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 11 09 	call	0x1222	; 0x1222 <TIMER0_Set_INT_Time_ms>
    1e36:	90 93 47 01 	sts	0x0147, r25
    1e3a:	80 93 46 01 	sts	0x0146, r24
		TIMER0_Set_OVF_Callback(&TIMER0_OVF_fun);
    1e3e:	83 e0       	ldi	r24, 0x03	; 3
    1e40:	9e e0       	ldi	r25, 0x0E	; 14
    1e42:	0e 94 93 09 	call	0x1326	; 0x1326 <TIMER0_Set_OVF_Callback>
    1e46:	08 95       	ret

00001e48 <save_data>:
	UART_Set_RX_Callback(&UARt_func,str,1,UART_STOPCHAR);
	CAR_STATUS = 1;
}

void save_data()
{
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
	if(MODE != SKIP)
    1e4c:	80 91 1c 01 	lds	r24, 0x011C
    1e50:	8c 33       	cpi	r24, 0x3C	; 60
    1e52:	09 f4       	brne	.+2      	; 0x1e56 <save_data+0xe>
    1e54:	52 c0       	rjmp	.+164    	; 0x1efa <save_data+0xb2>
	{
		arr[INDEX].time = TIMER0_GetTime_ms()/10;
    1e56:	c0 91 48 01 	lds	r28, 0x0148
    1e5a:	d0 e0       	ldi	r29, 0x00	; 0
    1e5c:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TIMER0_GetTime_ms>
    1e60:	cc 0f       	add	r28, r28
    1e62:	dd 1f       	adc	r29, r29
    1e64:	cc 0f       	add	r28, r28
    1e66:	dd 1f       	adc	r29, r29
    1e68:	c7 5b       	subi	r28, 0xB7	; 183
    1e6a:	de 4f       	sbci	r29, 0xFE	; 254
    1e6c:	2a e0       	ldi	r18, 0x0A	; 10
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__udivmodsi4>
    1e78:	92 2f       	mov	r25, r18
    1e7a:	92 95       	swap	r25
    1e7c:	99 0f       	add	r25, r25
    1e7e:	99 0f       	add	r25, r25
    1e80:	90 7c       	andi	r25, 0xC0	; 192
    1e82:	88 81       	ld	r24, Y
    1e84:	8f 73       	andi	r24, 0x3F	; 63
    1e86:	89 2b       	or	r24, r25
    1e88:	88 83       	st	Y, r24
    1e8a:	83 2f       	mov	r24, r19
    1e8c:	82 95       	swap	r24
    1e8e:	88 0f       	add	r24, r24
    1e90:	88 0f       	add	r24, r24
    1e92:	80 7c       	andi	r24, 0xC0	; 192
    1e94:	26 95       	lsr	r18
    1e96:	26 95       	lsr	r18
    1e98:	28 2b       	or	r18, r24
    1e9a:	29 83       	std	Y+1, r18	; 0x01
    1e9c:	84 2f       	mov	r24, r20
    1e9e:	82 95       	swap	r24
    1ea0:	88 0f       	add	r24, r24
    1ea2:	88 0f       	add	r24, r24
    1ea4:	80 7c       	andi	r24, 0xC0	; 192
    1ea6:	36 95       	lsr	r19
    1ea8:	36 95       	lsr	r19
    1eaa:	38 2b       	or	r19, r24
    1eac:	3a 83       	std	Y+2, r19	; 0x02
    1eae:	52 95       	swap	r21
    1eb0:	55 0f       	add	r21, r21
    1eb2:	55 0f       	add	r21, r21
    1eb4:	50 7c       	andi	r21, 0xC0	; 192
    1eb6:	46 95       	lsr	r20
    1eb8:	46 95       	lsr	r20
    1eba:	45 2b       	or	r20, r21
    1ebc:	4b 83       	std	Y+3, r20	; 0x03
		TIMER0_RESET();
    1ebe:	0e 94 0b 09 	call	0x1216	; 0x1216 <TIMER0_RESET>
		arr[INDEX].mode = MODE;
    1ec2:	80 91 48 01 	lds	r24, 0x0148
    1ec6:	e8 2f       	mov	r30, r24
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	e7 5b       	subi	r30, 0xB7	; 183
    1ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ed6:	30 91 1c 01 	lds	r19, 0x011C
    1eda:	37 70       	andi	r19, 0x07	; 7
    1edc:	90 81       	ld	r25, Z
    1ede:	90 7c       	andi	r25, 0xC0	; 192
		arr[INDEX].gear = gear;
    1ee0:	20 91 1b 01 	lds	r18, 0x011B
    1ee4:	27 70       	andi	r18, 0x07	; 7
    1ee6:	22 0f       	add	r18, r18
    1ee8:	22 0f       	add	r18, r18
    1eea:	22 0f       	add	r18, r18
    1eec:	93 2b       	or	r25, r19
    1eee:	92 2b       	or	r25, r18
    1ef0:	90 83       	st	Z, r25

		INDEX++;
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	80 93 48 01 	sts	0x0148, r24
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <save_data+0xb6>
	}
	else
	{
		TIMER0_RESET();
    1efa:	0e 94 0b 09 	call	0x1216	; 0x1216 <TIMER0_RESET>
	}


}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	08 95       	ret

00001f04 <main>:
}


int main()
{
	MCUCSR |=1<<JTD;
    1f04:	84 b7       	in	r24, 0x34	; 52
    1f06:	80 68       	ori	r24, 0x80	; 128
    1f08:	84 bf       	out	0x34, r24	; 52
	MCUCSR |=1<<JTD;
    1f0a:	84 b7       	in	r24, 0x34	; 52
    1f0c:	80 68       	ori	r24, 0x80	; 128
    1f0e:	84 bf       	out	0x34, r24	; 52
	
	char value=NOTPRESSED;
	char i =0;
	
	DC_MOTOR_init( MOTOR_1 , MOTOR_1_PORT , MOTOR_1_PIN1 , MOTOR_1_PIN2 );
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	62 e0       	ldi	r22, 0x02	; 2
    1f14:	40 e0       	ldi	r20, 0x00	; 0
    1f16:	21 e0       	ldi	r18, 0x01	; 1
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <DC_MOTOR_init>

	DC_MOTOR_init( MOTOR_2 , MOTOR_1_PORT , MOTOR_2_PIN1 , MOTOR_2_PIN2 );
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	62 e0       	ldi	r22, 0x02	; 2
    1f20:	42 e0       	ldi	r20, 0x02	; 2
    1f22:	23 e0       	ldi	r18, 0x03	; 3
    1f24:	0e 94 49 00 	call	0x92	; 0x92 <DC_MOTOR_init>

	DIO_setup_Pin_Direction(PORTD_ID,PIN6_ID,OUTPUT);
    1f28:	83 e0       	ldi	r24, 0x03	; 3
    1f2a:	66 e0       	ldi	r22, 0x06	; 6
    1f2c:	41 e0       	ldi	r20, 0x01	; 1
    1f2e:	0e 94 7e 05 	call	0xafc	; 0xafc <DIO_setup_Pin_Direction>


	UART_Init();
    1f32:	0e 94 c0 0c 	call	0x1980	; 0x1980 <UART_Init>

	TIMER2_Init();
    1f36:	0e 94 33 0c 	call	0x1866	; 0x1866 <TIMER2_Init>
    keypad_vInit();
    1f3a:	0e 94 be 01 	call	0x37c	; 0x37c <keypad_vInit>
	TIMER0_Init();
    1f3e:	0e 94 be 08 	call	0x117c	; 0x117c <TIMER0_Init>

	LCD_init();
    1f42:	0e 94 c1 02 	call	0x582	; 0x582 <LCD_init>
	LCD_CursorON();
    1f46:	0e 94 ff 03 	call	0x7fe	; 0x7fe <LCD_CursorON>
	LCD_setCursor(0,5);
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	65 e0       	ldi	r22, 0x05	; 5
    1f4e:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_setCursor>
	LCD_displayString("HELLO!");
    1f52:	80 e7       	ldi	r24, 0x70	; 112
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f5a:	8f ef       	ldi	r24, 0xFF	; 255
    1f5c:	99 e6       	ldi	r25, 0x69	; 105
    1f5e:	a8 e1       	ldi	r26, 0x18	; 24
    1f60:	81 50       	subi	r24, 0x01	; 1
    1f62:	90 40       	sbci	r25, 0x00	; 0
    1f64:	a0 40       	sbci	r26, 0x00	; 0
    1f66:	e1 f7       	brne	.-8      	; 0x1f60 <main+0x5c>
    1f68:	00 c0       	rjmp	.+0      	; 0x1f6a <main+0x66>
    1f6a:	00 00       	nop
	_delay_ms(1000);
	LCD_clearScreen();
    1f6c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>

	TIMER1_Init();
    1f70:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <TIMER1_Init>

	Servo_motor_degree(-90);
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	70 e0       	ldi	r23, 0x00	; 0
    1f78:	84 eb       	ldi	r24, 0xB4	; 180
    1f7a:	92 ec       	ldi	r25, 0xC2	; 194
    1f7c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Servo_motor_degree>
    1f80:	8f ef       	ldi	r24, 0xFF	; 255
    1f82:	94 e3       	ldi	r25, 0x34	; 52
    1f84:	ac e0       	ldi	r26, 0x0C	; 12
    1f86:	81 50       	subi	r24, 0x01	; 1
    1f88:	90 40       	sbci	r25, 0x00	; 0
    1f8a:	a0 40       	sbci	r26, 0x00	; 0
    1f8c:	e1 f7       	brne	.-8      	; 0x1f86 <main+0x82>
    1f8e:	00 c0       	rjmp	.+0      	; 0x1f90 <main+0x8c>
    1f90:	00 00       	nop
	_delay_ms(500);
	Servo_motor_degree(90);
    1f92:	60 e0       	ldi	r22, 0x00	; 0
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	84 eb       	ldi	r24, 0xB4	; 180
    1f98:	92 e4       	ldi	r25, 0x42	; 66
    1f9a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Servo_motor_degree>

	TIMER2_SetPWMDutyCycle(42.5*gear);
    1f9e:	60 91 1b 01 	lds	r22, 0x011B
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 36 14 	call	0x286c	; 0x286c <__floatsisf>
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a e2       	ldi	r20, 0x2A	; 42
    1fb2:	52 e4       	ldi	r21, 0x42	; 66
    1fb4:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    1fb8:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
    1fbc:	86 2f       	mov	r24, r22
    1fbe:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TIMER2_SetPWMDutyCycle>

	UART_Set_RX_Callback(&UARt_func,str,1,UART_STOPCHAR);
    1fc2:	8c ec       	ldi	r24, 0xCC	; 204
    1fc4:	9d e0       	ldi	r25, 0x0D	; 13
    1fc6:	68 ef       	ldi	r22, 0xF8	; 248
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	41 e0       	ldi	r20, 0x01	; 1
    1fcc:	2a e3       	ldi	r18, 0x3A	; 58
    1fce:	0e 94 66 0d 	call	0x1acc	; 0x1acc <UART_Set_RX_Callback>

	TIMER0_RESET();
    1fd2:	0e 94 0b 09 	call	0x1216	; 0x1216 <TIMER0_RESET>
	countsNumber = TIMER0_Set_INT_Time_ms(5000);
    1fd6:	68 e8       	ldi	r22, 0x88	; 136
    1fd8:	73 e1       	ldi	r23, 0x13	; 19
    1fda:	80 e0       	ldi	r24, 0x00	; 0
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	0e 94 11 09 	call	0x1222	; 0x1222 <TIMER0_Set_INT_Time_ms>
    1fe2:	90 93 47 01 	sts	0x0147, r25
    1fe6:	80 93 46 01 	sts	0x0146, r24
	TIMER0_Set_OVF_Callback(&TIMER0_OVF_fun);
    1fea:	83 e0       	ldi	r24, 0x03	; 3
    1fec:	9e e0       	ldi	r25, 0x0E	; 14
    1fee:	0e 94 93 09 	call	0x1326	; 0x1326 <TIMER0_Set_OVF_Callback>
	
	if (EEPROM_read(EEPROM_STATUS_LOCATION)==NOTPRESSED)
    1ff2:	80 e2       	ldi	r24, 0x20	; 32
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_read>
    1ffa:	8f 3f       	cpi	r24, 0xFF	; 255
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <main+0xfc>
    1ffe:	5a c0       	rjmp	.+180    	; 0x20b4 <main+0x1b0>
	{
		LCD_displayString("set pass:");
    2000:	87 e7       	ldi	r24, 0x77	; 119
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
    2008:	c1 e2       	ldi	r28, 0x21	; 33
    200a:	d0 e0       	ldi	r29, 0x00	; 0
		for (i=0;i<=3;i++)
		{
			do
			{
				value=keypad_u8check_press();
    200c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <keypad_u8check_press>
    2010:	18 2f       	mov	r17, r24
			}while (value==NOTPRESSED);
    2012:	8f 3f       	cpi	r24, 0xFF	; 255
    2014:	d9 f3       	breq	.-10     	; 0x200c <main+0x108>
			LCD_displayCharacter(value);
    2016:	0e 94 01 03 	call	0x602	; 0x602 <LCD_displayCharacter>
			pass = pass * 10 + (value - '0');
    201a:	80 91 69 04 	lds	r24, 0x0469
    201e:	90 91 6a 04 	lds	r25, 0x046A
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	9c 01       	movw	r18, r24
    2028:	22 0f       	add	r18, r18
    202a:	33 1f       	adc	r19, r19
    202c:	22 0f       	add	r18, r18
    202e:	33 1f       	adc	r19, r19
    2030:	82 0f       	add	r24, r18
    2032:	93 1f       	adc	r25, r19
    2034:	c0 97       	sbiw	r24, 0x30	; 48
    2036:	81 0f       	add	r24, r17
    2038:	91 1d       	adc	r25, r1
    203a:	90 93 6a 04 	sts	0x046A, r25
    203e:	80 93 69 04 	sts	0x0469, r24
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	92 e5       	ldi	r25, 0x52	; 82
    2046:	a7 e0       	ldi	r26, 0x07	; 7
    2048:	81 50       	subi	r24, 0x01	; 1
    204a:	90 40       	sbci	r25, 0x00	; 0
    204c:	a0 40       	sbci	r26, 0x00	; 0
    204e:	e1 f7       	brne	.-8      	; 0x2048 <main+0x144>
    2050:	00 c0       	rjmp	.+0      	; 0x2052 <main+0x14e>
    2052:	00 00       	nop

	}
}


int main()
    2054:	6c 2f       	mov	r22, r28
    2056:	68 51       	subi	r22, 0x18	; 24
				value=keypad_u8check_press();
			}while (value==NOTPRESSED);
			LCD_displayCharacter(value);
			pass = pass * 10 + (value - '0');
			_delay_ms(300);
			LCD_setCursor(0,9+i);
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_setCursor>
			LCD_displayCharacter('*');
    205e:	8a e2       	ldi	r24, 0x2A	; 42
    2060:	0e 94 01 03 	call	0x602	; 0x602 <LCD_displayCharacter>
    2064:	8f ef       	ldi	r24, 0xFF	; 255
    2066:	94 e3       	ldi	r25, 0x34	; 52
    2068:	ac e0       	ldi	r26, 0x0C	; 12
    206a:	81 50       	subi	r24, 0x01	; 1
    206c:	90 40       	sbci	r25, 0x00	; 0
    206e:	a0 40       	sbci	r26, 0x00	; 0
    2070:	e1 f7       	brne	.-8      	; 0x206a <main+0x166>
    2072:	00 c0       	rjmp	.+0      	; 0x2074 <main+0x170>
    2074:	00 00       	nop
			_delay_ms(500);
			EEPROM_write(EEPROM_PASSWORD_LOCATION1+i,value);
    2076:	ce 01       	movw	r24, r28
    2078:	61 2f       	mov	r22, r17
    207a:	0e 94 79 07 	call	0xef2	; 0xef2 <EEPROM_write>
    207e:	21 96       	adiw	r28, 0x01	; 1
	TIMER0_Set_OVF_Callback(&TIMER0_OVF_fun);
	
	if (EEPROM_read(EEPROM_STATUS_LOCATION)==NOTPRESSED)
	{
		LCD_displayString("set pass:");
		for (i=0;i<=3;i++)
    2080:	c5 32       	cpi	r28, 0x25	; 37
    2082:	d1 05       	cpc	r29, r1
    2084:	19 f6       	brne	.-122    	; 0x200c <main+0x108>
			LCD_setCursor(0,9+i);
			LCD_displayCharacter('*');
			_delay_ms(500);
			EEPROM_write(EEPROM_PASSWORD_LOCATION1+i,value);
		}
		EEPROM_write(EEPROM_STATUS_LOCATION,0x00);
    2086:	80 e2       	ldi	r24, 0x20	; 32
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	0e 94 79 07 	call	0xef2	; 0xef2 <EEPROM_write>
		LCD_clearScreen();
    2090:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
		LCD_displayString("Password is set");
    2094:	81 e8       	ldi	r24, 0x81	; 129
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
    209c:	8f ef       	ldi	r24, 0xFF	; 255
    209e:	99 e6       	ldi	r25, 0x69	; 105
    20a0:	a8 e1       	ldi	r26, 0x18	; 24
    20a2:	81 50       	subi	r24, 0x01	; 1
    20a4:	90 40       	sbci	r25, 0x00	; 0
    20a6:	a0 40       	sbci	r26, 0x00	; 0
    20a8:	e1 f7       	brne	.-8      	; 0x20a2 <main+0x19e>
    20aa:	00 c0       	rjmp	.+0      	; 0x20ac <main+0x1a8>
    20ac:	00 00       	nop
		_delay_ms(1000);
		LCD_clearScreen();
    20ae:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
    20b2:	44 c0       	rjmp	.+136    	; 0x213c <main+0x238>
		i=0;
	}
	else
	{
		pass = ((int)(EEPROM_read(EEPROM_PASSWORD_LOCATION1)-'0')) * 1000 + ((int)(EEPROM_read(EEPROM_PASSWORD_LOCATION2)-'0'))* 100 + ((int)(EEPROM_read(EEPROM_PASSWORD_LOCATION3)-'0'))* 10 + ((int)(EEPROM_read(EEPROM_PASSWORD_LOCATION4)-'0'));
    20b4:	82 e2       	ldi	r24, 0x22	; 34
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_read>
    20bc:	d8 2f       	mov	r29, r24
    20be:	81 e2       	ldi	r24, 0x21	; 33
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_read>
    20c6:	c8 2f       	mov	r28, r24
    20c8:	83 e2       	ldi	r24, 0x23	; 35
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_read>
    20d0:	4d 2f       	mov	r20, r29
    20d2:	50 e0       	ldi	r21, 0x00	; 0
    20d4:	24 e6       	ldi	r18, 0x64	; 100
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	42 9f       	mul	r20, r18
    20da:	f0 01       	movw	r30, r0
    20dc:	43 9f       	mul	r20, r19
    20de:	f0 0d       	add	r31, r0
    20e0:	52 9f       	mul	r21, r18
    20e2:	f0 0d       	add	r31, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	2c 2f       	mov	r18, r28
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	20 53       	subi	r18, 0x30	; 48
    20ec:	30 40       	sbci	r19, 0x00	; 0
    20ee:	48 ee       	ldi	r20, 0xE8	; 232
    20f0:	53 e0       	ldi	r21, 0x03	; 3
    20f2:	24 9f       	mul	r18, r20
    20f4:	b0 01       	movw	r22, r0
    20f6:	25 9f       	mul	r18, r21
    20f8:	70 0d       	add	r23, r0
    20fa:	34 9f       	mul	r19, r20
    20fc:	70 0d       	add	r23, r0
    20fe:	11 24       	eor	r1, r1
    2100:	6e 0f       	add	r22, r30
    2102:	7f 1f       	adc	r23, r31
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	22 0f       	add	r18, r18
    210a:	33 1f       	adc	r19, r19
    210c:	c9 01       	movw	r24, r18
    210e:	88 0f       	add	r24, r24
    2110:	99 1f       	adc	r25, r25
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	28 0f       	add	r18, r24
    2118:	39 1f       	adc	r19, r25
    211a:	62 0f       	add	r22, r18
    211c:	73 1f       	adc	r23, r19
    211e:	eb 01       	movw	r28, r22
    2120:	c0 5a       	subi	r28, 0xA0	; 160
    2122:	d4 41       	sbci	r29, 0x14	; 20
    2124:	84 e2       	ldi	r24, 0x24	; 36
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_read>
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	c0 97       	sbiw	r24, 0x30	; 48
    2130:	c8 0f       	add	r28, r24
    2132:	d9 1f       	adc	r29, r25
    2134:	d0 93 6a 04 	sts	0x046A, r29
    2138:	c0 93 69 04 	sts	0x0469, r28
				LCD_clearScreen();
				LCD_displayString("Password is set");
				_delay_ms(1000);
				LCD_clearScreen();
			}
			i = 0;
    213c:	10 e0       	ldi	r17, 0x00	; 0
					{
						gear++;
						TIMER2_SetPWMDutyCycle(42.5*gear);
						save_data();
					}
					command = NOTHING;
    213e:	0f 2e       	mov	r0, r31
    2140:	f0 e3       	ldi	r31, 0x30	; 48
    2142:	ff 2e       	mov	r15, r31
    2144:	f0 2d       	mov	r31, r0
			_delay_ms(50);
		}
		else if (key == '*')
		{
			LCD_clearScreen();
			LCD_displayString("Enter old pass");
    2146:	0f 2e       	mov	r0, r31
    2148:	f3 ec       	ldi	r31, 0xC3	; 195
    214a:	8f 2e       	mov	r8, r31
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	9f 2e       	mov	r9, r31
    2150:	f0 2d       	mov	r31, r0
			_delay_ms(1000);
			LCD_clearScreen();
			LCD_displayString("Old pass:");
    2152:	0f 2e       	mov	r0, r31
    2154:	f2 ed       	ldi	r31, 0xD2	; 210
    2156:	6f 2e       	mov	r6, r31
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	7f 2e       	mov	r7, r31
    215c:	f0 2d       	mov	r31, r0
				entered_password = entered_password * 10 + (value - '0');
			}
			if(entered_password != pass)
			{
				LCD_clearScreen();
				LCD_displayString("Wrong password");
    215e:	0f 2e       	mov	r0, r31
    2160:	fc ed       	ldi	r31, 0xDC	; 220
    2162:	4f 2e       	mov	r4, r31
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	5f 2e       	mov	r5, r31
    2168:	f0 2d       	mov	r31, r0
					i = 0;
				}
				else
				{
					LCD_clearScreen();
					LCD_displayString("  INVALID PIN");
    216a:	0f 2e       	mov	r0, r31
    216c:	f5 eb       	ldi	r31, 0xB5	; 181
    216e:	cf 2e       	mov	r12, r31
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	df 2e       	mov	r13, r31
    2174:	f0 2d       	mov	r31, r0
				if (entered_password == pass)
				{
					LCD_clearScreen();


					LCD_displayString("   VALID PIN");
    2176:	0f 2e       	mov	r0, r31
    2178:	fd e9       	ldi	r31, 0x9D	; 157
    217a:	2f 2e       	mov	r2, r31
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	3f 2e       	mov	r3, r31
    2180:	f0 2d       	mov	r31, r0
		if (key != 0xFF && key != '*')
		{
			if(entered_password == 0)
			{
				LCD_clearScreen();
				LCD_displayString("Enter pass:");
    2182:	0f 2e       	mov	r0, r31
    2184:	f1 e9       	ldi	r31, 0x91	; 145
    2186:	af 2e       	mov	r10, r31
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	bf 2e       	mov	r11, r31
    218c:	f0 2d       	mov	r31, r0
	}
	while(1)
	{
		

		if(flag == 0)
    218e:	80 91 42 01 	lds	r24, 0x0142
    2192:	88 23       	and	r24, r24
    2194:	09 f0       	breq	.+2      	; 0x2198 <main+0x294>
    2196:	1f c1       	rjmp	.+574    	; 0x23d6 <main+0x4d2>
		{
			switch (command)
    2198:	80 91 1a 01 	lds	r24, 0x011A
    219c:	86 33       	cpi	r24, 0x36	; 54
    219e:	09 f4       	brne	.+2      	; 0x21a2 <main+0x29e>
    21a0:	64 c0       	rjmp	.+200    	; 0x226a <main+0x366>
    21a2:	87 33       	cpi	r24, 0x37	; 55
    21a4:	80 f4       	brcc	.+32     	; 0x21c6 <main+0x2c2>
    21a6:	83 33       	cpi	r24, 0x33	; 51
    21a8:	e1 f1       	breq	.+120    	; 0x2222 <main+0x31e>
    21aa:	84 33       	cpi	r24, 0x34	; 52
    21ac:	30 f4       	brcc	.+12     	; 0x21ba <main+0x2b6>
    21ae:	81 33       	cpi	r24, 0x31	; 49
    21b0:	01 f1       	breq	.+64     	; 0x21f2 <main+0x2ee>
    21b2:	82 33       	cpi	r24, 0x32	; 50
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <main+0x2b4>
    21b6:	0f c1       	rjmp	.+542    	; 0x23d6 <main+0x4d2>
    21b8:	28 c0       	rjmp	.+80     	; 0x220a <main+0x306>
    21ba:	84 33       	cpi	r24, 0x34	; 52
    21bc:	f1 f1       	breq	.+124    	; 0x223a <main+0x336>
    21be:	85 33       	cpi	r24, 0x35	; 53
    21c0:	09 f0       	breq	.+2      	; 0x21c4 <main+0x2c0>
    21c2:	09 c1       	rjmp	.+530    	; 0x23d6 <main+0x4d2>
    21c4:	46 c0       	rjmp	.+140    	; 0x2252 <main+0x34e>
    21c6:	89 33       	cpi	r24, 0x39	; 57
    21c8:	09 f4       	brne	.+2      	; 0x21cc <main+0x2c8>
    21ca:	8a c0       	rjmp	.+276    	; 0x22e0 <main+0x3dc>
    21cc:	8a 33       	cpi	r24, 0x3A	; 58
    21ce:	38 f4       	brcc	.+14     	; 0x21de <main+0x2da>
    21d0:	87 33       	cpi	r24, 0x37	; 55
    21d2:	09 f4       	brne	.+2      	; 0x21d6 <main+0x2d2>
    21d4:	66 c0       	rjmp	.+204    	; 0x22a2 <main+0x39e>
    21d6:	88 33       	cpi	r24, 0x38	; 56
    21d8:	09 f0       	breq	.+2      	; 0x21dc <main+0x2d8>
    21da:	fd c0       	rjmp	.+506    	; 0x23d6 <main+0x4d2>
    21dc:	7e c0       	rjmp	.+252    	; 0x22da <main+0x3d6>
    21de:	86 36       	cpi	r24, 0x66	; 102
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <main+0x2e0>
    21e2:	f2 c0       	rjmp	.+484    	; 0x23c8 <main+0x4c4>
    21e4:	8f 36       	cpi	r24, 0x6F	; 111
    21e6:	09 f4       	brne	.+2      	; 0x21ea <main+0x2e6>
    21e8:	e7 c0       	rjmp	.+462    	; 0x23b8 <main+0x4b4>
    21ea:	8b 33       	cpi	r24, 0x3B	; 59
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <main+0x2ec>
    21ee:	f3 c0       	rjmp	.+486    	; 0x23d6 <main+0x4d2>
    21f0:	82 c0       	rjmp	.+260    	; 0x22f6 <main+0x3f2>

					break;

				case FORWARD:

					DC_MOTOR_FORWARD(MOTOR_1,MOTOR_2);
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	61 e0       	ldi	r22, 0x01	; 1
    21f6:	0e 94 bc 00 	call	0x178	; 0x178 <DC_MOTOR_FORWARD>
					save_data();
    21fa:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <save_data>
					MODE = BACKWARD;
    21fe:	82 e3       	ldi	r24, 0x32	; 50
    2200:	80 93 1c 01 	sts	0x011C, r24
					command = NOTHING;
    2204:	f0 92 1a 01 	sts	0x011A, r15
					break;
    2208:	e6 c0       	rjmp	.+460    	; 0x23d6 <main+0x4d2>

				case BACKWARD:

					DC_MOTOR_BACKWARD(MOTOR_1,MOTOR_2);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	61 e0       	ldi	r22, 0x01	; 1
    220e:	0e 94 c6 00 	call	0x18c	; 0x18c <DC_MOTOR_BACKWARD>
					save_data();
    2212:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <save_data>
					MODE = FORWARD;
    2216:	81 e3       	ldi	r24, 0x31	; 49
    2218:	80 93 1c 01 	sts	0x011C, r24
					command = NOTHING;
    221c:	f0 92 1a 01 	sts	0x011A, r15
					break;
    2220:	da c0       	rjmp	.+436    	; 0x23d6 <main+0x4d2>

				case STOP:

					DC_MOTOR_STOP(MOTOR_1,MOTOR_2);
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	61 e0       	ldi	r22, 0x01	; 1
    2226:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DC_MOTOR_STOP>
					save_data();
    222a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <save_data>
					MODE = STOP;
    222e:	83 e3       	ldi	r24, 0x33	; 51
    2230:	80 93 1c 01 	sts	0x011C, r24
					command = NOTHING;
    2234:	f0 92 1a 01 	sts	0x011A, r15
					break;
    2238:	ce c0       	rjmp	.+412    	; 0x23d6 <main+0x4d2>

				case STEER_RIGHT:

					DC_MOTOR_STEER_Right(MOTOR_1,MOTOR_2);
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	61 e0       	ldi	r22, 0x01	; 1
    223e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <DC_MOTOR_STEER_Right>
					save_data();
    2242:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <save_data>
					MODE = STEER_LEFT;
    2246:	85 e3       	ldi	r24, 0x35	; 53
    2248:	80 93 1c 01 	sts	0x011C, r24
					command = NOTHING;
    224c:	f0 92 1a 01 	sts	0x011A, r15
					break;
    2250:	c2 c0       	rjmp	.+388    	; 0x23d6 <main+0x4d2>

				case STEER_LEFT:

					DC_MOTOR_STEER_Left(MOTOR_1,MOTOR_2);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	61 e0       	ldi	r22, 0x01	; 1
    2256:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DC_MOTOR_STEER_Left>
					save_data();
    225a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <save_data>
					MODE = STEER_RIGHT;
    225e:	84 e3       	ldi	r24, 0x34	; 52
    2260:	80 93 1c 01 	sts	0x011C, r24
					command = NOTHING;
    2264:	f0 92 1a 01 	sts	0x011A, r15
					break;
    2268:	b6 c0       	rjmp	.+364    	; 0x23d6 <main+0x4d2>

				case GEARUP:

					if(gear < MAX_GEAR)
    226a:	60 91 1b 01 	lds	r22, 0x011B
    226e:	66 30       	cpi	r22, 0x06	; 6
    2270:	a8 f4       	brcc	.+42     	; 0x229c <main+0x398>
					{
						gear++;
    2272:	6f 5f       	subi	r22, 0xFF	; 255
    2274:	60 93 1b 01 	sts	0x011B, r22
						TIMER2_SetPWMDutyCycle(42.5*gear);
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 36 14 	call	0x286c	; 0x286c <__floatsisf>
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4a e2       	ldi	r20, 0x2A	; 42
    2288:	52 e4       	ldi	r21, 0x42	; 66
    228a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    228e:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
    2292:	86 2f       	mov	r24, r22
    2294:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TIMER2_SetPWMDutyCycle>
						save_data();
    2298:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <save_data>
					}
					command = NOTHING;
    229c:	f0 92 1a 01 	sts	0x011A, r15
					break;
    22a0:	9a c0       	rjmp	.+308    	; 0x23d6 <main+0x4d2>


				case GEARDOWN:

					if(gear > MIN_GEAR)
    22a2:	60 91 1b 01 	lds	r22, 0x011B
    22a6:	64 30       	cpi	r22, 0x04	; 4
    22a8:	a8 f0       	brcs	.+42     	; 0x22d4 <main+0x3d0>
					{
						gear--;
    22aa:	61 50       	subi	r22, 0x01	; 1
    22ac:	60 93 1b 01 	sts	0x011B, r22
						TIMER2_SetPWMDutyCycle(42.5*gear);
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 36 14 	call	0x286c	; 0x286c <__floatsisf>
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a e2       	ldi	r20, 0x2A	; 42
    22c0:	52 e4       	ldi	r21, 0x42	; 66
    22c2:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__mulsf3>
    22c6:	0e 94 08 14 	call	0x2810	; 0x2810 <__fixunssfsi>
    22ca:	86 2f       	mov	r24, r22
    22cc:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <TIMER2_SetPWMDutyCycle>
						save_data();
    22d0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <save_data>
					}
					command = NOTHING;
    22d4:	f0 92 1a 01 	sts	0x011A, r15
					break;
    22d8:	7e c0       	rjmp	.+252    	; 0x23d6 <main+0x4d2>


				case CLR_SCREEN:

					LCD_clearScreen();
    22da:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
					break;
    22de:	7b c0       	rjmp	.+246    	; 0x23d6 <main+0x4d2>

				case SEND_LCD:

					UART_Set_RX_Callback(&UART_LCD_func,str,34,UART_STOPCHAR);
    22e0:	8f ee       	ldi	r24, 0xEF	; 239
    22e2:	9d e0       	ldi	r25, 0x0D	; 13
    22e4:	68 ef       	ldi	r22, 0xF8	; 248
    22e6:	70 e0       	ldi	r23, 0x00	; 0
    22e8:	42 e2       	ldi	r20, 0x22	; 34
    22ea:	2a e3       	ldi	r18, 0x3A	; 58
    22ec:	0e 94 66 0d 	call	0x1acc	; 0x1acc <UART_Set_RX_Callback>
					command = NOTHING;
    22f0:	f0 92 1a 01 	sts	0x011A, r15
					break;
    22f4:	70 c0       	rjmp	.+224    	; 0x23d6 <main+0x4d2>

                case REVERSE:

					flag = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	80 93 42 01 	sts	0x0142, r24
					arr[INDEX].time = TIMER0_GetTime_ms()/10;
    22fc:	c0 91 48 01 	lds	r28, 0x0148
    2300:	d0 e0       	ldi	r29, 0x00	; 0
    2302:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TIMER0_GetTime_ms>
    2306:	cc 0f       	add	r28, r28
    2308:	dd 1f       	adc	r29, r29
    230a:	cc 0f       	add	r28, r28
    230c:	dd 1f       	adc	r29, r29
    230e:	c7 5b       	subi	r28, 0xB7	; 183
    2310:	de 4f       	sbci	r29, 0xFE	; 254
    2312:	2a e0       	ldi	r18, 0x0A	; 10
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__udivmodsi4>
    231e:	92 2f       	mov	r25, r18
    2320:	92 95       	swap	r25
    2322:	99 0f       	add	r25, r25
    2324:	99 0f       	add	r25, r25
    2326:	90 7c       	andi	r25, 0xC0	; 192
    2328:	88 81       	ld	r24, Y
    232a:	8f 73       	andi	r24, 0x3F	; 63
    232c:	89 2b       	or	r24, r25
    232e:	88 83       	st	Y, r24
    2330:	83 2f       	mov	r24, r19
    2332:	82 95       	swap	r24
    2334:	88 0f       	add	r24, r24
    2336:	88 0f       	add	r24, r24
    2338:	80 7c       	andi	r24, 0xC0	; 192
    233a:	26 95       	lsr	r18
    233c:	26 95       	lsr	r18
    233e:	28 2b       	or	r18, r24
    2340:	29 83       	std	Y+1, r18	; 0x01
    2342:	84 2f       	mov	r24, r20
    2344:	82 95       	swap	r24
    2346:	88 0f       	add	r24, r24
    2348:	88 0f       	add	r24, r24
    234a:	80 7c       	andi	r24, 0xC0	; 192
    234c:	36 95       	lsr	r19
    234e:	36 95       	lsr	r19
    2350:	38 2b       	or	r19, r24
    2352:	3a 83       	std	Y+2, r19	; 0x02
    2354:	52 95       	swap	r21
    2356:	55 0f       	add	r21, r21
    2358:	55 0f       	add	r21, r21
    235a:	50 7c       	andi	r21, 0xC0	; 192
    235c:	46 95       	lsr	r20
    235e:	46 95       	lsr	r20
    2360:	45 2b       	or	r20, r21
    2362:	4b 83       	std	Y+3, r20	; 0x03
					TIMER0_RESET();
    2364:	0e 94 0b 09 	call	0x1216	; 0x1216 <TIMER0_RESET>
					DC_MOTOR_STOP(MOTOR_1,MOTOR_2);
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	61 e0       	ldi	r22, 0x01	; 1
    236c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <DC_MOTOR_STOP>
					arr[INDEX].mode = MODE;
    2370:	20 91 48 01 	lds	r18, 0x0148
    2374:	82 2f       	mov	r24, r18
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	88 0f       	add	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	fc 01       	movw	r30, r24
    2382:	e7 5b       	subi	r30, 0xB7	; 183
    2384:	fe 4f       	sbci	r31, 0xFE	; 254
    2386:	30 91 1c 01 	lds	r19, 0x011C
    238a:	37 70       	andi	r19, 0x07	; 7
    238c:	80 81       	ld	r24, Z
    238e:	80 7c       	andi	r24, 0xC0	; 192
					arr[INDEX].gear = gear;
    2390:	90 91 1b 01 	lds	r25, 0x011B
    2394:	97 70       	andi	r25, 0x07	; 7
    2396:	99 0f       	add	r25, r25
    2398:	99 0f       	add	r25, r25
    239a:	99 0f       	add	r25, r25
    239c:	83 2b       	or	r24, r19
    239e:	89 2b       	or	r24, r25
    23a0:	80 83       	st	Z, r24

					INDEX++;
    23a2:	2f 5f       	subi	r18, 0xFF	; 255
    23a4:	20 93 48 01 	sts	0x0148, r18

					TIMER0_Set_OVF_Callback(&TIMER0_fun);
    23a8:	84 ed       	ldi	r24, 0xD4	; 212
    23aa:	9d e0       	ldi	r25, 0x0D	; 13
    23ac:	0e 94 93 09 	call	0x1326	; 0x1326 <TIMER0_Set_OVF_Callback>
					TIMER0_SetTimerValue(255);
    23b0:	8f ef       	ldi	r24, 0xFF	; 255
    23b2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TIMER0_SetTimerValue>
					break;
    23b6:	0f c0       	rjmp	.+30     	; 0x23d6 <main+0x4d2>

				case BUZZER_ON:
				DIO_write_Pin(PORTD_ID,PIN6_ID,HIGH);
    23b8:	83 e0       	ldi	r24, 0x03	; 3
    23ba:	66 e0       	ldi	r22, 0x06	; 6
    23bc:	41 e0       	ldi	r20, 0x01	; 1
    23be:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
				command = NOTHING;
    23c2:	f0 92 1a 01 	sts	0x011A, r15
				break;
    23c6:	07 c0       	rjmp	.+14     	; 0x23d6 <main+0x4d2>
				case BUZZER_OFF:
				DIO_write_Pin(PORTD_ID,PIN6_ID,LOW);
    23c8:	83 e0       	ldi	r24, 0x03	; 3
    23ca:	66 e0       	ldi	r22, 0x06	; 6
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_write_Pin>
				command = NOTHING;
    23d2:	f0 92 1a 01 	sts	0x011A, r15
					break;
			}


		}
		key = keypad_u8check_press();
    23d6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <keypad_u8check_press>
    23da:	80 93 79 04 	sts	0x0479, r24
		if (key != 0xFF && key != '*')
    23de:	8f 3f       	cpi	r24, 0xFF	; 255
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <main+0x4e0>
    23e2:	d5 ce       	rjmp	.-598    	; 0x218e <main+0x28a>
    23e4:	8a 32       	cpi	r24, 0x2A	; 42
    23e6:	09 f4       	brne	.+2      	; 0x23ea <main+0x4e6>
    23e8:	79 c0       	rjmp	.+242    	; 0x24dc <main+0x5d8>
		{
			if(entered_password == 0)
    23ea:	80 91 6b 04 	lds	r24, 0x046B
    23ee:	90 91 6c 04 	lds	r25, 0x046C
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	29 f4       	brne	.+10     	; 0x2400 <main+0x4fc>
			{
				LCD_clearScreen();
    23f6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
				LCD_displayString("Enter pass:");
    23fa:	c5 01       	movw	r24, r10
    23fc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
			}


			if (key == EQUAL_KEY)
    2400:	40 91 79 04 	lds	r20, 0x0479
    2404:	4d 33       	cpi	r20, 0x3D	; 61
    2406:	b9 f5       	brne	.+110    	; 0x2476 <main+0x572>
			{
				if (entered_password == pass)
    2408:	80 91 6b 04 	lds	r24, 0x046B
    240c:	90 91 6c 04 	lds	r25, 0x046C
    2410:	20 91 69 04 	lds	r18, 0x0469
    2414:	30 91 6a 04 	lds	r19, 0x046A
    2418:	82 17       	cp	r24, r18
    241a:	93 07       	cpc	r25, r19
    241c:	e9 f4       	brne	.+58     	; 0x2458 <main+0x554>
				{
					LCD_clearScreen();
    241e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>


					LCD_displayString("   VALID PIN");
    2422:	c1 01       	movw	r24, r2
    2424:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
					LCD_setCursor(1,3);
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	63 e0       	ldi	r22, 0x03	; 3
    242c:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_setCursor>
					LCD_displayString("BOX OPENED");
    2430:	8a ea       	ldi	r24, 0xAA	; 170
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
    2438:	8f ef       	ldi	r24, 0xFF	; 255
    243a:	92 e5       	ldi	r25, 0x52	; 82
    243c:	a7 e0       	ldi	r26, 0x07	; 7
    243e:	81 50       	subi	r24, 0x01	; 1
    2440:	90 40       	sbci	r25, 0x00	; 0
    2442:	a0 40       	sbci	r26, 0x00	; 0
    2444:	e1 f7       	brne	.-8      	; 0x243e <main+0x53a>
    2446:	00 c0       	rjmp	.+0      	; 0x2448 <main+0x544>
    2448:	00 00       	nop
					_delay_ms(300);
					Servo_motor_degree(-90);
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	84 eb       	ldi	r24, 0xB4	; 180
    2450:	92 ec       	ldi	r25, 0xC2	; 194
    2452:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Servo_motor_degree>
    2456:	09 c0       	rjmp	.+18     	; 0x246a <main+0x566>
					i = 0;
				}
				else
				{
					LCD_clearScreen();
    2458:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
					LCD_displayString("  INVALID PIN");
    245c:	c6 01       	movw	r24, r12
    245e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
					LCD_setCursor(1,0);
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_setCursor>
					i = 0;
				}
				entered_password = 0;
    246a:	10 92 6c 04 	sts	0x046C, r1
    246e:	10 92 6b 04 	sts	0x046B, r1
    2472:	10 e0       	ldi	r17, 0x00	; 0
    2474:	29 c0       	rjmp	.+82     	; 0x24c8 <main+0x5c4>
			}
			else
			{
				entered_password = entered_password * 10 + (key - '0');
    2476:	80 91 6b 04 	lds	r24, 0x046B
    247a:	90 91 6c 04 	lds	r25, 0x046C
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	9c 01       	movw	r18, r24
    2484:	22 0f       	add	r18, r18
    2486:	33 1f       	adc	r19, r19
    2488:	22 0f       	add	r18, r18
    248a:	33 1f       	adc	r19, r19
    248c:	82 0f       	add	r24, r18
    248e:	93 1f       	adc	r25, r19
    2490:	84 0f       	add	r24, r20
    2492:	91 1d       	adc	r25, r1
    2494:	c0 97       	sbiw	r24, 0x30	; 48
    2496:	90 93 6c 04 	sts	0x046C, r25
    249a:	80 93 6b 04 	sts	0x046B, r24
				LCD_displayCharacter(key);
    249e:	84 2f       	mov	r24, r20
    24a0:	0e 94 01 03 	call	0x602	; 0x602 <LCD_displayCharacter>
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	92 e5       	ldi	r25, 0x52	; 82
    24a8:	a7 e0       	ldi	r26, 0x07	; 7
    24aa:	81 50       	subi	r24, 0x01	; 1
    24ac:	90 40       	sbci	r25, 0x00	; 0
    24ae:	a0 40       	sbci	r26, 0x00	; 0
    24b0:	e1 f7       	brne	.-8      	; 0x24aa <main+0x5a6>
    24b2:	00 c0       	rjmp	.+0      	; 0x24b4 <main+0x5b0>
    24b4:	00 00       	nop
				_delay_ms(300);
				LCD_setCursor(0,11+i);
    24b6:	61 2f       	mov	r22, r17
    24b8:	65 5f       	subi	r22, 0xF5	; 245
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_setCursor>
				LCD_displayCharacter('*');
    24c0:	8a e2       	ldi	r24, 0x2A	; 42
    24c2:	0e 94 01 03 	call	0x602	; 0x602 <LCD_displayCharacter>
				i++;
    24c6:	1f 5f       	subi	r17, 0xFF	; 255
    24c8:	8f e7       	ldi	r24, 0x7F	; 127
    24ca:	98 e3       	ldi	r25, 0x38	; 56
    24cc:	a1 e0       	ldi	r26, 0x01	; 1
    24ce:	81 50       	subi	r24, 0x01	; 1
    24d0:	90 40       	sbci	r25, 0x00	; 0
    24d2:	a0 40       	sbci	r26, 0x00	; 0
    24d4:	e1 f7       	brne	.-8      	; 0x24ce <main+0x5ca>
    24d6:	00 c0       	rjmp	.+0      	; 0x24d8 <main+0x5d4>
    24d8:	00 00       	nop
    24da:	59 ce       	rjmp	.-846    	; 0x218e <main+0x28a>
			}
			_delay_ms(50);
		}
		else if (key == '*')
		{
			LCD_clearScreen();
    24dc:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
			LCD_displayString("Enter old pass");
    24e0:	c4 01       	movw	r24, r8
    24e2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
    24e6:	8f ef       	ldi	r24, 0xFF	; 255
    24e8:	99 e6       	ldi	r25, 0x69	; 105
    24ea:	a8 e1       	ldi	r26, 0x18	; 24
    24ec:	81 50       	subi	r24, 0x01	; 1
    24ee:	90 40       	sbci	r25, 0x00	; 0
    24f0:	a0 40       	sbci	r26, 0x00	; 0
    24f2:	e1 f7       	brne	.-8      	; 0x24ec <main+0x5e8>
    24f4:	00 c0       	rjmp	.+0      	; 0x24f6 <main+0x5f2>
    24f6:	00 00       	nop
			_delay_ms(1000);
			LCD_clearScreen();
    24f8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
			LCD_displayString("Old pass:");
    24fc:	c3 01       	movw	r24, r6
    24fe:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
			entered_password = 0;
    2502:	10 92 6c 04 	sts	0x046C, r1
    2506:	10 92 6b 04 	sts	0x046B, r1
    250a:	d9 e0       	ldi	r29, 0x09	; 9
			for (i=0;i<=3;i++)
			{
				do
				{
					value=keypad_u8check_press();
    250c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <keypad_u8check_press>
    2510:	c8 2f       	mov	r28, r24
				}while (value==NOTPRESSED);
    2512:	8f 3f       	cpi	r24, 0xFF	; 255
    2514:	d9 f3       	breq	.-10     	; 0x250c <main+0x608>
				LCD_setCursor(0,9+i);
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	6d 2f       	mov	r22, r29
    251a:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_setCursor>
				LCD_displayCharacter(value);
    251e:	8c 2f       	mov	r24, r28
    2520:	0e 94 01 03 	call	0x602	; 0x602 <LCD_displayCharacter>
    2524:	8f ef       	ldi	r24, 0xFF	; 255
    2526:	92 e5       	ldi	r25, 0x52	; 82
    2528:	a7 e0       	ldi	r26, 0x07	; 7
    252a:	81 50       	subi	r24, 0x01	; 1
    252c:	90 40       	sbci	r25, 0x00	; 0
    252e:	a0 40       	sbci	r26, 0x00	; 0
    2530:	e1 f7       	brne	.-8      	; 0x252a <main+0x626>
    2532:	00 c0       	rjmp	.+0      	; 0x2534 <main+0x630>
    2534:	00 00       	nop
				_delay_ms(300);
				entered_password = entered_password * 10 + (value - '0');
    2536:	80 91 6b 04 	lds	r24, 0x046B
    253a:	90 91 6c 04 	lds	r25, 0x046C
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	9c 01       	movw	r18, r24
    2544:	22 0f       	add	r18, r18
    2546:	33 1f       	adc	r19, r19
    2548:	22 0f       	add	r18, r18
    254a:	33 1f       	adc	r19, r19
    254c:	82 0f       	add	r24, r18
    254e:	93 1f       	adc	r25, r19
    2550:	c0 97       	sbiw	r24, 0x30	; 48
    2552:	8c 0f       	add	r24, r28
    2554:	91 1d       	adc	r25, r1
    2556:	90 93 6c 04 	sts	0x046C, r25
    255a:	80 93 6b 04 	sts	0x046B, r24
    255e:	df 5f       	subi	r29, 0xFF	; 255
			LCD_displayString("Enter old pass");
			_delay_ms(1000);
			LCD_clearScreen();
			LCD_displayString("Old pass:");
			entered_password = 0;
			for (i=0;i<=3;i++)
    2560:	dd 30       	cpi	r29, 0x0D	; 13
    2562:	a1 f6       	brne	.-88     	; 0x250c <main+0x608>
				LCD_setCursor(0,9+i);
				LCD_displayCharacter(value);
				_delay_ms(300);
				entered_password = entered_password * 10 + (value - '0');
			}
			if(entered_password != pass)
    2564:	20 91 69 04 	lds	r18, 0x0469
    2568:	30 91 6a 04 	lds	r19, 0x046A
    256c:	82 17       	cp	r24, r18
    256e:	93 07       	cpc	r25, r19
    2570:	31 f0       	breq	.+12     	; 0x257e <main+0x67a>
			{
				LCD_clearScreen();
    2572:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
				LCD_displayString("Wrong password");
    2576:	c2 01       	movw	r24, r4
    2578:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
    257c:	6d c0       	rjmp	.+218    	; 0x2658 <main+0x754>
				i=0;
			}
			else
			{
				pass = 0;
    257e:	10 92 6a 04 	sts	0x046A, r1
    2582:	10 92 69 04 	sts	0x0469, r1
				LCD_clearScreen();
    2586:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
				LCD_displayString("change pass:");
    258a:	8b ee       	ldi	r24, 0xEB	; 235
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
				LCD_setCursor(0,12);
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	6c e0       	ldi	r22, 0x0C	; 12
    2596:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_setCursor>
    259a:	8f ef       	ldi	r24, 0xFF	; 255
    259c:	99 e6       	ldi	r25, 0x69	; 105
    259e:	a8 e1       	ldi	r26, 0x18	; 24
    25a0:	81 50       	subi	r24, 0x01	; 1
    25a2:	90 40       	sbci	r25, 0x00	; 0
    25a4:	a0 40       	sbci	r26, 0x00	; 0
    25a6:	e1 f7       	brne	.-8      	; 0x25a0 <main+0x69c>
    25a8:	00 c0       	rjmp	.+0      	; 0x25aa <main+0x6a6>
    25aa:	00 00       	nop
    25ac:	01 e2       	ldi	r16, 0x21	; 33
    25ae:	10 e0       	ldi	r17, 0x00	; 0
				_delay_ms(1000);
				for (i=0;i<=3;i++)
				{
					do
					{
						value=keypad_u8check_press();
    25b0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <keypad_u8check_press>
    25b4:	c8 2f       	mov	r28, r24
					}while (value==NOTPRESSED);
    25b6:	8f 3f       	cpi	r24, 0xFF	; 255
    25b8:	d9 f3       	breq	.-10     	; 0x25b0 <main+0x6ac>
					LCD_displayCharacter(value);
    25ba:	0e 94 01 03 	call	0x602	; 0x602 <LCD_displayCharacter>
					pass = pass * 10 + (value - '0');
    25be:	80 91 69 04 	lds	r24, 0x0469
    25c2:	90 91 6a 04 	lds	r25, 0x046A
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	9c 01       	movw	r18, r24
    25cc:	22 0f       	add	r18, r18
    25ce:	33 1f       	adc	r19, r19
    25d0:	22 0f       	add	r18, r18
    25d2:	33 1f       	adc	r19, r19
    25d4:	82 0f       	add	r24, r18
    25d6:	93 1f       	adc	r25, r19
    25d8:	c0 97       	sbiw	r24, 0x30	; 48
    25da:	8c 0f       	add	r24, r28
    25dc:	91 1d       	adc	r25, r1
    25de:	90 93 6a 04 	sts	0x046A, r25
    25e2:	80 93 69 04 	sts	0x0469, r24
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	92 e5       	ldi	r25, 0x52	; 82
    25ea:	a7 e0       	ldi	r26, 0x07	; 7
    25ec:	81 50       	subi	r24, 0x01	; 1
    25ee:	90 40       	sbci	r25, 0x00	; 0
    25f0:	a0 40       	sbci	r26, 0x00	; 0
    25f2:	e1 f7       	brne	.-8      	; 0x25ec <main+0x6e8>
    25f4:	00 c0       	rjmp	.+0      	; 0x25f6 <main+0x6f2>
    25f6:	00 00       	nop

	}
}


int main()
    25f8:	60 2f       	mov	r22, r16
    25fa:	65 51       	subi	r22, 0x15	; 21
						value=keypad_u8check_press();
					}while (value==NOTPRESSED);
					LCD_displayCharacter(value);
					pass = pass * 10 + (value - '0');
					_delay_ms(300);
					LCD_setCursor(0,12+i);
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_setCursor>
					LCD_displayCharacter('*');
    2602:	8a e2       	ldi	r24, 0x2A	; 42
    2604:	0e 94 01 03 	call	0x602	; 0x602 <LCD_displayCharacter>
    2608:	8f ef       	ldi	r24, 0xFF	; 255
    260a:	94 e3       	ldi	r25, 0x34	; 52
    260c:	ac e0       	ldi	r26, 0x0C	; 12
    260e:	81 50       	subi	r24, 0x01	; 1
    2610:	90 40       	sbci	r25, 0x00	; 0
    2612:	a0 40       	sbci	r26, 0x00	; 0
    2614:	e1 f7       	brne	.-8      	; 0x260e <main+0x70a>
    2616:	00 c0       	rjmp	.+0      	; 0x2618 <main+0x714>
    2618:	00 00       	nop
					_delay_ms(500);
					EEPROM_write(EEPROM_PASSWORD_LOCATION1+i,value);
    261a:	c8 01       	movw	r24, r16
    261c:	6c 2f       	mov	r22, r28
    261e:	0e 94 79 07 	call	0xef2	; 0xef2 <EEPROM_write>
    2622:	0f 5f       	subi	r16, 0xFF	; 255
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
				pass = 0;
				LCD_clearScreen();
				LCD_displayString("change pass:");
				LCD_setCursor(0,12);
				_delay_ms(1000);
				for (i=0;i<=3;i++)
    2626:	05 32       	cpi	r16, 0x25	; 37
    2628:	11 05       	cpc	r17, r1
    262a:	11 f6       	brne	.-124    	; 0x25b0 <main+0x6ac>
					LCD_setCursor(0,12+i);
					LCD_displayCharacter('*');
					_delay_ms(500);
					EEPROM_write(EEPROM_PASSWORD_LOCATION1+i,value);
				}
				EEPROM_write(EEPROM_STATUS_LOCATION,0x00);
    262c:	80 e2       	ldi	r24, 0x20	; 32
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	0e 94 79 07 	call	0xef2	; 0xef2 <EEPROM_write>
				LCD_clearScreen();
    2636:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
				LCD_displayString("Password is set");
    263a:	81 e8       	ldi	r24, 0x81	; 129
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_displayString>
    2642:	8f ef       	ldi	r24, 0xFF	; 255
    2644:	99 e6       	ldi	r25, 0x69	; 105
    2646:	a8 e1       	ldi	r26, 0x18	; 24
    2648:	81 50       	subi	r24, 0x01	; 1
    264a:	90 40       	sbci	r25, 0x00	; 0
    264c:	a0 40       	sbci	r26, 0x00	; 0
    264e:	e1 f7       	brne	.-8      	; 0x2648 <main+0x744>
    2650:	00 c0       	rjmp	.+0      	; 0x2652 <main+0x74e>
    2652:	00 00       	nop
				_delay_ms(1000);
				LCD_clearScreen();
    2654:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <LCD_clearScreen>
			}
			i = 0;
			entered_password = 0;			
    2658:	10 92 6c 04 	sts	0x046C, r1
    265c:	10 92 6b 04 	sts	0x046B, r1
				LCD_clearScreen();
				LCD_displayString("Password is set");
				_delay_ms(1000);
				LCD_clearScreen();
			}
			i = 0;
    2660:	10 e0       	ldi	r17, 0x00	; 0
    2662:	95 cd       	rjmp	.-1238   	; 0x218e <main+0x28a>

00002664 <__subsf3>:
    2664:	50 58       	subi	r21, 0x80	; 128

00002666 <__addsf3>:
    2666:	bb 27       	eor	r27, r27
    2668:	aa 27       	eor	r26, r26
    266a:	0e d0       	rcall	.+28     	; 0x2688 <__addsf3x>
    266c:	75 c1       	rjmp	.+746    	; 0x2958 <__fp_round>
    266e:	66 d1       	rcall	.+716    	; 0x293c <__fp_pscA>
    2670:	30 f0       	brcs	.+12     	; 0x267e <__addsf3+0x18>
    2672:	6b d1       	rcall	.+726    	; 0x294a <__fp_pscB>
    2674:	20 f0       	brcs	.+8      	; 0x267e <__addsf3+0x18>
    2676:	31 f4       	brne	.+12     	; 0x2684 <__addsf3+0x1e>
    2678:	9f 3f       	cpi	r25, 0xFF	; 255
    267a:	11 f4       	brne	.+4      	; 0x2680 <__addsf3+0x1a>
    267c:	1e f4       	brtc	.+6      	; 0x2684 <__addsf3+0x1e>
    267e:	5b c1       	rjmp	.+694    	; 0x2936 <__fp_nan>
    2680:	0e f4       	brtc	.+2      	; 0x2684 <__addsf3+0x1e>
    2682:	e0 95       	com	r30
    2684:	e7 fb       	bst	r30, 7
    2686:	51 c1       	rjmp	.+674    	; 0x292a <__fp_inf>

00002688 <__addsf3x>:
    2688:	e9 2f       	mov	r30, r25
    268a:	77 d1       	rcall	.+750    	; 0x297a <__fp_split3>
    268c:	80 f3       	brcs	.-32     	; 0x266e <__addsf3+0x8>
    268e:	ba 17       	cp	r27, r26
    2690:	62 07       	cpc	r22, r18
    2692:	73 07       	cpc	r23, r19
    2694:	84 07       	cpc	r24, r20
    2696:	95 07       	cpc	r25, r21
    2698:	18 f0       	brcs	.+6      	; 0x26a0 <__addsf3x+0x18>
    269a:	71 f4       	brne	.+28     	; 0x26b8 <__addsf3x+0x30>
    269c:	9e f5       	brtc	.+102    	; 0x2704 <__addsf3x+0x7c>
    269e:	8f c1       	rjmp	.+798    	; 0x29be <__fp_zero>
    26a0:	0e f4       	brtc	.+2      	; 0x26a4 <__addsf3x+0x1c>
    26a2:	e0 95       	com	r30
    26a4:	0b 2e       	mov	r0, r27
    26a6:	ba 2f       	mov	r27, r26
    26a8:	a0 2d       	mov	r26, r0
    26aa:	0b 01       	movw	r0, r22
    26ac:	b9 01       	movw	r22, r18
    26ae:	90 01       	movw	r18, r0
    26b0:	0c 01       	movw	r0, r24
    26b2:	ca 01       	movw	r24, r20
    26b4:	a0 01       	movw	r20, r0
    26b6:	11 24       	eor	r1, r1
    26b8:	ff 27       	eor	r31, r31
    26ba:	59 1b       	sub	r21, r25
    26bc:	99 f0       	breq	.+38     	; 0x26e4 <__addsf3x+0x5c>
    26be:	59 3f       	cpi	r21, 0xF9	; 249
    26c0:	50 f4       	brcc	.+20     	; 0x26d6 <__addsf3x+0x4e>
    26c2:	50 3e       	cpi	r21, 0xE0	; 224
    26c4:	68 f1       	brcs	.+90     	; 0x2720 <__addsf3x+0x98>
    26c6:	1a 16       	cp	r1, r26
    26c8:	f0 40       	sbci	r31, 0x00	; 0
    26ca:	a2 2f       	mov	r26, r18
    26cc:	23 2f       	mov	r18, r19
    26ce:	34 2f       	mov	r19, r20
    26d0:	44 27       	eor	r20, r20
    26d2:	58 5f       	subi	r21, 0xF8	; 248
    26d4:	f3 cf       	rjmp	.-26     	; 0x26bc <__addsf3x+0x34>
    26d6:	46 95       	lsr	r20
    26d8:	37 95       	ror	r19
    26da:	27 95       	ror	r18
    26dc:	a7 95       	ror	r26
    26de:	f0 40       	sbci	r31, 0x00	; 0
    26e0:	53 95       	inc	r21
    26e2:	c9 f7       	brne	.-14     	; 0x26d6 <__addsf3x+0x4e>
    26e4:	7e f4       	brtc	.+30     	; 0x2704 <__addsf3x+0x7c>
    26e6:	1f 16       	cp	r1, r31
    26e8:	ba 0b       	sbc	r27, r26
    26ea:	62 0b       	sbc	r22, r18
    26ec:	73 0b       	sbc	r23, r19
    26ee:	84 0b       	sbc	r24, r20
    26f0:	ba f0       	brmi	.+46     	; 0x2720 <__addsf3x+0x98>
    26f2:	91 50       	subi	r25, 0x01	; 1
    26f4:	a1 f0       	breq	.+40     	; 0x271e <__addsf3x+0x96>
    26f6:	ff 0f       	add	r31, r31
    26f8:	bb 1f       	adc	r27, r27
    26fa:	66 1f       	adc	r22, r22
    26fc:	77 1f       	adc	r23, r23
    26fe:	88 1f       	adc	r24, r24
    2700:	c2 f7       	brpl	.-16     	; 0x26f2 <__addsf3x+0x6a>
    2702:	0e c0       	rjmp	.+28     	; 0x2720 <__addsf3x+0x98>
    2704:	ba 0f       	add	r27, r26
    2706:	62 1f       	adc	r22, r18
    2708:	73 1f       	adc	r23, r19
    270a:	84 1f       	adc	r24, r20
    270c:	48 f4       	brcc	.+18     	; 0x2720 <__addsf3x+0x98>
    270e:	87 95       	ror	r24
    2710:	77 95       	ror	r23
    2712:	67 95       	ror	r22
    2714:	b7 95       	ror	r27
    2716:	f7 95       	ror	r31
    2718:	9e 3f       	cpi	r25, 0xFE	; 254
    271a:	08 f0       	brcs	.+2      	; 0x271e <__addsf3x+0x96>
    271c:	b3 cf       	rjmp	.-154    	; 0x2684 <__addsf3+0x1e>
    271e:	93 95       	inc	r25
    2720:	88 0f       	add	r24, r24
    2722:	08 f0       	brcs	.+2      	; 0x2726 <__addsf3x+0x9e>
    2724:	99 27       	eor	r25, r25
    2726:	ee 0f       	add	r30, r30
    2728:	97 95       	ror	r25
    272a:	87 95       	ror	r24
    272c:	08 95       	ret

0000272e <__cmpsf2>:
    272e:	d9 d0       	rcall	.+434    	; 0x28e2 <__fp_cmp>
    2730:	08 f4       	brcc	.+2      	; 0x2734 <__cmpsf2+0x6>
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	08 95       	ret

00002736 <__divsf3>:
    2736:	0c d0       	rcall	.+24     	; 0x2750 <__divsf3x>
    2738:	0f c1       	rjmp	.+542    	; 0x2958 <__fp_round>
    273a:	07 d1       	rcall	.+526    	; 0x294a <__fp_pscB>
    273c:	40 f0       	brcs	.+16     	; 0x274e <__divsf3+0x18>
    273e:	fe d0       	rcall	.+508    	; 0x293c <__fp_pscA>
    2740:	30 f0       	brcs	.+12     	; 0x274e <__divsf3+0x18>
    2742:	21 f4       	brne	.+8      	; 0x274c <__divsf3+0x16>
    2744:	5f 3f       	cpi	r21, 0xFF	; 255
    2746:	19 f0       	breq	.+6      	; 0x274e <__divsf3+0x18>
    2748:	f0 c0       	rjmp	.+480    	; 0x292a <__fp_inf>
    274a:	51 11       	cpse	r21, r1
    274c:	39 c1       	rjmp	.+626    	; 0x29c0 <__fp_szero>
    274e:	f3 c0       	rjmp	.+486    	; 0x2936 <__fp_nan>

00002750 <__divsf3x>:
    2750:	14 d1       	rcall	.+552    	; 0x297a <__fp_split3>
    2752:	98 f3       	brcs	.-26     	; 0x273a <__divsf3+0x4>

00002754 <__divsf3_pse>:
    2754:	99 23       	and	r25, r25
    2756:	c9 f3       	breq	.-14     	; 0x274a <__divsf3+0x14>
    2758:	55 23       	and	r21, r21
    275a:	b1 f3       	breq	.-20     	; 0x2748 <__divsf3+0x12>
    275c:	95 1b       	sub	r25, r21
    275e:	55 0b       	sbc	r21, r21
    2760:	bb 27       	eor	r27, r27
    2762:	aa 27       	eor	r26, r26
    2764:	62 17       	cp	r22, r18
    2766:	73 07       	cpc	r23, r19
    2768:	84 07       	cpc	r24, r20
    276a:	38 f0       	brcs	.+14     	; 0x277a <__divsf3_pse+0x26>
    276c:	9f 5f       	subi	r25, 0xFF	; 255
    276e:	5f 4f       	sbci	r21, 0xFF	; 255
    2770:	22 0f       	add	r18, r18
    2772:	33 1f       	adc	r19, r19
    2774:	44 1f       	adc	r20, r20
    2776:	aa 1f       	adc	r26, r26
    2778:	a9 f3       	breq	.-22     	; 0x2764 <__divsf3_pse+0x10>
    277a:	33 d0       	rcall	.+102    	; 0x27e2 <__divsf3_pse+0x8e>
    277c:	0e 2e       	mov	r0, r30
    277e:	3a f0       	brmi	.+14     	; 0x278e <__divsf3_pse+0x3a>
    2780:	e0 e8       	ldi	r30, 0x80	; 128
    2782:	30 d0       	rcall	.+96     	; 0x27e4 <__divsf3_pse+0x90>
    2784:	91 50       	subi	r25, 0x01	; 1
    2786:	50 40       	sbci	r21, 0x00	; 0
    2788:	e6 95       	lsr	r30
    278a:	00 1c       	adc	r0, r0
    278c:	ca f7       	brpl	.-14     	; 0x2780 <__divsf3_pse+0x2c>
    278e:	29 d0       	rcall	.+82     	; 0x27e2 <__divsf3_pse+0x8e>
    2790:	fe 2f       	mov	r31, r30
    2792:	27 d0       	rcall	.+78     	; 0x27e2 <__divsf3_pse+0x8e>
    2794:	66 0f       	add	r22, r22
    2796:	77 1f       	adc	r23, r23
    2798:	88 1f       	adc	r24, r24
    279a:	bb 1f       	adc	r27, r27
    279c:	26 17       	cp	r18, r22
    279e:	37 07       	cpc	r19, r23
    27a0:	48 07       	cpc	r20, r24
    27a2:	ab 07       	cpc	r26, r27
    27a4:	b0 e8       	ldi	r27, 0x80	; 128
    27a6:	09 f0       	breq	.+2      	; 0x27aa <__divsf3_pse+0x56>
    27a8:	bb 0b       	sbc	r27, r27
    27aa:	80 2d       	mov	r24, r0
    27ac:	bf 01       	movw	r22, r30
    27ae:	ff 27       	eor	r31, r31
    27b0:	93 58       	subi	r25, 0x83	; 131
    27b2:	5f 4f       	sbci	r21, 0xFF	; 255
    27b4:	2a f0       	brmi	.+10     	; 0x27c0 <__divsf3_pse+0x6c>
    27b6:	9e 3f       	cpi	r25, 0xFE	; 254
    27b8:	51 05       	cpc	r21, r1
    27ba:	68 f0       	brcs	.+26     	; 0x27d6 <__divsf3_pse+0x82>
    27bc:	b6 c0       	rjmp	.+364    	; 0x292a <__fp_inf>
    27be:	00 c1       	rjmp	.+512    	; 0x29c0 <__fp_szero>
    27c0:	5f 3f       	cpi	r21, 0xFF	; 255
    27c2:	ec f3       	brlt	.-6      	; 0x27be <__divsf3_pse+0x6a>
    27c4:	98 3e       	cpi	r25, 0xE8	; 232
    27c6:	dc f3       	brlt	.-10     	; 0x27be <__divsf3_pse+0x6a>
    27c8:	86 95       	lsr	r24
    27ca:	77 95       	ror	r23
    27cc:	67 95       	ror	r22
    27ce:	b7 95       	ror	r27
    27d0:	f7 95       	ror	r31
    27d2:	9f 5f       	subi	r25, 0xFF	; 255
    27d4:	c9 f7       	brne	.-14     	; 0x27c8 <__divsf3_pse+0x74>
    27d6:	88 0f       	add	r24, r24
    27d8:	91 1d       	adc	r25, r1
    27da:	96 95       	lsr	r25
    27dc:	87 95       	ror	r24
    27de:	97 f9       	bld	r25, 7
    27e0:	08 95       	ret
    27e2:	e1 e0       	ldi	r30, 0x01	; 1
    27e4:	66 0f       	add	r22, r22
    27e6:	77 1f       	adc	r23, r23
    27e8:	88 1f       	adc	r24, r24
    27ea:	bb 1f       	adc	r27, r27
    27ec:	62 17       	cp	r22, r18
    27ee:	73 07       	cpc	r23, r19
    27f0:	84 07       	cpc	r24, r20
    27f2:	ba 07       	cpc	r27, r26
    27f4:	20 f0       	brcs	.+8      	; 0x27fe <__divsf3_pse+0xaa>
    27f6:	62 1b       	sub	r22, r18
    27f8:	73 0b       	sbc	r23, r19
    27fa:	84 0b       	sbc	r24, r20
    27fc:	ba 0b       	sbc	r27, r26
    27fe:	ee 1f       	adc	r30, r30
    2800:	88 f7       	brcc	.-30     	; 0x27e4 <__divsf3_pse+0x90>
    2802:	e0 95       	com	r30
    2804:	08 95       	ret

00002806 <__fixsfsi>:
    2806:	04 d0       	rcall	.+8      	; 0x2810 <__fixunssfsi>
    2808:	68 94       	set
    280a:	b1 11       	cpse	r27, r1
    280c:	d9 c0       	rjmp	.+434    	; 0x29c0 <__fp_szero>
    280e:	08 95       	ret

00002810 <__fixunssfsi>:
    2810:	bc d0       	rcall	.+376    	; 0x298a <__fp_splitA>
    2812:	88 f0       	brcs	.+34     	; 0x2836 <__fixunssfsi+0x26>
    2814:	9f 57       	subi	r25, 0x7F	; 127
    2816:	90 f0       	brcs	.+36     	; 0x283c <__fixunssfsi+0x2c>
    2818:	b9 2f       	mov	r27, r25
    281a:	99 27       	eor	r25, r25
    281c:	b7 51       	subi	r27, 0x17	; 23
    281e:	a0 f0       	brcs	.+40     	; 0x2848 <__fixunssfsi+0x38>
    2820:	d1 f0       	breq	.+52     	; 0x2856 <__fixunssfsi+0x46>
    2822:	66 0f       	add	r22, r22
    2824:	77 1f       	adc	r23, r23
    2826:	88 1f       	adc	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	1a f0       	brmi	.+6      	; 0x2832 <__fixunssfsi+0x22>
    282c:	ba 95       	dec	r27
    282e:	c9 f7       	brne	.-14     	; 0x2822 <__fixunssfsi+0x12>
    2830:	12 c0       	rjmp	.+36     	; 0x2856 <__fixunssfsi+0x46>
    2832:	b1 30       	cpi	r27, 0x01	; 1
    2834:	81 f0       	breq	.+32     	; 0x2856 <__fixunssfsi+0x46>
    2836:	c3 d0       	rcall	.+390    	; 0x29be <__fp_zero>
    2838:	b1 e0       	ldi	r27, 0x01	; 1
    283a:	08 95       	ret
    283c:	c0 c0       	rjmp	.+384    	; 0x29be <__fp_zero>
    283e:	67 2f       	mov	r22, r23
    2840:	78 2f       	mov	r23, r24
    2842:	88 27       	eor	r24, r24
    2844:	b8 5f       	subi	r27, 0xF8	; 248
    2846:	39 f0       	breq	.+14     	; 0x2856 <__fixunssfsi+0x46>
    2848:	b9 3f       	cpi	r27, 0xF9	; 249
    284a:	cc f3       	brlt	.-14     	; 0x283e <__fixunssfsi+0x2e>
    284c:	86 95       	lsr	r24
    284e:	77 95       	ror	r23
    2850:	67 95       	ror	r22
    2852:	b3 95       	inc	r27
    2854:	d9 f7       	brne	.-10     	; 0x284c <__fixunssfsi+0x3c>
    2856:	3e f4       	brtc	.+14     	; 0x2866 <__fixunssfsi+0x56>
    2858:	90 95       	com	r25
    285a:	80 95       	com	r24
    285c:	70 95       	com	r23
    285e:	61 95       	neg	r22
    2860:	7f 4f       	sbci	r23, 0xFF	; 255
    2862:	8f 4f       	sbci	r24, 0xFF	; 255
    2864:	9f 4f       	sbci	r25, 0xFF	; 255
    2866:	08 95       	ret

00002868 <__floatunsisf>:
    2868:	e8 94       	clt
    286a:	09 c0       	rjmp	.+18     	; 0x287e <__floatsisf+0x12>

0000286c <__floatsisf>:
    286c:	97 fb       	bst	r25, 7
    286e:	3e f4       	brtc	.+14     	; 0x287e <__floatsisf+0x12>
    2870:	90 95       	com	r25
    2872:	80 95       	com	r24
    2874:	70 95       	com	r23
    2876:	61 95       	neg	r22
    2878:	7f 4f       	sbci	r23, 0xFF	; 255
    287a:	8f 4f       	sbci	r24, 0xFF	; 255
    287c:	9f 4f       	sbci	r25, 0xFF	; 255
    287e:	99 23       	and	r25, r25
    2880:	a9 f0       	breq	.+42     	; 0x28ac <__floatsisf+0x40>
    2882:	f9 2f       	mov	r31, r25
    2884:	96 e9       	ldi	r25, 0x96	; 150
    2886:	bb 27       	eor	r27, r27
    2888:	93 95       	inc	r25
    288a:	f6 95       	lsr	r31
    288c:	87 95       	ror	r24
    288e:	77 95       	ror	r23
    2890:	67 95       	ror	r22
    2892:	b7 95       	ror	r27
    2894:	f1 11       	cpse	r31, r1
    2896:	f8 cf       	rjmp	.-16     	; 0x2888 <__floatsisf+0x1c>
    2898:	fa f4       	brpl	.+62     	; 0x28d8 <__floatsisf+0x6c>
    289a:	bb 0f       	add	r27, r27
    289c:	11 f4       	brne	.+4      	; 0x28a2 <__floatsisf+0x36>
    289e:	60 ff       	sbrs	r22, 0
    28a0:	1b c0       	rjmp	.+54     	; 0x28d8 <__floatsisf+0x6c>
    28a2:	6f 5f       	subi	r22, 0xFF	; 255
    28a4:	7f 4f       	sbci	r23, 0xFF	; 255
    28a6:	8f 4f       	sbci	r24, 0xFF	; 255
    28a8:	9f 4f       	sbci	r25, 0xFF	; 255
    28aa:	16 c0       	rjmp	.+44     	; 0x28d8 <__floatsisf+0x6c>
    28ac:	88 23       	and	r24, r24
    28ae:	11 f0       	breq	.+4      	; 0x28b4 <__floatsisf+0x48>
    28b0:	96 e9       	ldi	r25, 0x96	; 150
    28b2:	11 c0       	rjmp	.+34     	; 0x28d6 <__floatsisf+0x6a>
    28b4:	77 23       	and	r23, r23
    28b6:	21 f0       	breq	.+8      	; 0x28c0 <__floatsisf+0x54>
    28b8:	9e e8       	ldi	r25, 0x8E	; 142
    28ba:	87 2f       	mov	r24, r23
    28bc:	76 2f       	mov	r23, r22
    28be:	05 c0       	rjmp	.+10     	; 0x28ca <__floatsisf+0x5e>
    28c0:	66 23       	and	r22, r22
    28c2:	71 f0       	breq	.+28     	; 0x28e0 <__floatsisf+0x74>
    28c4:	96 e8       	ldi	r25, 0x86	; 134
    28c6:	86 2f       	mov	r24, r22
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	2a f0       	brmi	.+10     	; 0x28d8 <__floatsisf+0x6c>
    28ce:	9a 95       	dec	r25
    28d0:	66 0f       	add	r22, r22
    28d2:	77 1f       	adc	r23, r23
    28d4:	88 1f       	adc	r24, r24
    28d6:	da f7       	brpl	.-10     	; 0x28ce <__floatsisf+0x62>
    28d8:	88 0f       	add	r24, r24
    28da:	96 95       	lsr	r25
    28dc:	87 95       	ror	r24
    28de:	97 f9       	bld	r25, 7
    28e0:	08 95       	ret

000028e2 <__fp_cmp>:
    28e2:	99 0f       	add	r25, r25
    28e4:	00 08       	sbc	r0, r0
    28e6:	55 0f       	add	r21, r21
    28e8:	aa 0b       	sbc	r26, r26
    28ea:	e0 e8       	ldi	r30, 0x80	; 128
    28ec:	fe ef       	ldi	r31, 0xFE	; 254
    28ee:	16 16       	cp	r1, r22
    28f0:	17 06       	cpc	r1, r23
    28f2:	e8 07       	cpc	r30, r24
    28f4:	f9 07       	cpc	r31, r25
    28f6:	c0 f0       	brcs	.+48     	; 0x2928 <__fp_cmp+0x46>
    28f8:	12 16       	cp	r1, r18
    28fa:	13 06       	cpc	r1, r19
    28fc:	e4 07       	cpc	r30, r20
    28fe:	f5 07       	cpc	r31, r21
    2900:	98 f0       	brcs	.+38     	; 0x2928 <__fp_cmp+0x46>
    2902:	62 1b       	sub	r22, r18
    2904:	73 0b       	sbc	r23, r19
    2906:	84 0b       	sbc	r24, r20
    2908:	95 0b       	sbc	r25, r21
    290a:	39 f4       	brne	.+14     	; 0x291a <__fp_cmp+0x38>
    290c:	0a 26       	eor	r0, r26
    290e:	61 f0       	breq	.+24     	; 0x2928 <__fp_cmp+0x46>
    2910:	23 2b       	or	r18, r19
    2912:	24 2b       	or	r18, r20
    2914:	25 2b       	or	r18, r21
    2916:	21 f4       	brne	.+8      	; 0x2920 <__fp_cmp+0x3e>
    2918:	08 95       	ret
    291a:	0a 26       	eor	r0, r26
    291c:	09 f4       	brne	.+2      	; 0x2920 <__fp_cmp+0x3e>
    291e:	a1 40       	sbci	r26, 0x01	; 1
    2920:	a6 95       	lsr	r26
    2922:	8f ef       	ldi	r24, 0xFF	; 255
    2924:	81 1d       	adc	r24, r1
    2926:	81 1d       	adc	r24, r1
    2928:	08 95       	ret

0000292a <__fp_inf>:
    292a:	97 f9       	bld	r25, 7
    292c:	9f 67       	ori	r25, 0x7F	; 127
    292e:	80 e8       	ldi	r24, 0x80	; 128
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	08 95       	ret

00002936 <__fp_nan>:
    2936:	9f ef       	ldi	r25, 0xFF	; 255
    2938:	80 ec       	ldi	r24, 0xC0	; 192
    293a:	08 95       	ret

0000293c <__fp_pscA>:
    293c:	00 24       	eor	r0, r0
    293e:	0a 94       	dec	r0
    2940:	16 16       	cp	r1, r22
    2942:	17 06       	cpc	r1, r23
    2944:	18 06       	cpc	r1, r24
    2946:	09 06       	cpc	r0, r25
    2948:	08 95       	ret

0000294a <__fp_pscB>:
    294a:	00 24       	eor	r0, r0
    294c:	0a 94       	dec	r0
    294e:	12 16       	cp	r1, r18
    2950:	13 06       	cpc	r1, r19
    2952:	14 06       	cpc	r1, r20
    2954:	05 06       	cpc	r0, r21
    2956:	08 95       	ret

00002958 <__fp_round>:
    2958:	09 2e       	mov	r0, r25
    295a:	03 94       	inc	r0
    295c:	00 0c       	add	r0, r0
    295e:	11 f4       	brne	.+4      	; 0x2964 <__fp_round+0xc>
    2960:	88 23       	and	r24, r24
    2962:	52 f0       	brmi	.+20     	; 0x2978 <__fp_round+0x20>
    2964:	bb 0f       	add	r27, r27
    2966:	40 f4       	brcc	.+16     	; 0x2978 <__fp_round+0x20>
    2968:	bf 2b       	or	r27, r31
    296a:	11 f4       	brne	.+4      	; 0x2970 <__fp_round+0x18>
    296c:	60 ff       	sbrs	r22, 0
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <__fp_round+0x20>
    2970:	6f 5f       	subi	r22, 0xFF	; 255
    2972:	7f 4f       	sbci	r23, 0xFF	; 255
    2974:	8f 4f       	sbci	r24, 0xFF	; 255
    2976:	9f 4f       	sbci	r25, 0xFF	; 255
    2978:	08 95       	ret

0000297a <__fp_split3>:
    297a:	57 fd       	sbrc	r21, 7
    297c:	90 58       	subi	r25, 0x80	; 128
    297e:	44 0f       	add	r20, r20
    2980:	55 1f       	adc	r21, r21
    2982:	59 f0       	breq	.+22     	; 0x299a <__fp_splitA+0x10>
    2984:	5f 3f       	cpi	r21, 0xFF	; 255
    2986:	71 f0       	breq	.+28     	; 0x29a4 <__fp_splitA+0x1a>
    2988:	47 95       	ror	r20

0000298a <__fp_splitA>:
    298a:	88 0f       	add	r24, r24
    298c:	97 fb       	bst	r25, 7
    298e:	99 1f       	adc	r25, r25
    2990:	61 f0       	breq	.+24     	; 0x29aa <__fp_splitA+0x20>
    2992:	9f 3f       	cpi	r25, 0xFF	; 255
    2994:	79 f0       	breq	.+30     	; 0x29b4 <__fp_splitA+0x2a>
    2996:	87 95       	ror	r24
    2998:	08 95       	ret
    299a:	12 16       	cp	r1, r18
    299c:	13 06       	cpc	r1, r19
    299e:	14 06       	cpc	r1, r20
    29a0:	55 1f       	adc	r21, r21
    29a2:	f2 cf       	rjmp	.-28     	; 0x2988 <__fp_split3+0xe>
    29a4:	46 95       	lsr	r20
    29a6:	f1 df       	rcall	.-30     	; 0x298a <__fp_splitA>
    29a8:	08 c0       	rjmp	.+16     	; 0x29ba <__fp_splitA+0x30>
    29aa:	16 16       	cp	r1, r22
    29ac:	17 06       	cpc	r1, r23
    29ae:	18 06       	cpc	r1, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	f1 cf       	rjmp	.-30     	; 0x2996 <__fp_splitA+0xc>
    29b4:	86 95       	lsr	r24
    29b6:	71 05       	cpc	r23, r1
    29b8:	61 05       	cpc	r22, r1
    29ba:	08 94       	sec
    29bc:	08 95       	ret

000029be <__fp_zero>:
    29be:	e8 94       	clt

000029c0 <__fp_szero>:
    29c0:	bb 27       	eor	r27, r27
    29c2:	66 27       	eor	r22, r22
    29c4:	77 27       	eor	r23, r23
    29c6:	cb 01       	movw	r24, r22
    29c8:	97 f9       	bld	r25, 7
    29ca:	08 95       	ret

000029cc <__gesf2>:
    29cc:	8a df       	rcall	.-236    	; 0x28e2 <__fp_cmp>
    29ce:	08 f4       	brcc	.+2      	; 0x29d2 <__gesf2+0x6>
    29d0:	8f ef       	ldi	r24, 0xFF	; 255
    29d2:	08 95       	ret

000029d4 <__mulsf3>:
    29d4:	0b d0       	rcall	.+22     	; 0x29ec <__mulsf3x>
    29d6:	c0 cf       	rjmp	.-128    	; 0x2958 <__fp_round>
    29d8:	b1 df       	rcall	.-158    	; 0x293c <__fp_pscA>
    29da:	28 f0       	brcs	.+10     	; 0x29e6 <__mulsf3+0x12>
    29dc:	b6 df       	rcall	.-148    	; 0x294a <__fp_pscB>
    29de:	18 f0       	brcs	.+6      	; 0x29e6 <__mulsf3+0x12>
    29e0:	95 23       	and	r25, r21
    29e2:	09 f0       	breq	.+2      	; 0x29e6 <__mulsf3+0x12>
    29e4:	a2 cf       	rjmp	.-188    	; 0x292a <__fp_inf>
    29e6:	a7 cf       	rjmp	.-178    	; 0x2936 <__fp_nan>
    29e8:	11 24       	eor	r1, r1
    29ea:	ea cf       	rjmp	.-44     	; 0x29c0 <__fp_szero>

000029ec <__mulsf3x>:
    29ec:	c6 df       	rcall	.-116    	; 0x297a <__fp_split3>
    29ee:	a0 f3       	brcs	.-24     	; 0x29d8 <__mulsf3+0x4>

000029f0 <__mulsf3_pse>:
    29f0:	95 9f       	mul	r25, r21
    29f2:	d1 f3       	breq	.-12     	; 0x29e8 <__mulsf3+0x14>
    29f4:	95 0f       	add	r25, r21
    29f6:	50 e0       	ldi	r21, 0x00	; 0
    29f8:	55 1f       	adc	r21, r21
    29fa:	62 9f       	mul	r22, r18
    29fc:	f0 01       	movw	r30, r0
    29fe:	72 9f       	mul	r23, r18
    2a00:	bb 27       	eor	r27, r27
    2a02:	f0 0d       	add	r31, r0
    2a04:	b1 1d       	adc	r27, r1
    2a06:	63 9f       	mul	r22, r19
    2a08:	aa 27       	eor	r26, r26
    2a0a:	f0 0d       	add	r31, r0
    2a0c:	b1 1d       	adc	r27, r1
    2a0e:	aa 1f       	adc	r26, r26
    2a10:	64 9f       	mul	r22, r20
    2a12:	66 27       	eor	r22, r22
    2a14:	b0 0d       	add	r27, r0
    2a16:	a1 1d       	adc	r26, r1
    2a18:	66 1f       	adc	r22, r22
    2a1a:	82 9f       	mul	r24, r18
    2a1c:	22 27       	eor	r18, r18
    2a1e:	b0 0d       	add	r27, r0
    2a20:	a1 1d       	adc	r26, r1
    2a22:	62 1f       	adc	r22, r18
    2a24:	73 9f       	mul	r23, r19
    2a26:	b0 0d       	add	r27, r0
    2a28:	a1 1d       	adc	r26, r1
    2a2a:	62 1f       	adc	r22, r18
    2a2c:	83 9f       	mul	r24, r19
    2a2e:	a0 0d       	add	r26, r0
    2a30:	61 1d       	adc	r22, r1
    2a32:	22 1f       	adc	r18, r18
    2a34:	74 9f       	mul	r23, r20
    2a36:	33 27       	eor	r19, r19
    2a38:	a0 0d       	add	r26, r0
    2a3a:	61 1d       	adc	r22, r1
    2a3c:	23 1f       	adc	r18, r19
    2a3e:	84 9f       	mul	r24, r20
    2a40:	60 0d       	add	r22, r0
    2a42:	21 1d       	adc	r18, r1
    2a44:	82 2f       	mov	r24, r18
    2a46:	76 2f       	mov	r23, r22
    2a48:	6a 2f       	mov	r22, r26
    2a4a:	11 24       	eor	r1, r1
    2a4c:	9f 57       	subi	r25, 0x7F	; 127
    2a4e:	50 40       	sbci	r21, 0x00	; 0
    2a50:	8a f0       	brmi	.+34     	; 0x2a74 <__mulsf3_pse+0x84>
    2a52:	e1 f0       	breq	.+56     	; 0x2a8c <__mulsf3_pse+0x9c>
    2a54:	88 23       	and	r24, r24
    2a56:	4a f0       	brmi	.+18     	; 0x2a6a <__mulsf3_pse+0x7a>
    2a58:	ee 0f       	add	r30, r30
    2a5a:	ff 1f       	adc	r31, r31
    2a5c:	bb 1f       	adc	r27, r27
    2a5e:	66 1f       	adc	r22, r22
    2a60:	77 1f       	adc	r23, r23
    2a62:	88 1f       	adc	r24, r24
    2a64:	91 50       	subi	r25, 0x01	; 1
    2a66:	50 40       	sbci	r21, 0x00	; 0
    2a68:	a9 f7       	brne	.-22     	; 0x2a54 <__mulsf3_pse+0x64>
    2a6a:	9e 3f       	cpi	r25, 0xFE	; 254
    2a6c:	51 05       	cpc	r21, r1
    2a6e:	70 f0       	brcs	.+28     	; 0x2a8c <__mulsf3_pse+0x9c>
    2a70:	5c cf       	rjmp	.-328    	; 0x292a <__fp_inf>
    2a72:	a6 cf       	rjmp	.-180    	; 0x29c0 <__fp_szero>
    2a74:	5f 3f       	cpi	r21, 0xFF	; 255
    2a76:	ec f3       	brlt	.-6      	; 0x2a72 <__mulsf3_pse+0x82>
    2a78:	98 3e       	cpi	r25, 0xE8	; 232
    2a7a:	dc f3       	brlt	.-10     	; 0x2a72 <__mulsf3_pse+0x82>
    2a7c:	86 95       	lsr	r24
    2a7e:	77 95       	ror	r23
    2a80:	67 95       	ror	r22
    2a82:	b7 95       	ror	r27
    2a84:	f7 95       	ror	r31
    2a86:	e7 95       	ror	r30
    2a88:	9f 5f       	subi	r25, 0xFF	; 255
    2a8a:	c1 f7       	brne	.-16     	; 0x2a7c <__mulsf3_pse+0x8c>
    2a8c:	fe 2b       	or	r31, r30
    2a8e:	88 0f       	add	r24, r24
    2a90:	91 1d       	adc	r25, r1
    2a92:	96 95       	lsr	r25
    2a94:	87 95       	ror	r24
    2a96:	97 f9       	bld	r25, 7
    2a98:	08 95       	ret

00002a9a <__mulsi3>:
    2a9a:	62 9f       	mul	r22, r18
    2a9c:	d0 01       	movw	r26, r0
    2a9e:	73 9f       	mul	r23, r19
    2aa0:	f0 01       	movw	r30, r0
    2aa2:	82 9f       	mul	r24, r18
    2aa4:	e0 0d       	add	r30, r0
    2aa6:	f1 1d       	adc	r31, r1
    2aa8:	64 9f       	mul	r22, r20
    2aaa:	e0 0d       	add	r30, r0
    2aac:	f1 1d       	adc	r31, r1
    2aae:	92 9f       	mul	r25, r18
    2ab0:	f0 0d       	add	r31, r0
    2ab2:	83 9f       	mul	r24, r19
    2ab4:	f0 0d       	add	r31, r0
    2ab6:	74 9f       	mul	r23, r20
    2ab8:	f0 0d       	add	r31, r0
    2aba:	65 9f       	mul	r22, r21
    2abc:	f0 0d       	add	r31, r0
    2abe:	99 27       	eor	r25, r25
    2ac0:	72 9f       	mul	r23, r18
    2ac2:	b0 0d       	add	r27, r0
    2ac4:	e1 1d       	adc	r30, r1
    2ac6:	f9 1f       	adc	r31, r25
    2ac8:	63 9f       	mul	r22, r19
    2aca:	b0 0d       	add	r27, r0
    2acc:	e1 1d       	adc	r30, r1
    2ace:	f9 1f       	adc	r31, r25
    2ad0:	bd 01       	movw	r22, r26
    2ad2:	cf 01       	movw	r24, r30
    2ad4:	11 24       	eor	r1, r1
    2ad6:	08 95       	ret

00002ad8 <__udivmodsi4>:
    2ad8:	a1 e2       	ldi	r26, 0x21	; 33
    2ada:	1a 2e       	mov	r1, r26
    2adc:	aa 1b       	sub	r26, r26
    2ade:	bb 1b       	sub	r27, r27
    2ae0:	fd 01       	movw	r30, r26
    2ae2:	0d c0       	rjmp	.+26     	; 0x2afe <__udivmodsi4_ep>

00002ae4 <__udivmodsi4_loop>:
    2ae4:	aa 1f       	adc	r26, r26
    2ae6:	bb 1f       	adc	r27, r27
    2ae8:	ee 1f       	adc	r30, r30
    2aea:	ff 1f       	adc	r31, r31
    2aec:	a2 17       	cp	r26, r18
    2aee:	b3 07       	cpc	r27, r19
    2af0:	e4 07       	cpc	r30, r20
    2af2:	f5 07       	cpc	r31, r21
    2af4:	20 f0       	brcs	.+8      	; 0x2afe <__udivmodsi4_ep>
    2af6:	a2 1b       	sub	r26, r18
    2af8:	b3 0b       	sbc	r27, r19
    2afa:	e4 0b       	sbc	r30, r20
    2afc:	f5 0b       	sbc	r31, r21

00002afe <__udivmodsi4_ep>:
    2afe:	66 1f       	adc	r22, r22
    2b00:	77 1f       	adc	r23, r23
    2b02:	88 1f       	adc	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	1a 94       	dec	r1
    2b08:	69 f7       	brne	.-38     	; 0x2ae4 <__udivmodsi4_loop>
    2b0a:	60 95       	com	r22
    2b0c:	70 95       	com	r23
    2b0e:	80 95       	com	r24
    2b10:	90 95       	com	r25
    2b12:	9b 01       	movw	r18, r22
    2b14:	ac 01       	movw	r20, r24
    2b16:	bd 01       	movw	r22, r26
    2b18:	cf 01       	movw	r24, r30
    2b1a:	08 95       	ret

00002b1c <itoa>:
    2b1c:	fb 01       	movw	r30, r22
    2b1e:	9f 01       	movw	r18, r30
    2b20:	e8 94       	clt
    2b22:	42 30       	cpi	r20, 0x02	; 2
    2b24:	c4 f0       	brlt	.+48     	; 0x2b56 <itoa+0x3a>
    2b26:	45 32       	cpi	r20, 0x25	; 37
    2b28:	b4 f4       	brge	.+44     	; 0x2b56 <itoa+0x3a>
    2b2a:	4a 30       	cpi	r20, 0x0A	; 10
    2b2c:	29 f4       	brne	.+10     	; 0x2b38 <itoa+0x1c>
    2b2e:	97 fb       	bst	r25, 7
    2b30:	1e f4       	brtc	.+6      	; 0x2b38 <itoa+0x1c>
    2b32:	90 95       	com	r25
    2b34:	81 95       	neg	r24
    2b36:	9f 4f       	sbci	r25, 0xFF	; 255
    2b38:	64 2f       	mov	r22, r20
    2b3a:	77 27       	eor	r23, r23
    2b3c:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <__udivmodhi4>
    2b40:	80 5d       	subi	r24, 0xD0	; 208
    2b42:	8a 33       	cpi	r24, 0x3A	; 58
    2b44:	0c f0       	brlt	.+2      	; 0x2b48 <itoa+0x2c>
    2b46:	89 5d       	subi	r24, 0xD9	; 217
    2b48:	81 93       	st	Z+, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	00 97       	sbiw	r24, 0x00	; 0
    2b4e:	a1 f7       	brne	.-24     	; 0x2b38 <itoa+0x1c>
    2b50:	16 f4       	brtc	.+4      	; 0x2b56 <itoa+0x3a>
    2b52:	5d e2       	ldi	r21, 0x2D	; 45
    2b54:	51 93       	st	Z+, r21
    2b56:	10 82       	st	Z, r1
    2b58:	c9 01       	movw	r24, r18
    2b5a:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <strrev>

00002b5e <strrev>:
    2b5e:	dc 01       	movw	r26, r24
    2b60:	fc 01       	movw	r30, r24
    2b62:	67 2f       	mov	r22, r23
    2b64:	71 91       	ld	r23, Z+
    2b66:	77 23       	and	r23, r23
    2b68:	e1 f7       	brne	.-8      	; 0x2b62 <strrev+0x4>
    2b6a:	32 97       	sbiw	r30, 0x02	; 2
    2b6c:	04 c0       	rjmp	.+8      	; 0x2b76 <strrev+0x18>
    2b6e:	7c 91       	ld	r23, X
    2b70:	6d 93       	st	X+, r22
    2b72:	70 83       	st	Z, r23
    2b74:	62 91       	ld	r22, -Z
    2b76:	ae 17       	cp	r26, r30
    2b78:	bf 07       	cpc	r27, r31
    2b7a:	c8 f3       	brcs	.-14     	; 0x2b6e <strrev+0x10>
    2b7c:	08 95       	ret

00002b7e <__udivmodhi4>:
    2b7e:	aa 1b       	sub	r26, r26
    2b80:	bb 1b       	sub	r27, r27
    2b82:	51 e1       	ldi	r21, 0x11	; 17
    2b84:	07 c0       	rjmp	.+14     	; 0x2b94 <__udivmodhi4_ep>

00002b86 <__udivmodhi4_loop>:
    2b86:	aa 1f       	adc	r26, r26
    2b88:	bb 1f       	adc	r27, r27
    2b8a:	a6 17       	cp	r26, r22
    2b8c:	b7 07       	cpc	r27, r23
    2b8e:	10 f0       	brcs	.+4      	; 0x2b94 <__udivmodhi4_ep>
    2b90:	a6 1b       	sub	r26, r22
    2b92:	b7 0b       	sbc	r27, r23

00002b94 <__udivmodhi4_ep>:
    2b94:	88 1f       	adc	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	5a 95       	dec	r21
    2b9a:	a9 f7       	brne	.-22     	; 0x2b86 <__udivmodhi4_loop>
    2b9c:	80 95       	com	r24
    2b9e:	90 95       	com	r25
    2ba0:	bc 01       	movw	r22, r24
    2ba2:	cd 01       	movw	r24, r26
    2ba4:	08 95       	ret

00002ba6 <_exit>:
    2ba6:	f8 94       	cli

00002ba8 <__stop_program>:
    2ba8:	ff cf       	rjmp	.-2      	; 0x2ba8 <__stop_program>
